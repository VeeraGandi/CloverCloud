/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 173);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
Method = {
  ACK : "ACK",
  CLOSEOUT_RESPONSE : "CLOSEOUT_RESPONSE",
  CLOSEOUT_REQUEST : "CLOSEOUT_REQUEST",
  CAPTURE_PREAUTH_RESPONSE : "CAPTURE_PREAUTH_RESPONSE",
  CAPTURE_PREAUTH : "CAPTURE_PREAUTH",
  CONFIRM_PAYMENT_MESSAGE : "CONFIRM_PAYMENT_MESSAGE",
  LAST_MSG_REQUEST : "LAST_MSG_REQUEST",
  LAST_MSG_RESPONSE : "LAST_MSG_RESPONSE",
  TIP_ADJUST : "TIP_ADJUST",
  TIP_ADJUST_RESPONSE : "TIP_ADJUST_RESPONSE",
  OPEN_CASH_DRAWER : "OPEN_CASH_DRAWER",
  SHOW_PAYMENT_RECEIPT_OPTIONS : "SHOW_PAYMENT_RECEIPT_OPTIONS",
  REFUND_RESPONSE : "REFUND_RESPONSE",
  REFUND_REQUEST : "REFUND_REQUEST",
  TX_START : "TX_START",
  TX_START_RESPONSE : "TX_START_RESPONSE",
  KEY_PRESS : "KEY_PRESS",
  UI_STATE : "UI_STATE",
  TX_STATE : "TX_STATE",
  FINISH_OK : "FINISH_OK",
  FINISH_CANCEL : "FINISH_CANCEL",
  DISCOVERY_REQUEST : "DISCOVERY_REQUEST",
  DISCOVERY_RESPONSE : "DISCOVERY_RESPONSE",
  TIP_ADDED : "TIP_ADDED",
  VERIFY_SIGNATURE : "VERIFY_SIGNATURE",
  SIGNATURE_VERIFIED : "SIGNATURE_VERIFIED",
  PAYMENT_CONFIRMED : "PAYMENT_CONFIRMED",
  PAYMENT_REJECTED : "PAYMENT_REJECTED",
  PAYMENT_VOIDED : "PAYMENT_VOIDED",
  PRINT_PAYMENT : "PRINT_PAYMENT",
  REFUND_PRINT_PAYMENT : "REFUND_PRINT_PAYMENT",
  PRINT_PAYMENT_MERCHANT_COPY : "PRINT_PAYMENT_MERCHANT_COPY",
  PRINT_CREDIT : "PRINT_CREDIT",
  PRINT_PAYMENT_DECLINE : "PRINT_PAYMENT_DECLINE",
  PRINT_CREDIT_DECLINE : "PRINT_CREDIT_DECLINE",
  PRINT_TEXT : "PRINT_TEXT",
  PRINT_IMAGE : "PRINT_IMAGE",
  TERMINAL_MESSAGE : "TERMINAL_MESSAGE",
  SHOW_WELCOME_SCREEN : "SHOW_WELCOME_SCREEN",
  SHOW_THANK_YOU_SCREEN : "SHOW_THANK_YOU_SCREEN",
  SHOW_ORDER_SCREEN : "SHOW_ORDER_SCREEN",
  BREAK : "BREAK",
  CASHBACK_SELECTED : "CASHBACK_SELECTED",
  PARTIAL_AUTH : "PARTIAL_AUTH",
  VOID_PAYMENT : "VOID_PAYMENT",
  ORDER_ACTION_ADD_DISCOUNT : "ORDER_ACTION_ADD_DISCOUNT",
  ORDER_ACTION_REMOVE_DISCOUNT : "ORDER_ACTION_REMOVE_DISCOUNT",
  ORDER_ACTION_ADD_LINE_ITEM : "ORDER_ACTION_ADD_LINE_ITEM",
  ORDER_ACTION_REMOVE_LINE_ITEM : "ORDER_ACTION_REMOVE_LINE_ITEM",
  ORDER_ACTION_RESPONSE : "ORDER_ACTION_RESPONSE",
  VAULT_CARD : "VAULT_CARD",
  VAULT_CARD_RESPONSE : "VAULT_CARD_RESPONSE",
  LOG_MESSAGE : "LOG_MESSAGE",
  RETRIEVE_PENDING_PAYMENTS : "RETRIEVE_PENDING_PAYMENTS",
  RETRIEVE_PENDING_PAYMENTS_RESPONSE : "RETRIEVE_PENDING_PAYMENTS_RESPONSE",
  CARD_DATA_RESPONSE : "CARD_DATA_RESPONSE",
  CARD_DATA : "CARD_DATA",
  PAIRING_REQUEST : "PAIRING_REQUEST",
  PAIRING_RESPONSE : "PAIRING_RESPONSE",
  PAIRING_CODE : "PAIRING_CODE",
  REMOTE_ERROR : "REMOTE_ERROR",
  ACTIVITY_REQUEST : "ACTIVITY_REQUEST",
  ACTIVITY_RESPONSE : "ACTIVITY_RESPONSE",
  SHUTDOWN : "SHUTDOWN",
  RESET : "RESET",
  FORCECONNECT : "FORCECONNECT",
  RETRIEVE_DEVICE_STATUS_REQUEST : "RETRIEVE_DEVICE_STATUS_REQUEST",
  RETRIEVE_DEVICE_STATUS_RESPONSE : "RETRIEVE_DEVICE_STATUS_RESPONSE",
  RESET_DEVICE_RESPONSE : "RESET_DEVICE_RESPONSE",
  ACTIVITY_MESSAGE_TO_ACTIVITY : "ACTIVITY_MESSAGE_TO_ACTIVITY",
  ACTIVITY_MESSAGE_FROM_ACTIVITY : "ACTIVITY_MESSAGE_FROM_ACTIVITY",
  RETRIEVE_PAYMENT_RESPONSE : "RETRIEVE_PAYMENT_RESPONSE",
  RETRIEVE_PAYMENT_REQUEST : "RETRIEVE_PAYMENT_REQUEST",
  PRINT_JOB_STATUS_REQUEST : "PRINT_JOB_STATUS_REQUEST",
  PRINT_JOB_STATUS_RESPONSE : "PRINT_JOB_STATUS_RESPONSE",
  GET_PRINTERS_REQUEST : "GET_PRINTERS_REQUEST",
  GET_PRINTERS_RESPONSE : "GET_PRINTERS_RESPONSE",
  RETRIEVE_CUSTOM_ACTIVITIES_REQUEST : "RETRIEVE_CUSTOM_ACTIVITIES_REQUEST",
  RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE : "RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE"
};


//
// Expose the module.
//
if (true) {
module.exports = Method;
}



/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);

/**
* @constructor
* @memberof remotemessage
*/
var Message = function() {
  this._class_ = Message;
  this.method = undefined;
  this.version = 0;
};


/**
* Set the field value
* The list of message types
*
* @memberof remotemessage.Message
* @param {remotemessage.Method} method 
*/
Message.prototype.setMethod = function(method) {
  this.method = method;
};

/**
* Get the field value
* The list of message types
* @memberof remotemessage.Message
* @return {remotemessage.Method} 
*/
Message.prototype.getMethod = function() {
  return this.method;
};

/**
* Set the field value
* The version of this message
*
* @memberof remotemessage.Message
* @param {Number|Null} version must be an integer, 
*/
Message.prototype.setVersion = function(version) {
  this.version = version;
};

/**
* Get the field value
* The version of this message
* @memberof remotemessage.Message
* @return {Number|Null} must be an integer, 
*/
Message.prototype.getVersion = function() {
  return this.version;
};

/**
* @memberof remotemessage.Message
* @private
*/
Message.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Message.prototype.toString = function() {
  return JSON.stringify(this);
};

Message._meta_ =  {fields:  {}};
Message._meta_._class_ =  Message;
Message._meta_.fields["method"] = {};
Message._meta_.fields["method"].type = remotemessage_Method;
Message._meta_.fields["version"] = {};
Message._meta_.fields["version"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Message;
}



/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var Reference = function() {
  this._class_ = Reference;
  this.id = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof base.Reference
* @param {String} id 
*/
Reference.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof base.Reference
* @return {String} 
*/
Reference.prototype.getId = function() {
  return this.id;
};

/**
* @memberof base.Reference
* @private
*/
Reference.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Reference.prototype.toString = function() {
  return JSON.stringify(this);
};

Reference._meta_ =  {fields:  {}};
Reference._meta_._class_ =  Reference;
Reference._meta_.fields["id"] = {};
Reference._meta_.fields["id"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = Reference;
}



/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/** The base for requests */
/**
* @constructor
* @memberof remotepay
*/
var BaseRequest = function() {
  this._class_ = BaseRequest;
  this.requestId = undefined;
};


/**
* Set the field value
* Identifier for the request
*
* @memberof remotepay.BaseRequest
* @param {String|Null} requestId 
*/
BaseRequest.prototype.setRequestId = function(requestId) {
  this.requestId = requestId;
};

/**
* Get the field value
* Identifier for the request
* @memberof remotepay.BaseRequest
* @return {String|Null} 
*/
BaseRequest.prototype.getRequestId = function() {
  return this.requestId;
};

/**
* @memberof remotepay.BaseRequest
* @private
*/
BaseRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BaseRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

BaseRequest._meta_ =  {fields:  {}};
BaseRequest._meta_._class_ =  BaseRequest;
BaseRequest._meta_.fields["requestId"] = {};
BaseRequest._meta_.fields["requestId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = BaseRequest;
}



/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Result = __webpack_require__(50);
var payments_ServiceChargeAmount = __webpack_require__(20);
var payments_PaymentTaxRate = __webpack_require__(109);
var payments_DCCInfo = __webpack_require__(51);
var payments_CashAdvanceExtra = __webpack_require__(110);
var payments_Refund = __webpack_require__(10);
var payments_GermanInfo = __webpack_require__(15);
var payments_CardTransaction = __webpack_require__(53);
var payments_LineItemPayment = __webpack_require__(29);
var order_VoidReason = __webpack_require__(14);
var apps_AppTracking = __webpack_require__(13);
var base_Reference = __webpack_require__(2);
var base_Tender = __webpack_require__(23);
var payments_TransactionSettings = __webpack_require__(31);

/**
* @constructor
* @memberof payments
*/
var Payment = function() {
  this._class_ = Payment;
  this.id = undefined;
  this.order = undefined;
  this.device = undefined;
  this.tender = undefined;
  this.amount = undefined;
  this.tipAmount = undefined;
  this.taxAmount = undefined;
  this.cashbackAmount = undefined;
  this.cashTendered = undefined;
  this.externalPaymentId = undefined;
  this.employee = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.modifiedTime = undefined;
  this.offline = false;
  this.result = undefined;
  this.cardTransaction = undefined;
  this.serviceCharge = undefined;
  this.taxRates = undefined;
  this.refunds = undefined;
  this.note = undefined;
  this.lineItemPayments = undefined;
  this.voidReason = undefined;
  this.dccInfo = undefined;
  this.transactionSettings = undefined;
  this.germanInfo = undefined;
  this.appTracking = undefined;
  this.cashAdvanceExtra = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.Payment
* @param {String} id 
*/
Payment.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.Payment
* @return {String} 
*/
Payment.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the payment is associated
*
* @memberof payments.Payment
* @param {base.Reference} order 
*/
Payment.prototype.setOrder = function(order) {
  this.order = order;
};

/**
* Get the field value
* The order with which the payment is associated
* @memberof payments.Payment
* @return {base.Reference} 
*/
Payment.prototype.getOrder = function() {
  return this.order;
};

/**
* Set the field value
* Device which processed the transaction for this payment
*
* @memberof payments.Payment
* @param {base.Reference|Null} device 
*/
Payment.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which processed the transaction for this payment
* @memberof payments.Payment
* @return {base.Reference|Null} 
*/
Payment.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
*
* @memberof payments.Payment
* @param {base.Tender} tender 
*/
Payment.prototype.setTender = function(tender) {
  this.tender = tender;
};

/**
* Get the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
* @memberof payments.Payment
* @return {base.Tender} 
*/
Payment.prototype.getTender = function() {
  return this.tender;
};

/**
* Set the field value
* Total amount paid
*
* @memberof payments.Payment
* @param {Number} amount must be a long integer
*/
Payment.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof payments.Payment
* @return {Number} must be a long integer
*/
Payment.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount paid in tips
*
* @memberof payments.Payment
* @param {Number|Null} tipAmount must be a long integer, 
*/
Payment.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof payments.Payment
* @return {Number|Null} must be a long integer, 
*/
Payment.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Amount paid in tax
*
* @memberof payments.Payment
* @param {Number|Null} taxAmount must be a long integer, 
*/
Payment.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Amount paid in tax
* @memberof payments.Payment
* @return {Number|Null} must be a long integer, 
*/
Payment.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* Amount given back in a cash back transaction
*
* @memberof payments.Payment
* @param {Number|Null} cashbackAmount must be a long integer, 
*/
Payment.prototype.setCashbackAmount = function(cashbackAmount) {
  this.cashbackAmount = cashbackAmount;
};

/**
* Get the field value
* Amount given back in a cash back transaction
* @memberof payments.Payment
* @return {Number|Null} must be a long integer, 
*/
Payment.prototype.getCashbackAmount = function() {
  return this.cashbackAmount;
};

/**
* Set the field value
* Amount of cash given by the customer
*
* @memberof payments.Payment
* @param {Number|Null} cashTendered must be a long integer, 
*/
Payment.prototype.setCashTendered = function(cashTendered) {
  this.cashTendered = cashTendered;
};

/**
* Get the field value
* Amount of cash given by the customer
* @memberof payments.Payment
* @return {Number|Null} must be a long integer, 
*/
Payment.prototype.getCashTendered = function() {
  return this.cashTendered;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {String} externalPaymentId 
*/
Payment.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {String} 
*/
Payment.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* The employee who processed the payment
*
* @memberof payments.Payment
* @param {base.Reference} employee 
*/
Payment.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee who processed the payment
* @memberof payments.Payment
* @return {base.Reference} 
*/
Payment.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* Time payment was recorded on server
*
* @memberof payments.Payment
* @param {Number} createdTime must be a long integer
*/
Payment.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Time payment was recorded on server
* @memberof payments.Payment
* @return {Number} must be a long integer
*/
Payment.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {Number} clientCreatedTime must be a long integer
*/
Payment.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {Number} must be a long integer
*/
Payment.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* Last modified time of the payment
*
* @memberof payments.Payment
* @param {Number} modifiedTime must be a long integer
*/
Payment.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* Last modified time of the payment
* @memberof payments.Payment
* @return {Number} must be a long integer
*/
Payment.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {Boolean} offline 
*/
Payment.prototype.setOffline = function(offline) {
  this.offline = offline;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {Boolean} 
*/
Payment.prototype.getOffline = function() {
  return this.offline;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {payments.Result} result 
*/
Payment.prototype.setResult = function(result) {
  this.result = result;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {payments.Result} 
*/
Payment.prototype.getResult = function() {
  return this.result;
};

/**
* Set the field value
* Information about the card used for credit/debit card payments
*
* @memberof payments.Payment
* @param {payments.CardTransaction} cardTransaction 
*/
Payment.prototype.setCardTransaction = function(cardTransaction) {
  this.cardTransaction = cardTransaction;
};

/**
* Get the field value
* Information about the card used for credit/debit card payments
* @memberof payments.Payment
* @return {payments.CardTransaction} 
*/
Payment.prototype.getCardTransaction = function() {
  return this.cardTransaction;
};

/**
* Set the field value
* Amount record as a service charge
*
* @memberof payments.Payment
* @param {payments.ServiceChargeAmount} serviceCharge 
*/
Payment.prototype.setServiceCharge = function(serviceCharge) {
  this.serviceCharge = serviceCharge;
};

/**
* Get the field value
* Amount record as a service charge
* @memberof payments.Payment
* @return {payments.ServiceChargeAmount} 
*/
Payment.prototype.getServiceCharge = function() {
  return this.serviceCharge;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {Array.<payments.PaymentTaxRate>} taxRates An array of 
*/
Payment.prototype.setTaxRates = function(taxRates) {
  this.taxRates = taxRates;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {Array.<payments.PaymentTaxRate>} An array of 
*/
Payment.prototype.getTaxRates = function() {
  return this.taxRates;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {Array.<payments.Refund>} refunds An array of 
*/
Payment.prototype.setRefunds = function(refunds) {
  this.refunds = refunds;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {Array.<payments.Refund>} An array of 
*/
Payment.prototype.getRefunds = function() {
  return this.refunds;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {String} note 
*/
Payment.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {String} 
*/
Payment.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* @memberof payments.Payment
* @param {Array.<payments.LineItemPayment>} lineItemPayments An array of 
*/
Payment.prototype.setLineItemPayments = function(lineItemPayments) {
  this.lineItemPayments = lineItemPayments;
};

/**
* Get the field value
* @memberof payments.Payment
* @return {Array.<payments.LineItemPayment>} An array of 
*/
Payment.prototype.getLineItemPayments = function() {
  return this.lineItemPayments;
};

/**
* Set the field value
* If voided, the reason why (when available)
*
* @memberof payments.Payment
* @param {order.VoidReason} voidReason 
*/
Payment.prototype.setVoidReason = function(voidReason) {
  this.voidReason = voidReason;
};

/**
* Get the field value
* If voided, the reason why (when available)
* @memberof payments.Payment
* @return {order.VoidReason} 
*/
Payment.prototype.getVoidReason = function() {
  return this.voidReason;
};

/**
* Set the field value
* Dynamic Currency Conversion information
*
* @memberof payments.Payment
* @param {payments.DCCInfo|Null} dccInfo 
*/
Payment.prototype.setDccInfo = function(dccInfo) {
  this.dccInfo = dccInfo;
};

/**
* Get the field value
* Dynamic Currency Conversion information
* @memberof payments.Payment
* @return {payments.DCCInfo|Null} 
*/
Payment.prototype.getDccInfo = function() {
  return this.dccInfo;
};

/**
* Set the field value
* Per transaction settings for the payment
*
* @memberof payments.Payment
* @param {payments.TransactionSettings} transactionSettings 
*/
Payment.prototype.setTransactionSettings = function(transactionSettings) {
  this.transactionSettings = transactionSettings;
};

/**
* Get the field value
* Per transaction settings for the payment
* @memberof payments.Payment
* @return {payments.TransactionSettings} 
*/
Payment.prototype.getTransactionSettings = function() {
  return this.transactionSettings;
};

/**
* Set the field value
* German region-specific information
*
* @memberof payments.Payment
* @param {payments.GermanInfo|Null} germanInfo 
*/
Payment.prototype.setGermanInfo = function(germanInfo) {
  this.germanInfo = germanInfo;
};

/**
* Get the field value
* German region-specific information
* @memberof payments.Payment
* @return {payments.GermanInfo|Null} 
*/
Payment.prototype.getGermanInfo = function() {
  return this.germanInfo;
};

/**
* Set the field value
* Tracking information for the app that created this payment.
*
* @memberof payments.Payment
* @param {apps.AppTracking|Null} appTracking 
*/
Payment.prototype.setAppTracking = function(appTracking) {
  this.appTracking = appTracking;
};

/**
* Get the field value
* Tracking information for the app that created this payment.
* @memberof payments.Payment
* @return {apps.AppTracking|Null} 
*/
Payment.prototype.getAppTracking = function() {
  return this.appTracking;
};

/**
* Set the field value
* Information specific to cash advance transactions.
*
* @memberof payments.Payment
* @param {payments.CashAdvanceExtra} cashAdvanceExtra 
*/
Payment.prototype.setCashAdvanceExtra = function(cashAdvanceExtra) {
  this.cashAdvanceExtra = cashAdvanceExtra;
};

/**
* Get the field value
* Information specific to cash advance transactions.
* @memberof payments.Payment
* @return {payments.CashAdvanceExtra} 
*/
Payment.prototype.getCashAdvanceExtra = function() {
  return this.cashAdvanceExtra;
};

/**
* @memberof payments.Payment
* @private
*/
Payment.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Payment.prototype.toString = function() {
  return JSON.stringify(this);
};

Payment._meta_ =  {fields:  {}};
Payment._meta_._class_ =  Payment;
Payment._meta_.fields["id"] = {};
Payment._meta_.fields["id"].type = String;
Payment._meta_.fields["order"] = {};
Payment._meta_.fields["order"].type = base_Reference;
Payment._meta_.fields["device"] = {};
Payment._meta_.fields["device"].type = base_Reference;
Payment._meta_.fields["tender"] = {};
Payment._meta_.fields["tender"].type = base_Tender;
Payment._meta_.fields["amount"] = {};
Payment._meta_.fields["amount"].type = Number;
Payment._meta_.fields["tipAmount"] = {};
Payment._meta_.fields["tipAmount"].type = Number;
Payment._meta_.fields["taxAmount"] = {};
Payment._meta_.fields["taxAmount"].type = Number;
Payment._meta_.fields["cashbackAmount"] = {};
Payment._meta_.fields["cashbackAmount"].type = Number;
Payment._meta_.fields["cashTendered"] = {};
Payment._meta_.fields["cashTendered"].type = Number;
Payment._meta_.fields["externalPaymentId"] = {};
Payment._meta_.fields["externalPaymentId"].type = String;
Payment._meta_.fields["employee"] = {};
Payment._meta_.fields["employee"].type = base_Reference;
Payment._meta_.fields["createdTime"] = {};
Payment._meta_.fields["createdTime"].type = Number;
Payment._meta_.fields["clientCreatedTime"] = {};
Payment._meta_.fields["clientCreatedTime"].type = Number;
Payment._meta_.fields["modifiedTime"] = {};
Payment._meta_.fields["modifiedTime"].type = Number;
Payment._meta_.fields["offline"] = {};
Payment._meta_.fields["offline"].type = Boolean;
Payment._meta_.fields["result"] = {};
Payment._meta_.fields["result"].type = payments_Result;
Payment._meta_.fields["cardTransaction"] = {};
Payment._meta_.fields["cardTransaction"].type = payments_CardTransaction;
Payment._meta_.fields["serviceCharge"] = {};
Payment._meta_.fields["serviceCharge"].type = payments_ServiceChargeAmount;
Payment._meta_.fields["taxRates"] = {};
Payment._meta_.fields["taxRates"].type = Array;
Payment._meta_.fields["taxRates"].elementType = payments_PaymentTaxRate;
Payment._meta_.fields["refunds"] = {};
Payment._meta_.fields["refunds"].type = Array;
Payment._meta_.fields["refunds"].elementType = payments_Refund;
Payment._meta_.fields["note"] = {};
Payment._meta_.fields["note"].type = String;
Payment._meta_.fields["lineItemPayments"] = {};
Payment._meta_.fields["lineItemPayments"].type = Array;
Payment._meta_.fields["lineItemPayments"].elementType = payments_LineItemPayment;
Payment._meta_.fields["voidReason"] = {};
Payment._meta_.fields["voidReason"].type = order_VoidReason;
Payment._meta_.fields["dccInfo"] = {};
Payment._meta_.fields["dccInfo"].type = payments_DCCInfo;
Payment._meta_.fields["transactionSettings"] = {};
Payment._meta_.fields["transactionSettings"].type = payments_TransactionSettings;
Payment._meta_.fields["germanInfo"] = {};
Payment._meta_.fields["germanInfo"].type = payments_GermanInfo;
Payment._meta_.fields["appTracking"] = {};
Payment._meta_.fields["appTracking"].type = apps_AppTracking;
Payment._meta_.fields["cashAdvanceExtra"] = {};
Payment._meta_.fields["cashAdvanceExtra"].type = payments_CashAdvanceExtra;

//
// Expose the module.
//
if (true) {
module.exports = Payment;
}



/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ResponseCode = __webpack_require__(69);

/** The base for responses */
/**
* @constructor
* @memberof remotepay
*/
var BaseResponse = function() {
  this._class_ = BaseResponse;
  this.success = undefined;
  this.result = undefined;
  this.reason = undefined;
  this.message = undefined;
};


/**
* Set the field value
* If true then the requested operation succeeded
*
* @memberof remotepay.BaseResponse
* @param {Boolean} success 
*/
BaseResponse.prototype.setSuccess = function(success) {
  this.success = success;
};

/**
* Get the field value
* If true then the requested operation succeeded
* @memberof remotepay.BaseResponse
* @return {Boolean} 
*/
BaseResponse.prototype.getSuccess = function() {
  return this.success;
};

/**
* Set the field value
* The result of the requested operation.
*
* @memberof remotepay.BaseResponse
* @param {remotepay.ResponseCode} result 
*/
BaseResponse.prototype.setResult = function(result) {
  this.result = result;
};

/**
* Get the field value
* The result of the requested operation.
* @memberof remotepay.BaseResponse
* @return {remotepay.ResponseCode} 
*/
BaseResponse.prototype.getResult = function() {
  return this.result;
};

/**
* Set the field value
* Optional information about result.
*
* @memberof remotepay.BaseResponse
* @param {String|Null} reason 
*/
BaseResponse.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Optional information about result.
* @memberof remotepay.BaseResponse
* @return {String|Null} 
*/
BaseResponse.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* Detailed information about result.
*
* @memberof remotepay.BaseResponse
* @param {String|Null} message 
*/
BaseResponse.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* Detailed information about result.
* @memberof remotepay.BaseResponse
* @return {String|Null} 
*/
BaseResponse.prototype.getMessage = function() {
  return this.message;
};

/**
* @memberof remotepay.BaseResponse
* @private
*/
BaseResponse.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BaseResponse.prototype.toString = function() {
  return JSON.stringify(this);
};

BaseResponse._meta_ =  {fields:  {}};
BaseResponse._meta_._class_ =  BaseResponse;
BaseResponse._meta_.fields["success"] = {};
BaseResponse._meta_.fields["success"].type = Boolean;
BaseResponse._meta_.fields["result"] = {};
BaseResponse._meta_.fields["result"].type = remotepay_ResponseCode;
BaseResponse._meta_.fields["reason"] = {};
BaseResponse._meta_.fields["reason"].type = String;
BaseResponse._meta_.fields["message"] = {};
BaseResponse._meta_.fields["message"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = BaseResponse;
}



/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports.sdk = sdk;
/**
 * @namespace base
 */
function sdk() {}

sdk.apps = __webpack_require__(175);
sdk.base = __webpack_require__(176);
sdk.customers = __webpack_require__(182);
sdk.device = __webpack_require__(183);
sdk.employees = __webpack_require__(192);
sdk.hours = __webpack_require__(198);
sdk.inventory = __webpack_require__(199);
sdk.order = __webpack_require__(211);
sdk.payments = __webpack_require__(218);
sdk.printer = __webpack_require__(231);
sdk.remotemessage = __webpack_require__(232);
sdk.remotepay = __webpack_require__(313);

//
// Expose the module.
//
if (true) {
    module.exports = sdk;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(374);
var DebugConfig_1 = __webpack_require__(161);
/**
 * A simple logging utility that uses the underlying console.
 */
var Logger = (function (_super) {
    __extends(Logger, _super);
    function Logger() {
        var _this = _super.call(this) || this;
        _this.enabled = false;
        return _this;
    }
    Logger.create = function () {
        var log = new Logger();
        log.on("log", toConsole);
        log.silly = log.emit.bind(log, "log", "silly");
        log.verbose = log.emit.bind(log, "log", "verbose");
        log.info = log.emit.bind(log, "log", "info");
        log.warn = log.emit.bind(log, "log", "warn");
        log.error = log.emit.bind(log, "log", "error");
        log.debug = log.emit.bind(log, "log", "debug");
        log.enabled = false;
        return log;
        function toConsole() {
            var args = [].slice.call(arguments), errorLog = args && args.length > 0 ? args[0] === "error" : false;
            if (errorLog || log.enabled || DebugConfig_1.DebugConfig.loggingEnabled) {
                console.log.apply(console, arguments);
            }
        }
    };
    Logger.prototype.silly = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    Logger.prototype.verbose = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    Logger.prototype.info = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    Logger.prototype.warn = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    Logger.prototype.error = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    Logger.prototype.debug = function () {
        var any = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            any[_i] = arguments[_i];
        }
    };
    return Logger;
}(events_1.EventEmitter));
exports.Logger = Logger;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/util/Logger.js.map


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
ResultStatus = {
  SUCCESS : "SUCCESS",
  FAIL : "FAIL",
  CANCEL : "CANCEL"
};


//
// Expose the module.
//
if (true) {
module.exports = ResultStatus;
}



/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var printer_PrinterType = __webpack_require__(100);

/**
* @constructor
* @memberof printer
*/
var Printer = function() {
  this._class_ = Printer;
  this.id = undefined;
  this.mac = undefined;
  this.model = undefined;
  this.name = undefined;
  this.ipAddress = undefined;
  this.type = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof printer.Printer
* @param {String} id 
*/
Printer.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof printer.Printer
* @return {String} 
*/
Printer.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* MAC address of a network printer
*
* @memberof printer.Printer
* @param {String} mac 
*/
Printer.prototype.setMac = function(mac) {
  this.mac = mac;
};

/**
* Get the field value
* MAC address of a network printer
* @memberof printer.Printer
* @return {String} 
*/
Printer.prototype.getMac = function() {
  return this.mac;
};

/**
* Set the field value
* @memberof printer.Printer
* @param {String} model 
*/
Printer.prototype.setModel = function(model) {
  this.model = model;
};

/**
* Get the field value
* @memberof printer.Printer
* @return {String} 
*/
Printer.prototype.getModel = function() {
  return this.model;
};

/**
* Set the field value
* @memberof printer.Printer
* @param {String} name 
*/
Printer.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof printer.Printer
* @return {String} 
*/
Printer.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* IP address of a network printer
*
* @memberof printer.Printer
* @param {String} ipAddress 
*/
Printer.prototype.setIpAddress = function(ipAddress) {
  this.ipAddress = ipAddress;
};

/**
* Get the field value
* IP address of a network printer
* @memberof printer.Printer
* @return {String} 
*/
Printer.prototype.getIpAddress = function() {
  return this.ipAddress;
};

/**
* Set the field value
* NETWORK is a printer that's directly connected to the network.  MY_LOCAL represents the printer that's connected to the device that's making the request.
*
* @memberof printer.Printer
* @param {printer.PrinterType} type 
*/
Printer.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* NETWORK is a printer that's directly connected to the network.  MY_LOCAL represents the printer that's connected to the device that's making the request.
* @memberof printer.Printer
* @return {printer.PrinterType} 
*/
Printer.prototype.getType = function() {
  return this.type;
};

/**
* @memberof printer.Printer
* @private
*/
Printer.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Printer.prototype.toString = function() {
  return JSON.stringify(this);
};

Printer._meta_ =  {fields:  {}};
Printer._meta_._class_ =  Printer;
Printer._meta_.fields["id"] = {};
Printer._meta_.fields["id"].type = String;
Printer._meta_.fields["mac"] = {};
Printer._meta_.fields["mac"].type = String;
Printer._meta_.fields["model"] = {};
Printer._meta_.fields["model"].type = String;
Printer._meta_.fields["name"] = {};
Printer._meta_.fields["name"].type = String;
Printer._meta_.fields["ipAddress"] = {};
Printer._meta_.fields["ipAddress"].type = String;
Printer._meta_.fields["type"] = {};
Printer._meta_.fields["type"].type = printer_PrinterType;

//
// Expose the module.
//
if (true) {
module.exports = Printer;
}



/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_TaxableAmountRate = __webpack_require__(21);
var apps_AppTracking = __webpack_require__(13);
var payments_ServiceChargeAmount = __webpack_require__(20);
var base_Reference = __webpack_require__(2);
var base_Tender = __webpack_require__(23);
var payments_GermanInfo = __webpack_require__(15);

/**
* @constructor
* @memberof payments
*/
var Refund = function() {
  this._class_ = Refund;
  this.id = undefined;
  this.orderRef = undefined;
  this.device = undefined;
  this.amount = undefined;
  this.taxAmount = undefined;
  this.tipAmount = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.payment = undefined;
  this.employee = undefined;
  this.lineItems = undefined;
  this.overrideMerchantTender = undefined;
  this.taxableAmountRates = undefined;
  this.serviceChargeAmount = undefined;
  this.germanInfo = undefined;
  this.appTracking = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.Refund
* @param {String} id 
*/
Refund.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.Refund
* @return {String} 
*/
Refund.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the refund is associated
*
* @memberof payments.Refund
* @param {base.Reference} orderRef 
*/
Refund.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the refund is associated
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* Device which processed the transaction for this refund
*
* @memberof payments.Refund
* @param {base.Reference|Null} device 
*/
Refund.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which processed the transaction for this refund
* @memberof payments.Refund
* @return {base.Reference|Null} 
*/
Refund.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* Total amount refunded, including tax and tip
*
* @memberof payments.Refund
* @param {Number} amount must be a long integer
*/
Refund.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount refunded, including tax and tip
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Tax amount refunded
*
* @memberof payments.Refund
* @param {Number|Null} taxAmount must be a long integer, 
*/
Refund.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Tax amount refunded
* @memberof payments.Refund
* @return {Number|Null} must be a long integer, 
*/
Refund.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* Tip amount refunded
*
* @memberof payments.Refund
* @param {Number|Null} tipAmount must be a long integer, 
*/
Refund.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Tip amount refunded
* @memberof payments.Refund
* @return {Number|Null} must be a long integer, 
*/
Refund.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* The time when the refund was recorded on the server
*
* @memberof payments.Refund
* @param {Number} createdTime must be a long integer
*/
Refund.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* The time when the refund was recorded on the server
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* The time when the refund was recorded on the client
*
* @memberof payments.Refund
* @param {Number} clientCreatedTime must be a long integer
*/
Refund.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time when the refund was recorded on the client
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* The payment with which the refund is associated
*
* @memberof payments.Refund
* @param {base.Reference} payment 
*/
Refund.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* The payment with which the refund is associated
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {base.Reference} employee 
*/
Refund.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {Array.<base.Reference>} lineItems An array of 
*/
Refund.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {Array.<base.Reference>} An array of 
*/
Refund.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
*
* @memberof payments.Refund
* @param {base.Tender} overrideMerchantTender 
*/
Refund.prototype.setOverrideMerchantTender = function(overrideMerchantTender) {
  this.overrideMerchantTender = overrideMerchantTender;
};

/**
* Get the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
* @memberof payments.Refund
* @return {base.Tender} 
*/
Refund.prototype.getOverrideMerchantTender = function() {
  return this.overrideMerchantTender;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
*/
Refund.prototype.setTaxableAmountRates = function(taxableAmountRates) {
  this.taxableAmountRates = taxableAmountRates;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {Array.<payments.TaxableAmountRate>} An array of 
*/
Refund.prototype.getTaxableAmountRates = function() {
  return this.taxableAmountRates;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {payments.ServiceChargeAmount} serviceChargeAmount 
*/
Refund.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
  this.serviceChargeAmount = serviceChargeAmount;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {payments.ServiceChargeAmount} 
*/
Refund.prototype.getServiceChargeAmount = function() {
  return this.serviceChargeAmount;
};

/**
* Set the field value
* German region-specific information
*
* @memberof payments.Refund
* @param {payments.GermanInfo|Null} germanInfo 
*/
Refund.prototype.setGermanInfo = function(germanInfo) {
  this.germanInfo = germanInfo;
};

/**
* Get the field value
* German region-specific information
* @memberof payments.Refund
* @return {payments.GermanInfo|Null} 
*/
Refund.prototype.getGermanInfo = function() {
  return this.germanInfo;
};

/**
* Set the field value
* Tracking information for the app that created this refund.
*
* @memberof payments.Refund
* @param {apps.AppTracking|Null} appTracking 
*/
Refund.prototype.setAppTracking = function(appTracking) {
  this.appTracking = appTracking;
};

/**
* Get the field value
* Tracking information for the app that created this refund.
* @memberof payments.Refund
* @return {apps.AppTracking|Null} 
*/
Refund.prototype.getAppTracking = function() {
  return this.appTracking;
};

/**
* @memberof payments.Refund
* @private
*/
Refund.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Refund.prototype.toString = function() {
  return JSON.stringify(this);
};

Refund._meta_ =  {fields:  {}};
Refund._meta_._class_ =  Refund;
Refund._meta_.fields["id"] = {};
Refund._meta_.fields["id"].type = String;
Refund._meta_.fields["orderRef"] = {};
Refund._meta_.fields["orderRef"].type = base_Reference;
Refund._meta_.fields["device"] = {};
Refund._meta_.fields["device"].type = base_Reference;
Refund._meta_.fields["amount"] = {};
Refund._meta_.fields["amount"].type = Number;
Refund._meta_.fields["taxAmount"] = {};
Refund._meta_.fields["taxAmount"].type = Number;
Refund._meta_.fields["tipAmount"] = {};
Refund._meta_.fields["tipAmount"].type = Number;
Refund._meta_.fields["createdTime"] = {};
Refund._meta_.fields["createdTime"].type = Number;
Refund._meta_.fields["clientCreatedTime"] = {};
Refund._meta_.fields["clientCreatedTime"].type = Number;
Refund._meta_.fields["payment"] = {};
Refund._meta_.fields["payment"].type = base_Reference;
Refund._meta_.fields["employee"] = {};
Refund._meta_.fields["employee"].type = base_Reference;
Refund._meta_.fields["lineItems"] = {};
Refund._meta_.fields["lineItems"].type = Array;
Refund._meta_.fields["lineItems"].elementType = base_Reference;
Refund._meta_.fields["overrideMerchantTender"] = {};
Refund._meta_.fields["overrideMerchantTender"].type = base_Tender;
Refund._meta_.fields["taxableAmountRates"] = {};
Refund._meta_.fields["taxableAmountRates"].type = Array;
Refund._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
Refund._meta_.fields["serviceChargeAmount"] = {};
Refund._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;
Refund._meta_.fields["germanInfo"] = {};
Refund._meta_.fields["germanInfo"].type = payments_GermanInfo;
Refund._meta_.fields["appTracking"] = {};
Refund._meta_.fields["appTracking"].type = apps_AppTracking;

//
// Expose the module.
//
if (true) {
module.exports = Refund;
}



/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var VaultedCard = function() {
  this._class_ = VaultedCard;
  this.first6 = undefined;
  this.last4 = undefined;
  this.cardholderName = undefined;
  this.expirationDate = undefined;
  this.token = undefined;
};


/**
* Set the field value
* @memberof payments.VaultedCard
* @param {String} first6
*/
VaultedCard.prototype.setFirst6 = function(first6) {
  this.first6 = first6;
};

/**
* Get the field value
* @memberof payments.VaultedCard
* @return {String}
*/
VaultedCard.prototype.getFirst6 = function() {
  return this.first6;
};

/**
* Set the field value
* @memberof payments.VaultedCard
* @param {String} last4
*/
VaultedCard.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* @memberof payments.VaultedCard
* @return {String}
*/
VaultedCard.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* @memberof payments.VaultedCard
* @param {String} cardholderName
*/
VaultedCard.prototype.setCardholderName = function(cardholderName) {
  this.cardholderName = cardholderName;
};

/**
* Get the field value
* @memberof payments.VaultedCard
* @return {String}
*/
VaultedCard.prototype.getCardholderName = function() {
  return this.cardholderName;
};

/**
* Set the field value
* @memberof payments.VaultedCard
* @param {String} expirationDate
*/
VaultedCard.prototype.setExpirationDate = function(expirationDate) {
  this.expirationDate = expirationDate;
};

/**
* Get the field value
* @memberof payments.VaultedCard
* @return {String}
*/
VaultedCard.prototype.getExpirationDate = function() {
  return this.expirationDate;
};

/**
* Set the field value
* @memberof payments.VaultedCard
* @param {String} token
*/
VaultedCard.prototype.setToken = function(token) {
  this.token = token;
};

/**
* Get the field value
* @memberof payments.VaultedCard
* @return {String}
*/
VaultedCard.prototype.getToken = function() {
  return this.token;
};

/**
* @memberof payments.VaultedCard
* @private
*/
VaultedCard.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

VaultedCard.prototype.toString = function() {
  return JSON.stringify(this);
};

VaultedCard._meta_ =  {fields:  {}};
VaultedCard._meta_._class_ =  VaultedCard;
VaultedCard._meta_.fields["first6"] = {};
VaultedCard._meta_.fields["first6"].type = String;
VaultedCard._meta_.fields["last4"] = {};
VaultedCard._meta_.fields["last4"].type = String;
VaultedCard._meta_.fields["cardholderName"] = {};
VaultedCard._meta_.fields["cardholderName"].type = String;
VaultedCard._meta_.fields["expirationDate"] = {};
VaultedCard._meta_.fields["expirationDate"].type = String;
VaultedCard._meta_.fields["token"] = {};
VaultedCard._meta_.fields["token"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = VaultedCard;
}



/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
TransactionType = {
  PAYMENT : "PAYMENT",
  CREDIT : "CREDIT",
  AUTH : "AUTH",
  DATA : "DATA",
  BALANCE_INQUIRY : "BALANCE_INQUIRY"
};


//
// Expose the module.
//
if (true) {
module.exports = TransactionType;
}



/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/** Used to track the origin of a distributed call. */
/**
* @constructor
* @memberof apps
*/
var AppTracking = function() {
  this._class_ = AppTracking;
  this.developerAppId = undefined;
  this.applicationName = undefined;
  this.applicationID = undefined;
  this.applicationVersion = undefined;
  this.sourceSDK = undefined;
  this.sourceSDKVersion = undefined;
  this.paymentRef = undefined;
  this.creditRef = undefined;
  this.refundRef = undefined;
  this.creditRefundRef = undefined;
};


/**
* Set the field value
* The uuid from the developer application.  This is typically populated and used only on the back end.
*
* @memberof apps.AppTracking
* @param {String} developerAppId 
*/
AppTracking.prototype.setDeveloperAppId = function(developerAppId) {
  this.developerAppId = developerAppId;
};

/**
* Get the field value
* The uuid from the developer application.  This is typically populated and used only on the back end.
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getDeveloperAppId = function() {
  return this.developerAppId;
};

/**
* Set the field value
* The name of the developer application.
*
* @memberof apps.AppTracking
* @param {String} applicationName 
*/
AppTracking.prototype.setApplicationName = function(applicationName) {
  this.applicationName = applicationName;
};

/**
* Get the field value
* The name of the developer application.
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getApplicationName = function() {
  return this.applicationName;
};

/**
* Set the field value
* A string representing an application
*
* @memberof apps.AppTracking
* @param {String} applicationID 
*/
AppTracking.prototype.setApplicationID = function(applicationID) {
  this.applicationID = applicationID;
};

/**
* Get the field value
* A string representing an application
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getApplicationID = function() {
  return this.applicationID;
};

/**
* Set the field value
* A string representing a semanticversion.  See http://semver.org/
*
* @memberof apps.AppTracking
* @param {String} applicationVersion 
*/
AppTracking.prototype.setApplicationVersion = function(applicationVersion) {
  this.applicationVersion = applicationVersion;
};

/**
* Get the field value
* A string representing a semanticversion.  See http://semver.org/
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getApplicationVersion = function() {
  return this.applicationVersion;
};

/**
* Set the field value
* A string representing a SDK
*
* @memberof apps.AppTracking
* @param {String} sourceSDK 
*/
AppTracking.prototype.setSourceSDK = function(sourceSDK) {
  this.sourceSDK = sourceSDK;
};

/**
* Get the field value
* A string representing a SDK
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getSourceSDK = function() {
  return this.sourceSDK;
};

/**
* Set the field value
* A string representing a semanticversion.  See http://semver.org/
*
* @memberof apps.AppTracking
* @param {String} sourceSDKVersion 
*/
AppTracking.prototype.setSourceSDKVersion = function(sourceSDKVersion) {
  this.sourceSDKVersion = sourceSDKVersion;
};

/**
* Get the field value
* A string representing a semanticversion.  See http://semver.org/
* @memberof apps.AppTracking
* @return {String} 
*/
AppTracking.prototype.getSourceSDKVersion = function() {
  return this.sourceSDKVersion;
};

/**
* Set the field value
* The payment with which this app tracking info is associated
*
* @memberof apps.AppTracking
* @param {base.Reference} paymentRef 
*/
AppTracking.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which this app tracking info is associated
* @memberof apps.AppTracking
* @return {base.Reference} 
*/
AppTracking.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* The credit with which this app tracking info is associated
*
* @memberof apps.AppTracking
* @param {base.Reference} creditRef 
*/
AppTracking.prototype.setCreditRef = function(creditRef) {
  this.creditRef = creditRef;
};

/**
* Get the field value
* The credit with which this app tracking info is associated
* @memberof apps.AppTracking
* @return {base.Reference} 
*/
AppTracking.prototype.getCreditRef = function() {
  return this.creditRef;
};

/**
* Set the field value
* The refund with which this app tracking info is associated
*
* @memberof apps.AppTracking
* @param {base.Reference} refundRef 
*/
AppTracking.prototype.setRefundRef = function(refundRef) {
  this.refundRef = refundRef;
};

/**
* Get the field value
* The refund with which this app tracking info is associated
* @memberof apps.AppTracking
* @return {base.Reference} 
*/
AppTracking.prototype.getRefundRef = function() {
  return this.refundRef;
};

/**
* Set the field value
* The credit refund with which this app tracking info is associated
*
* @memberof apps.AppTracking
* @param {base.Reference} creditRefundRef 
*/
AppTracking.prototype.setCreditRefundRef = function(creditRefundRef) {
  this.creditRefundRef = creditRefundRef;
};

/**
* Get the field value
* The credit refund with which this app tracking info is associated
* @memberof apps.AppTracking
* @return {base.Reference} 
*/
AppTracking.prototype.getCreditRefundRef = function() {
  return this.creditRefundRef;
};

/**
* @memberof apps.AppTracking
* @private
*/
AppTracking.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

AppTracking.prototype.toString = function() {
  return JSON.stringify(this);
};

AppTracking._meta_ =  {fields:  {}};
AppTracking._meta_._class_ =  AppTracking;
AppTracking._meta_.fields["developerAppId"] = {};
AppTracking._meta_.fields["developerAppId"].type = String;
AppTracking._meta_.fields["applicationName"] = {};
AppTracking._meta_.fields["applicationName"].type = String;
AppTracking._meta_.fields["applicationID"] = {};
AppTracking._meta_.fields["applicationID"].type = String;
AppTracking._meta_.fields["applicationVersion"] = {};
AppTracking._meta_.fields["applicationVersion"].type = String;
AppTracking._meta_.fields["sourceSDK"] = {};
AppTracking._meta_.fields["sourceSDK"].type = String;
AppTracking._meta_.fields["sourceSDKVersion"] = {};
AppTracking._meta_.fields["sourceSDKVersion"].type = String;
AppTracking._meta_.fields["paymentRef"] = {};
AppTracking._meta_.fields["paymentRef"].type = base_Reference;
AppTracking._meta_.fields["creditRef"] = {};
AppTracking._meta_.fields["creditRef"].type = base_Reference;
AppTracking._meta_.fields["refundRef"] = {};
AppTracking._meta_.fields["refundRef"].type = base_Reference;
AppTracking._meta_.fields["creditRefundRef"] = {};
AppTracking._meta_.fields["creditRefundRef"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = AppTracking;
}



/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
Symbols beginning with USER_ or REJECT_ are user-initiated.  Others are client- or server-initiated.
* @memberof order
* @enum {string}
*/
VoidReason = {
  USER_CANCEL : "USER_CANCEL",
  TRANSPORT_ERROR : "TRANSPORT_ERROR",
  REJECT_SIGNATURE : "REJECT_SIGNATURE",
  REJECT_PARTIAL_AUTH : "REJECT_PARTIAL_AUTH",
  NOT_APPROVED : "NOT_APPROVED",
  FAILED : "FAILED",
  AUTH_CLOSED_NEW_CARD : "AUTH_CLOSED_NEW_CARD",
  DEVELOPER_PAY_PARTIAL_AUTH : "DEVELOPER_PAY_PARTIAL_AUTH",
  REJECT_DUPLICATE : "REJECT_DUPLICATE",
  REJECT_OFFLINE : "REJECT_OFFLINE",
  GIFTCARD_LOAD_FAILED : "GIFTCARD_LOAD_FAILED",
  USER_GIFTCARD_LOAD_CANCEL : "USER_GIFTCARD_LOAD_CANCEL",
  DEVELOPER_PAY_TIP_ADJUST_FAILED : "DEVELOPER_PAY_TIP_ADJUST_FAILED"
};


//
// Expose the module.
//
if (true) {
module.exports = VoidReason;
}



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var GermanInfo = function() {
  this._class_ = GermanInfo;
  this.cardTrack2 = undefined;
  this.cardSequenceNumber = undefined;
  this.transactionCaseGermany = undefined;
  this.transactionTypeGermany = undefined;
  this.terminalID = undefined;
  this.traceNumber = undefined;
  this.oldTraceNumber = undefined;
  this.receiptNumber = undefined;
  this.transactionAID = undefined;
  this.transactionMSApp = undefined;
  this.transactionScriptResults = undefined;
  this.receiptType = undefined;
  this.customerTransactionDOLValues = undefined;
  this.merchantTransactionDOLValues = undefined;
  this.merchantJournalDOL = undefined;
  this.merchantJournalDOLValues = undefined;
  this.configMerchantId = undefined;
  this.configProductLabel = undefined;
  this.hostResponseAidParBMP53 = undefined;
  this.hostResponsePrintDataBM60 = undefined;
  this.paymentRef = undefined;
  this.creditRef = undefined;
  this.refundRef = undefined;
  this.creditRefundRef = undefined;
};


/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} cardTrack2 
*/
GermanInfo.prototype.setCardTrack2 = function(cardTrack2) {
  this.cardTrack2 = cardTrack2;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getCardTrack2 = function() {
  return this.cardTrack2;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} cardSequenceNumber 
*/
GermanInfo.prototype.setCardSequenceNumber = function(cardSequenceNumber) {
  this.cardSequenceNumber = cardSequenceNumber;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getCardSequenceNumber = function() {
  return this.cardSequenceNumber;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} transactionCaseGermany 
*/
GermanInfo.prototype.setTransactionCaseGermany = function(transactionCaseGermany) {
  this.transactionCaseGermany = transactionCaseGermany;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTransactionCaseGermany = function() {
  return this.transactionCaseGermany;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} transactionTypeGermany 
*/
GermanInfo.prototype.setTransactionTypeGermany = function(transactionTypeGermany) {
  this.transactionTypeGermany = transactionTypeGermany;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTransactionTypeGermany = function() {
  return this.transactionTypeGermany;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} terminalID 
*/
GermanInfo.prototype.setTerminalID = function(terminalID) {
  this.terminalID = terminalID;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTerminalID = function() {
  return this.terminalID;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} traceNumber 
*/
GermanInfo.prototype.setTraceNumber = function(traceNumber) {
  this.traceNumber = traceNumber;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTraceNumber = function() {
  return this.traceNumber;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} oldTraceNumber 
*/
GermanInfo.prototype.setOldTraceNumber = function(oldTraceNumber) {
  this.oldTraceNumber = oldTraceNumber;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getOldTraceNumber = function() {
  return this.oldTraceNumber;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} receiptNumber 
*/
GermanInfo.prototype.setReceiptNumber = function(receiptNumber) {
  this.receiptNumber = receiptNumber;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getReceiptNumber = function() {
  return this.receiptNumber;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} transactionAID 
*/
GermanInfo.prototype.setTransactionAID = function(transactionAID) {
  this.transactionAID = transactionAID;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTransactionAID = function() {
  return this.transactionAID;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} transactionMSApp 
*/
GermanInfo.prototype.setTransactionMSApp = function(transactionMSApp) {
  this.transactionMSApp = transactionMSApp;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTransactionMSApp = function() {
  return this.transactionMSApp;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} transactionScriptResults 
*/
GermanInfo.prototype.setTransactionScriptResults = function(transactionScriptResults) {
  this.transactionScriptResults = transactionScriptResults;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getTransactionScriptResults = function() {
  return this.transactionScriptResults;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} receiptType 
*/
GermanInfo.prototype.setReceiptType = function(receiptType) {
  this.receiptType = receiptType;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getReceiptType = function() {
  return this.receiptType;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} customerTransactionDOLValues 
*/
GermanInfo.prototype.setCustomerTransactionDOLValues = function(customerTransactionDOLValues) {
  this.customerTransactionDOLValues = customerTransactionDOLValues;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getCustomerTransactionDOLValues = function() {
  return this.customerTransactionDOLValues;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} merchantTransactionDOLValues 
*/
GermanInfo.prototype.setMerchantTransactionDOLValues = function(merchantTransactionDOLValues) {
  this.merchantTransactionDOLValues = merchantTransactionDOLValues;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getMerchantTransactionDOLValues = function() {
  return this.merchantTransactionDOLValues;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} merchantJournalDOL 
*/
GermanInfo.prototype.setMerchantJournalDOL = function(merchantJournalDOL) {
  this.merchantJournalDOL = merchantJournalDOL;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getMerchantJournalDOL = function() {
  return this.merchantJournalDOL;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} merchantJournalDOLValues 
*/
GermanInfo.prototype.setMerchantJournalDOLValues = function(merchantJournalDOLValues) {
  this.merchantJournalDOLValues = merchantJournalDOLValues;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getMerchantJournalDOLValues = function() {
  return this.merchantJournalDOLValues;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} configMerchantId 
*/
GermanInfo.prototype.setConfigMerchantId = function(configMerchantId) {
  this.configMerchantId = configMerchantId;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getConfigMerchantId = function() {
  return this.configMerchantId;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} configProductLabel 
*/
GermanInfo.prototype.setConfigProductLabel = function(configProductLabel) {
  this.configProductLabel = configProductLabel;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getConfigProductLabel = function() {
  return this.configProductLabel;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} hostResponseAidParBMP53 
*/
GermanInfo.prototype.setHostResponseAidParBMP53 = function(hostResponseAidParBMP53) {
  this.hostResponseAidParBMP53 = hostResponseAidParBMP53;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getHostResponseAidParBMP53 = function() {
  return this.hostResponseAidParBMP53;
};

/**
* Set the field value
* @memberof payments.GermanInfo
* @param {String} hostResponsePrintDataBM60 
*/
GermanInfo.prototype.setHostResponsePrintDataBM60 = function(hostResponsePrintDataBM60) {
  this.hostResponsePrintDataBM60 = hostResponsePrintDataBM60;
};

/**
* Get the field value
* @memberof payments.GermanInfo
* @return {String} 
*/
GermanInfo.prototype.getHostResponsePrintDataBM60 = function() {
  return this.hostResponsePrintDataBM60;
};

/**
* Set the field value
* The payment with which this German info is associated
*
* @memberof payments.GermanInfo
* @param {base.Reference} paymentRef 
*/
GermanInfo.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which this German info is associated
* @memberof payments.GermanInfo
* @return {base.Reference} 
*/
GermanInfo.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* The credit with which this German info is associated
*
* @memberof payments.GermanInfo
* @param {base.Reference} creditRef 
*/
GermanInfo.prototype.setCreditRef = function(creditRef) {
  this.creditRef = creditRef;
};

/**
* Get the field value
* The credit with which this German info is associated
* @memberof payments.GermanInfo
* @return {base.Reference} 
*/
GermanInfo.prototype.getCreditRef = function() {
  return this.creditRef;
};

/**
* Set the field value
* The refund with which this German info is associated
*
* @memberof payments.GermanInfo
* @param {base.Reference} refundRef 
*/
GermanInfo.prototype.setRefundRef = function(refundRef) {
  this.refundRef = refundRef;
};

/**
* Get the field value
* The refund with which this German info is associated
* @memberof payments.GermanInfo
* @return {base.Reference} 
*/
GermanInfo.prototype.getRefundRef = function() {
  return this.refundRef;
};

/**
* Set the field value
* The credit refund with which this German info is associated
*
* @memberof payments.GermanInfo
* @param {base.Reference} creditRefundRef 
*/
GermanInfo.prototype.setCreditRefundRef = function(creditRefundRef) {
  this.creditRefundRef = creditRefundRef;
};

/**
* Get the field value
* The credit refund with which this German info is associated
* @memberof payments.GermanInfo
* @return {base.Reference} 
*/
GermanInfo.prototype.getCreditRefundRef = function() {
  return this.creditRefundRef;
};

/**
* @memberof payments.GermanInfo
* @private
*/
GermanInfo.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

GermanInfo.prototype.toString = function() {
  return JSON.stringify(this);
};

GermanInfo._meta_ =  {fields:  {}};
GermanInfo._meta_._class_ =  GermanInfo;
GermanInfo._meta_.fields["cardTrack2"] = {};
GermanInfo._meta_.fields["cardTrack2"].type = String;
GermanInfo._meta_.fields["cardSequenceNumber"] = {};
GermanInfo._meta_.fields["cardSequenceNumber"].type = String;
GermanInfo._meta_.fields["transactionCaseGermany"] = {};
GermanInfo._meta_.fields["transactionCaseGermany"].type = String;
GermanInfo._meta_.fields["transactionTypeGermany"] = {};
GermanInfo._meta_.fields["transactionTypeGermany"].type = String;
GermanInfo._meta_.fields["terminalID"] = {};
GermanInfo._meta_.fields["terminalID"].type = String;
GermanInfo._meta_.fields["traceNumber"] = {};
GermanInfo._meta_.fields["traceNumber"].type = String;
GermanInfo._meta_.fields["oldTraceNumber"] = {};
GermanInfo._meta_.fields["oldTraceNumber"].type = String;
GermanInfo._meta_.fields["receiptNumber"] = {};
GermanInfo._meta_.fields["receiptNumber"].type = String;
GermanInfo._meta_.fields["transactionAID"] = {};
GermanInfo._meta_.fields["transactionAID"].type = String;
GermanInfo._meta_.fields["transactionMSApp"] = {};
GermanInfo._meta_.fields["transactionMSApp"].type = String;
GermanInfo._meta_.fields["transactionScriptResults"] = {};
GermanInfo._meta_.fields["transactionScriptResults"].type = String;
GermanInfo._meta_.fields["receiptType"] = {};
GermanInfo._meta_.fields["receiptType"].type = String;
GermanInfo._meta_.fields["customerTransactionDOLValues"] = {};
GermanInfo._meta_.fields["customerTransactionDOLValues"].type = String;
GermanInfo._meta_.fields["merchantTransactionDOLValues"] = {};
GermanInfo._meta_.fields["merchantTransactionDOLValues"].type = String;
GermanInfo._meta_.fields["merchantJournalDOL"] = {};
GermanInfo._meta_.fields["merchantJournalDOL"].type = String;
GermanInfo._meta_.fields["merchantJournalDOLValues"] = {};
GermanInfo._meta_.fields["merchantJournalDOLValues"].type = String;
GermanInfo._meta_.fields["configMerchantId"] = {};
GermanInfo._meta_.fields["configMerchantId"].type = String;
GermanInfo._meta_.fields["configProductLabel"] = {};
GermanInfo._meta_.fields["configProductLabel"].type = String;
GermanInfo._meta_.fields["hostResponseAidParBMP53"] = {};
GermanInfo._meta_.fields["hostResponseAidParBMP53"].type = String;
GermanInfo._meta_.fields["hostResponsePrintDataBM60"] = {};
GermanInfo._meta_.fields["hostResponsePrintDataBM60"].type = String;
GermanInfo._meta_.fields["paymentRef"] = {};
GermanInfo._meta_.fields["paymentRef"].type = base_Reference;
GermanInfo._meta_.fields["creditRef"] = {};
GermanInfo._meta_.fields["creditRef"].type = base_Reference;
GermanInfo._meta_.fields["refundRef"] = {};
GermanInfo._meta_.fields["refundRef"].type = base_Reference;
GermanInfo._meta_.fields["creditRefundRef"] = {};
GermanInfo._meta_.fields["creditRefundRef"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = GermanInfo;
}



/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var customers_Customer = __webpack_require__(43);
var payments_CardTransaction = __webpack_require__(53);
var payments_CreditRefund = __webpack_require__(58);
var payments_Result = __webpack_require__(50);
var payments_TaxableAmountRate = __webpack_require__(21);
var apps_AppTracking = __webpack_require__(13);
var payments_DCCInfo = __webpack_require__(51);
var base_Reference = __webpack_require__(2);
var base_Tender = __webpack_require__(23);
var payments_TransactionSettings = __webpack_require__(31);
var payments_GermanInfo = __webpack_require__(15);

/**
* @constructor
* @memberof payments
*/
var Credit = function() {
  this._class_ = Credit;
  this.id = undefined;
  this.orderRef = undefined;
  this.device = undefined;
  this.tender = undefined;
  this.employee = undefined;
  this.customers = undefined;
  this.amount = undefined;
  this.taxAmount = undefined;
  this.taxRates = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.cardTransaction = undefined;
  this.voided = undefined;
  this.voidReason = undefined;
  this.dccInfo = undefined;
  this.transactionSettings = undefined;
  this.creditRefunds = undefined;
  this.germanInfo = undefined;
  this.appTracking = undefined;
  this.result = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.Credit
* @param {String} id 
*/
Credit.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.Credit
* @return {String} 
*/
Credit.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the credit is associated
*
* @memberof payments.Credit
* @param {base.Reference} orderRef 
*/
Credit.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the credit is associated
* @memberof payments.Credit
* @return {base.Reference} 
*/
Credit.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* Device which processed this credit
*
* @memberof payments.Credit
* @param {base.Reference|Null} device 
*/
Credit.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which processed this credit
* @memberof payments.Credit
* @return {base.Reference|Null} 
*/
Credit.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
*
* @memberof payments.Credit
* @param {base.Tender} tender 
*/
Credit.prototype.setTender = function(tender) {
  this.tender = tender;
};

/**
* Get the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
* @memberof payments.Credit
* @return {base.Tender} 
*/
Credit.prototype.getTender = function() {
  return this.tender;
};

/**
* Set the field value
* The employee who processed the payment
*
* @memberof payments.Credit
* @param {base.Reference} employee 
*/
Credit.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee who processed the payment
* @memberof payments.Credit
* @return {base.Reference} 
*/
Credit.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* Customer who received the credit/refund
*
* @memberof payments.Credit
* @param {customers.Customer} customers 
*/
Credit.prototype.setCustomers = function(customers) {
  this.customers = customers;
};

/**
* Get the field value
* Customer who received the credit/refund
* @memberof payments.Credit
* @return {customers.Customer} 
*/
Credit.prototype.getCustomers = function() {
  return this.customers;
};

/**
* Set the field value
* Amount paid
*
* @memberof payments.Credit
* @param {Number} amount must be a long integer
*/
Credit.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount paid
* @memberof payments.Credit
* @return {Number} must be a long integer
*/
Credit.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount paid in tax
*
* @memberof payments.Credit
* @param {Number|Null} taxAmount must be a long integer, 
*/
Credit.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Amount paid in tax
* @memberof payments.Credit
* @return {Number|Null} must be a long integer, 
*/
Credit.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {Array.<payments.TaxableAmountRate>} taxRates An array of 
*/
Credit.prototype.setTaxRates = function(taxRates) {
  this.taxRates = taxRates;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {Array.<payments.TaxableAmountRate>} An array of 
*/
Credit.prototype.getTaxRates = function() {
  return this.taxRates;
};

/**
* Set the field value
* Time payment was recorded on server
*
* @memberof payments.Credit
* @param {Number} createdTime must be a long integer
*/
Credit.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Time payment was recorded on server
* @memberof payments.Credit
* @return {Number} must be a long integer
*/
Credit.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {Number} clientCreatedTime must be a long integer
*/
Credit.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {Number} must be a long integer
*/
Credit.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* Information about the card used for credit/debit card payments
*
* @memberof payments.Credit
* @param {payments.CardTransaction} cardTransaction 
*/
Credit.prototype.setCardTransaction = function(cardTransaction) {
  this.cardTransaction = cardTransaction;
};

/**
* Get the field value
* Information about the card used for credit/debit card payments
* @memberof payments.Credit
* @return {payments.CardTransaction} 
*/
Credit.prototype.getCardTransaction = function() {
  return this.cardTransaction;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {Boolean} voided 
*/
Credit.prototype.setVoided = function(voided) {
  this.voided = voided;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {Boolean} 
*/
Credit.prototype.getVoided = function() {
  return this.voided;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {String} voidReason 
*/
Credit.prototype.setVoidReason = function(voidReason) {
  this.voidReason = voidReason;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {String} 
*/
Credit.prototype.getVoidReason = function() {
  return this.voidReason;
};

/**
* Set the field value
* Dynamic Currency Conversion information
*
* @memberof payments.Credit
* @param {payments.DCCInfo|Null} dccInfo 
*/
Credit.prototype.setDccInfo = function(dccInfo) {
  this.dccInfo = dccInfo;
};

/**
* Get the field value
* Dynamic Currency Conversion information
* @memberof payments.Credit
* @return {payments.DCCInfo|Null} 
*/
Credit.prototype.getDccInfo = function() {
  return this.dccInfo;
};

/**
* Set the field value
* Per transaction settings for the payment
*
* @memberof payments.Credit
* @param {payments.TransactionSettings} transactionSettings 
*/
Credit.prototype.setTransactionSettings = function(transactionSettings) {
  this.transactionSettings = transactionSettings;
};

/**
* Get the field value
* Per transaction settings for the payment
* @memberof payments.Credit
* @return {payments.TransactionSettings} 
*/
Credit.prototype.getTransactionSettings = function() {
  return this.transactionSettings;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {Array.<payments.CreditRefund>} creditRefunds An array of 
*/
Credit.prototype.setCreditRefunds = function(creditRefunds) {
  this.creditRefunds = creditRefunds;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {Array.<payments.CreditRefund>} An array of 
*/
Credit.prototype.getCreditRefunds = function() {
  return this.creditRefunds;
};

/**
* Set the field value
* German region-specific information
*
* @memberof payments.Credit
* @param {payments.GermanInfo|Null} germanInfo 
*/
Credit.prototype.setGermanInfo = function(germanInfo) {
  this.germanInfo = germanInfo;
};

/**
* Get the field value
* German region-specific information
* @memberof payments.Credit
* @return {payments.GermanInfo|Null} 
*/
Credit.prototype.getGermanInfo = function() {
  return this.germanInfo;
};

/**
* Set the field value
* Tracking information for the app that created this credit.
*
* @memberof payments.Credit
* @param {apps.AppTracking|Null} appTracking 
*/
Credit.prototype.setAppTracking = function(appTracking) {
  this.appTracking = appTracking;
};

/**
* Get the field value
* Tracking information for the app that created this credit.
* @memberof payments.Credit
* @return {apps.AppTracking|Null} 
*/
Credit.prototype.getAppTracking = function() {
  return this.appTracking;
};

/**
* Set the field value
* @memberof payments.Credit
* @param {payments.Result} result 
*/
Credit.prototype.setResult = function(result) {
  this.result = result;
};

/**
* Get the field value
* @memberof payments.Credit
* @return {payments.Result} 
*/
Credit.prototype.getResult = function() {
  return this.result;
};

/**
* @memberof payments.Credit
* @private
*/
Credit.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Credit.prototype.toString = function() {
  return JSON.stringify(this);
};

Credit._meta_ =  {fields:  {}};
Credit._meta_._class_ =  Credit;
Credit._meta_.fields["id"] = {};
Credit._meta_.fields["id"].type = String;
Credit._meta_.fields["orderRef"] = {};
Credit._meta_.fields["orderRef"].type = base_Reference;
Credit._meta_.fields["device"] = {};
Credit._meta_.fields["device"].type = base_Reference;
Credit._meta_.fields["tender"] = {};
Credit._meta_.fields["tender"].type = base_Tender;
Credit._meta_.fields["employee"] = {};
Credit._meta_.fields["employee"].type = base_Reference;
Credit._meta_.fields["customers"] = {};
Credit._meta_.fields["customers"].type = customers_Customer;
Credit._meta_.fields["amount"] = {};
Credit._meta_.fields["amount"].type = Number;
Credit._meta_.fields["taxAmount"] = {};
Credit._meta_.fields["taxAmount"].type = Number;
Credit._meta_.fields["taxRates"] = {};
Credit._meta_.fields["taxRates"].type = Array;
Credit._meta_.fields["taxRates"].elementType = payments_TaxableAmountRate;
Credit._meta_.fields["createdTime"] = {};
Credit._meta_.fields["createdTime"].type = Number;
Credit._meta_.fields["clientCreatedTime"] = {};
Credit._meta_.fields["clientCreatedTime"].type = Number;
Credit._meta_.fields["cardTransaction"] = {};
Credit._meta_.fields["cardTransaction"].type = payments_CardTransaction;
Credit._meta_.fields["voided"] = {};
Credit._meta_.fields["voided"].type = Boolean;
Credit._meta_.fields["voidReason"] = {};
Credit._meta_.fields["voidReason"].type = String;
Credit._meta_.fields["dccInfo"] = {};
Credit._meta_.fields["dccInfo"].type = payments_DCCInfo;
Credit._meta_.fields["transactionSettings"] = {};
Credit._meta_.fields["transactionSettings"].type = payments_TransactionSettings;
Credit._meta_.fields["creditRefunds"] = {};
Credit._meta_.fields["creditRefunds"].type = Array;
Credit._meta_.fields["creditRefunds"].elementType = payments_CreditRefund;
Credit._meta_.fields["germanInfo"] = {};
Credit._meta_.fields["germanInfo"].type = payments_GermanInfo;
Credit._meta_.fields["appTracking"] = {};
Credit._meta_.fields["appTracking"].type = apps_AppTracking;
Credit._meta_.fields["result"] = {};
Credit._meta_.fields["result"].type = payments_Result;

//
// Expose the module.
//
if (true) {
module.exports = Credit;
}



/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Points = __webpack_require__(78);

/**
* @constructor
* @memberof base
*/
var Signature = function() {
  this._class_ = Signature;
  this.strokes = undefined;
  this.width = undefined;
  this.height = undefined;
};


/**
* Set the field value
* A series of strokes representing a signature
*
* @memberof base.Signature
* @param {Array.<base.Points>} strokes An array of 
*/
Signature.prototype.setStrokes = function(strokes) {
  this.strokes = strokes;
};

/**
* Get the field value
* A series of strokes representing a signature
* @memberof base.Signature
* @return {Array.<base.Points>} An array of 
*/
Signature.prototype.getStrokes = function() {
  return this.strokes;
};

/**
* Set the field value
* The pixel width of the signature
*
* @memberof base.Signature
* @param {Number} width must be an integer
*/
Signature.prototype.setWidth = function(width) {
  this.width = width;
};

/**
* Get the field value
* The pixel width of the signature
* @memberof base.Signature
* @return {Number} must be an integer
*/
Signature.prototype.getWidth = function() {
  return this.width;
};

/**
* Set the field value
* The pixel height of the signature
*
* @memberof base.Signature
* @param {Number} height must be an integer
*/
Signature.prototype.setHeight = function(height) {
  this.height = height;
};

/**
* Get the field value
* The pixel height of the signature
* @memberof base.Signature
* @return {Number} must be an integer
*/
Signature.prototype.getHeight = function() {
  return this.height;
};

/**
* @memberof base.Signature
* @private
*/
Signature.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Signature.prototype.toString = function() {
  return JSON.stringify(this);
};

Signature._meta_ =  {fields:  {}};
Signature._meta_._class_ =  Signature;
Signature._meta_.fields["strokes"] = {};
Signature._meta_.fields["strokes"].type = Array;
Signature._meta_.fields["strokes"].elementType = base_Points;
Signature._meta_.fields["width"] = {};
Signature._meta_.fields["width"].type = Number;
Signature._meta_.fields["height"] = {};
Signature._meta_.fields["height"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Signature;
}



/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_ItemStock = __webpack_require__(98);
var inventory_TaxRate = __webpack_require__(25);
var inventory_ModifierGroup = __webpack_require__(26);
var inventory_PriceType = __webpack_require__(99);
var inventory_Category = __webpack_require__(24);
var base_Reference = __webpack_require__(2);
var inventory_Tag = __webpack_require__(27);
var inventory_Option = __webpack_require__(45);

/**
* @constructor
* @memberof inventory
*/
var Item = function() {
  this._class_ = Item;
  this.id = undefined;
  this.hidden = false;
  this.itemGroup = undefined;
  this.options = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.code = undefined;
  this.sku = undefined;
  this.price = undefined;
  this.priceType = undefined;
  this.defaultTaxRates = true;
  this.unitName = undefined;
  this.cost = undefined;
  this.isRevenue = false;
  this.stockCount = undefined;
  this.taxRates = undefined;
  this.modifierGroups = undefined;
  this.categories = undefined;
  this.tags = undefined;
  this.itemStock = undefined;
  this.modifiedTime = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Item
* @param {String} id 
*/
Item.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Item
* @return {String} 
*/
Item.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* True if this item is hidden from Clover Register App
*
* @memberof inventory.Item
* @param {Boolean} hidden 
*/
Item.prototype.setHidden = function(hidden) {
  this.hidden = hidden;
};

/**
* Get the field value
* True if this item is hidden from Clover Register App
* @memberof inventory.Item
* @return {Boolean} 
*/
Item.prototype.getHidden = function() {
  return this.hidden;
};

/**
* Set the field value
* Reference to an item group
*
* @memberof inventory.Item
* @param {Null|base.Reference} itemGroup 
*/
Item.prototype.setItemGroup = function(itemGroup) {
  this.itemGroup = itemGroup;
};

/**
* Get the field value
* Reference to an item group
* @memberof inventory.Item
* @return {Null|base.Reference} 
*/
Item.prototype.getItemGroup = function() {
  return this.itemGroup;
};

/**
* Set the field value
* List of options pertaining to this item's attribute variation
*
* @memberof inventory.Item
* @param {Array.<inventory.Option>} options An array of 
*/
Item.prototype.setOptions = function(options) {
  this.options = options;
};

/**
* Get the field value
* List of options pertaining to this item's attribute variation
* @memberof inventory.Item
* @return {Array.<inventory.Option>} An array of 
*/
Item.prototype.getOptions = function() {
  return this.options;
};

/**
* Set the field value
* Name of the item
*
* @memberof inventory.Item
* @param {String} name 
*/
Item.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the item
* @memberof inventory.Item
* @return {String} 
*/
Item.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Alternate name of the item
*
* @memberof inventory.Item
* @param {Null|String} alternateName 
*/
Item.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* Alternate name of the item
* @memberof inventory.Item
* @return {Null|String} 
*/
Item.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* Product code, e.g. UPC or EAN
*
* @memberof inventory.Item
* @param {Null|String} code 
*/
Item.prototype.setCode = function(code) {
  this.code = code;
};

/**
* Get the field value
* Product code, e.g. UPC or EAN
* @memberof inventory.Item
* @return {Null|String} 
*/
Item.prototype.getCode = function() {
  return this.code;
};

/**
* Set the field value
* SKU of the item
*
* @memberof inventory.Item
* @param {Null|String} sku 
*/
Item.prototype.setSku = function(sku) {
  this.sku = sku;
};

/**
* Get the field value
* SKU of the item
* @memberof inventory.Item
* @return {Null|String} 
*/
Item.prototype.getSku = function() {
  return this.sku;
};

/**
* Set the field value
* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
*
* @memberof inventory.Item
* @param {Number} price must be a long integer
*/
Item.prototype.setPrice = function(price) {
  this.price = price;
};

/**
* Get the field value
* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
* @memberof inventory.Item
* @return {Number} must be a long integer
*/
Item.prototype.getPrice = function() {
  return this.price;
};

/**
* Set the field value
* @memberof inventory.Item
* @param {inventory.PriceType} priceType 
*/
Item.prototype.setPriceType = function(priceType) {
  this.priceType = priceType;
};

/**
* Get the field value
* @memberof inventory.Item
* @return {inventory.PriceType} 
*/
Item.prototype.getPriceType = function() {
  return this.priceType;
};

/**
* Set the field value
* Flag to indicate whether or not to use default tax rates
*
* @memberof inventory.Item
* @param {Boolean} defaultTaxRates 
*/
Item.prototype.setDefaultTaxRates = function(defaultTaxRates) {
  this.defaultTaxRates = defaultTaxRates;
};

/**
* Get the field value
* Flag to indicate whether or not to use default tax rates
* @memberof inventory.Item
* @return {Boolean} 
*/
Item.prototype.getDefaultTaxRates = function() {
  return this.defaultTaxRates;
};

/**
* Set the field value
* Unit name, e.g. oz, lb
*
* @memberof inventory.Item
* @param {Null|String} unitName 
*/
Item.prototype.setUnitName = function(unitName) {
  this.unitName = unitName;
};

/**
* Get the field value
* Unit name, e.g. oz, lb
* @memberof inventory.Item
* @return {Null|String} 
*/
Item.prototype.getUnitName = function() {
  return this.unitName;
};

/**
* Set the field value
* Cost of the item to merchant, as opposed to customer price
*
* @memberof inventory.Item
* @param {Null|Number} cost must be a long integer
*/
Item.prototype.setCost = function(cost) {
  this.cost = cost;
};

/**
* Get the field value
* Cost of the item to merchant, as opposed to customer price
* @memberof inventory.Item
* @return {Null|Number} must be a long integer
*/
Item.prototype.getCost = function() {
  return this.cost;
};

/**
* Set the field value
* True if this item should be counted as revenue, for example gift cards and donations would not
*
* @memberof inventory.Item
* @param {Boolean} isRevenue 
*/
Item.prototype.setIsRevenue = function(isRevenue) {
  this.isRevenue = isRevenue;
};

/**
* Get the field value
* True if this item should be counted as revenue, for example gift cards and donations would not
* @memberof inventory.Item
* @return {Boolean} 
*/
Item.prototype.getIsRevenue = function() {
  return this.isRevenue;
};

/**
* Set the field value
* DEPRECATED: use itemStock instead
*
* @memberof inventory.Item
* @param {Null|Number} stockCount must be a long integer
*/
Item.prototype.setStockCount = function(stockCount) {
  this.stockCount = stockCount;
};

/**
* Get the field value
* DEPRECATED: use itemStock instead
* @memberof inventory.Item
* @return {Null|Number} must be a long integer
*/
Item.prototype.getStockCount = function() {
  return this.stockCount;
};

/**
* Set the field value
* @memberof inventory.Item
* @param {Array.<inventory.TaxRate>} taxRates An array of 
*/
Item.prototype.setTaxRates = function(taxRates) {
  this.taxRates = taxRates;
};

/**
* Get the field value
* @memberof inventory.Item
* @return {Array.<inventory.TaxRate>} An array of 
*/
Item.prototype.getTaxRates = function() {
  return this.taxRates;
};

/**
* Set the field value
* @memberof inventory.Item
* @param {Array.<inventory.ModifierGroup>} modifierGroups An array of 
*/
Item.prototype.setModifierGroups = function(modifierGroups) {
  this.modifierGroups = modifierGroups;
};

/**
* Get the field value
* @memberof inventory.Item
* @return {Array.<inventory.ModifierGroup>} An array of 
*/
Item.prototype.getModifierGroups = function() {
  return this.modifierGroups;
};

/**
* Set the field value
* Categories associated with this item
*
* @memberof inventory.Item
* @param {Array.<inventory.Category>} categories An array of 
*/
Item.prototype.setCategories = function(categories) {
  this.categories = categories;
};

/**
* Get the field value
* Categories associated with this item
* @memberof inventory.Item
* @return {Array.<inventory.Category>} An array of 
*/
Item.prototype.getCategories = function() {
  return this.categories;
};

/**
* Set the field value
* Tags associated with this item
*
* @memberof inventory.Item
* @param {Array.<inventory.Tag>} tags An array of 
*/
Item.prototype.setTags = function(tags) {
  this.tags = tags;
};

/**
* Get the field value
* Tags associated with this item
* @memberof inventory.Item
* @return {Array.<inventory.Tag>} An array of 
*/
Item.prototype.getTags = function() {
  return this.tags;
};

/**
* Set the field value
* Item stock attribute that can be expanded to show stock quantity
*
* @memberof inventory.Item
* @param {Null|inventory.ItemStock} itemStock 
*/
Item.prototype.setItemStock = function(itemStock) {
  this.itemStock = itemStock;
};

/**
* Get the field value
* Item stock attribute that can be expanded to show stock quantity
* @memberof inventory.Item
* @return {Null|inventory.ItemStock} 
*/
Item.prototype.getItemStock = function() {
  return this.itemStock;
};

/**
* Set the field value
* @memberof inventory.Item
* @param {Number} modifiedTime must be a long integer
*/
Item.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* @memberof inventory.Item
* @return {Number} must be a long integer
*/
Item.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* @memberof inventory.Item
* @private
*/
Item.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Item.prototype.toString = function() {
  return JSON.stringify(this);
};

Item._meta_ =  {fields:  {}};
Item._meta_._class_ =  Item;
Item._meta_.fields["id"] = {};
Item._meta_.fields["id"].type = String;
Item._meta_.fields["hidden"] = {};
Item._meta_.fields["hidden"].type = Boolean;
Item._meta_.fields["itemGroup"] = {};
Item._meta_.fields["itemGroup"].type = base_Reference;
Item._meta_.fields["options"] = {};
Item._meta_.fields["options"].type = Array;
Item._meta_.fields["options"].elementType = inventory_Option;
Item._meta_.fields["name"] = {};
Item._meta_.fields["name"].type = String;
Item._meta_.fields["alternateName"] = {};
Item._meta_.fields["alternateName"].type = String;
Item._meta_.fields["code"] = {};
Item._meta_.fields["code"].type = String;
Item._meta_.fields["sku"] = {};
Item._meta_.fields["sku"].type = String;
Item._meta_.fields["price"] = {};
Item._meta_.fields["price"].type = Number;
Item._meta_.fields["priceType"] = {};
Item._meta_.fields["priceType"].type = inventory_PriceType;
Item._meta_.fields["defaultTaxRates"] = {};
Item._meta_.fields["defaultTaxRates"].type = Boolean;
Item._meta_.fields["unitName"] = {};
Item._meta_.fields["unitName"].type = String;
Item._meta_.fields["cost"] = {};
Item._meta_.fields["cost"].type = Number;
Item._meta_.fields["isRevenue"] = {};
Item._meta_.fields["isRevenue"].type = Boolean;
Item._meta_.fields["stockCount"] = {};
Item._meta_.fields["stockCount"].type = Number;
Item._meta_.fields["taxRates"] = {};
Item._meta_.fields["taxRates"].type = Array;
Item._meta_.fields["taxRates"].elementType = inventory_TaxRate;
Item._meta_.fields["modifierGroups"] = {};
Item._meta_.fields["modifierGroups"].type = Array;
Item._meta_.fields["modifierGroups"].elementType = inventory_ModifierGroup;
Item._meta_.fields["categories"] = {};
Item._meta_.fields["categories"].type = Array;
Item._meta_.fields["categories"].elementType = inventory_Category;
Item._meta_.fields["tags"] = {};
Item._meta_.fields["tags"].type = Array;
Item._meta_.fields["tags"].elementType = inventory_Tag;
Item._meta_.fields["itemStock"] = {};
Item._meta_.fields["itemStock"].type = inventory_ItemStock;
Item._meta_.fields["modifiedTime"] = {};
Item._meta_.fields["modifiedTime"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Item;
}



/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardType = {
  VISA : "VISA",
  MC : "MC",
  AMEX : "AMEX",
  DISCOVER : "DISCOVER",
  DINERS_CLUB : "DINERS_CLUB",
  JCB : "JCB",
  MAESTRO : "MAESTRO",
  SOLO : "SOLO",
  LASER : "LASER",
  CHINA_UNION_PAY : "CHINA_UNION_PAY",
  CARTE_BLANCHE : "CARTE_BLANCHE",
  UNKNOWN : "UNKNOWN",
  GIFT_CARD : "GIFT_CARD",
  EBT : "EBT"
};


//
// Expose the module.
//
if (true) {
module.exports = CardType;
}



/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var ServiceChargeAmount = function() {
  this._class_ = ServiceChargeAmount;
  this.id = undefined;
  this.name = undefined;
  this.amount = undefined;
  this.paymentRef = undefined;
};


/**
* Set the field value
* @memberof payments.ServiceChargeAmount
* @param {String} id 
*/
ServiceChargeAmount.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof payments.ServiceChargeAmount
* @return {String} 
*/
ServiceChargeAmount.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof payments.ServiceChargeAmount
* @param {String} name 
*/
ServiceChargeAmount.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof payments.ServiceChargeAmount
* @return {String} 
*/
ServiceChargeAmount.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof payments.ServiceChargeAmount
* @param {Number} amount must be a long integer
*/
ServiceChargeAmount.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* @memberof payments.ServiceChargeAmount
* @return {Number} must be a long integer
*/
ServiceChargeAmount.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* The payment with which the payment tax rate is associated
*
* @memberof payments.ServiceChargeAmount
* @param {base.Reference} paymentRef 
*/
ServiceChargeAmount.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which the payment tax rate is associated
* @memberof payments.ServiceChargeAmount
* @return {base.Reference} 
*/
ServiceChargeAmount.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* @memberof payments.ServiceChargeAmount
* @private
*/
ServiceChargeAmount.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ServiceChargeAmount.prototype.toString = function() {
  return JSON.stringify(this);
};

ServiceChargeAmount._meta_ =  {fields:  {}};
ServiceChargeAmount._meta_._class_ =  ServiceChargeAmount;
ServiceChargeAmount._meta_.fields["id"] = {};
ServiceChargeAmount._meta_.fields["id"].type = String;
ServiceChargeAmount._meta_.fields["name"] = {};
ServiceChargeAmount._meta_.fields["name"].type = String;
ServiceChargeAmount._meta_.fields["amount"] = {};
ServiceChargeAmount._meta_.fields["amount"].type = Number;
ServiceChargeAmount._meta_.fields["paymentRef"] = {};
ServiceChargeAmount._meta_.fields["paymentRef"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = ServiceChargeAmount;
}



/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var TaxableAmountRate = function() {
  this._class_ = TaxableAmountRate;
  this.id = undefined;
  this.name = undefined;
  this.taxableAmount = undefined;
  this.rate = undefined;
  this.isVat = undefined;
  this.taxAmount = undefined;
};


/**
* Set the field value
* Tax rate id.
*
* @memberof payments.TaxableAmountRate
* @param {String} id 
*/
TaxableAmountRate.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Tax rate id.
* @memberof payments.TaxableAmountRate
* @return {String} 
*/
TaxableAmountRate.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Tax rate name. This field is optional.
*
* @memberof payments.TaxableAmountRate
* @param {String} name 
*/
TaxableAmountRate.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Tax rate name. This field is optional.
* @memberof payments.TaxableAmountRate
* @return {String} 
*/
TaxableAmountRate.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
*
* @memberof payments.TaxableAmountRate
* @param {Number} taxableAmount must be a long integer
*/
TaxableAmountRate.prototype.setTaxableAmount = function(taxableAmount) {
  this.taxableAmount = taxableAmount;
};

/**
* Get the field value
* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
* @memberof payments.TaxableAmountRate
* @return {Number} must be a long integer
*/
TaxableAmountRate.prototype.getTaxableAmount = function() {
  return this.taxableAmount;
};

/**
* Set the field value
* The tax rate. 100% = 1e7.
*
* @memberof payments.TaxableAmountRate
* @param {Number} rate must be a long integer
*/
TaxableAmountRate.prototype.setRate = function(rate) {
  this.rate = rate;
};

/**
* Get the field value
* The tax rate. 100% = 1e7.
* @memberof payments.TaxableAmountRate
* @return {Number} must be a long integer
*/
TaxableAmountRate.prototype.getRate = function() {
  return this.rate;
};

/**
* Set the field value
* Whether the taxable amount includes tax.
*
* @memberof payments.TaxableAmountRate
* @param {Boolean} isVat 
*/
TaxableAmountRate.prototype.setIsVat = function(isVat) {
  this.isVat = isVat;
};

/**
* Get the field value
* Whether the taxable amount includes tax.
* @memberof payments.TaxableAmountRate
* @return {Boolean} 
*/
TaxableAmountRate.prototype.getIsVat = function() {
  return this.isVat;
};

/**
* Set the field value
* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
*
* @memberof payments.TaxableAmountRate
* @param {Number} taxAmount must be a long integer
*/
TaxableAmountRate.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
* @memberof payments.TaxableAmountRate
* @return {Number} must be a long integer
*/
TaxableAmountRate.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* @memberof payments.TaxableAmountRate
* @private
*/
TaxableAmountRate.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TaxableAmountRate.prototype.toString = function() {
  return JSON.stringify(this);
};

TaxableAmountRate._meta_ =  {fields:  {}};
TaxableAmountRate._meta_._class_ =  TaxableAmountRate;
TaxableAmountRate._meta_.fields["id"] = {};
TaxableAmountRate._meta_.fields["id"].type = String;
TaxableAmountRate._meta_.fields["name"] = {};
TaxableAmountRate._meta_.fields["name"].type = String;
TaxableAmountRate._meta_.fields["taxableAmount"] = {};
TaxableAmountRate._meta_.fields["taxableAmount"].type = Number;
TaxableAmountRate._meta_.fields["rate"] = {};
TaxableAmountRate._meta_.fields["rate"].type = Number;
TaxableAmountRate._meta_.fields["isVat"] = {};
TaxableAmountRate._meta_.fields["isVat"].type = Boolean;
TaxableAmountRate._meta_.fields["taxAmount"] = {};
TaxableAmountRate._meta_.fields["taxAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = TaxableAmountRate;
}



/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);
var remotepay_TransactionType = __webpack_require__(12);
var payments_DataEntryLocation = __webpack_require__(56);
var payments_VaultedCard = __webpack_require__(11);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var TransactionRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = TransactionRequest;
  this.orderId = undefined;
  this.signatureThreshold = undefined;
  this.disablePrinting = undefined;
  this.disableReceiptSelection = undefined;
  this.disableDuplicateChecking = undefined;
  this.signatureEntryLocation = undefined;
  this.cardNotPresent = undefined;
  this.disableRestartTransactionOnFail = undefined;
  this.amount = undefined;
  this.cardEntryMethods = undefined;
  this.vaultedCard = undefined;
  this.externalId = undefined;
  this.type = undefined;
  this.autoAcceptPaymentConfirmations = undefined;
  this.autoAcceptSignature = undefined;
};

TransactionRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
TransactionRequest.prototype.constructor = TransactionRequest;

/**
* Set the field value
* Identifier for the order to apply this to.  The order must exist in the clover system.
*
* @memberof remotepay.TransactionRequest
* @param {String} orderId 
*/
TransactionRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Identifier for the order to apply this to.  The order must exist in the clover system.
* @memberof remotepay.TransactionRequest
* @return {String} 
*/
TransactionRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* If the amount is equal to or greater than this amount, then a signature should be obtained
*
* @memberof remotepay.TransactionRequest
* @param {Number} signatureThreshold must be a long integer
*/
TransactionRequest.prototype.setSignatureThreshold = function(signatureThreshold) {
  this.signatureThreshold = signatureThreshold;
};

/**
* Get the field value
* If the amount is equal to or greater than this amount, then a signature should be obtained
* @memberof remotepay.TransactionRequest
* @return {Number} must be a long integer
*/
TransactionRequest.prototype.getSignatureThreshold = function() {
  return this.signatureThreshold;
};

/**
* Set the field value
* If true, then do not print using the clover printer.  Return print information.
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disablePrinting 
*/
TransactionRequest.prototype.setDisablePrinting = function(disablePrinting) {
  this.disablePrinting = disablePrinting;
};

/**
* Get the field value
* If true, then do not print using the clover printer.  Return print information.
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisablePrinting = function() {
  return this.disablePrinting;
};

/**
* Set the field value
* Do not show the receipt options screen
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disableReceiptSelection 
*/
TransactionRequest.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
  this.disableReceiptSelection = disableReceiptSelection;
};

/**
* Get the field value
* Do not show the receipt options screen
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisableReceiptSelection = function() {
  return this.disableReceiptSelection;
};

/**
* Set the field value
* Do not do heuristic duplicate checking
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disableDuplicateChecking 
*/
TransactionRequest.prototype.setDisableDuplicateChecking = function(disableDuplicateChecking) {
  this.disableDuplicateChecking = disableDuplicateChecking;
};

/**
* Get the field value
* Do not do heuristic duplicate checking
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisableDuplicateChecking = function() {
  return this.disableDuplicateChecking;
};

/**
* Set the field value
* Where the signature should be obtined from (paper, screen...etc)
*
* @memberof remotepay.TransactionRequest
* @param {payments.DataEntryLocation|Null} signatureEntryLocation 
*/
TransactionRequest.prototype.setSignatureEntryLocation = function(signatureEntryLocation) {
  this.signatureEntryLocation = signatureEntryLocation;
};

/**
* Get the field value
* Where the signature should be obtined from (paper, screen...etc)
* @memberof remotepay.TransactionRequest
* @return {payments.DataEntryLocation|Null} 
*/
TransactionRequest.prototype.getSignatureEntryLocation = function() {
  return this.signatureEntryLocation;
};

/**
* Set the field value
* If true then card not present is accepted
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} cardNotPresent 
*/
TransactionRequest.prototype.setCardNotPresent = function(cardNotPresent) {
  this.cardNotPresent = cardNotPresent;
};

/**
* Get the field value
* If true then card not present is accepted
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getCardNotPresent = function() {
  return this.cardNotPresent;
};

/**
* Set the field value
* If the transaction times out or fails because of decline, do not restart it
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disableRestartTransactionOnFail 
*/
TransactionRequest.prototype.setDisableRestartTransactionOnFail = function(disableRestartTransactionOnFail) {
  this.disableRestartTransactionOnFail = disableRestartTransactionOnFail;
};

/**
* Get the field value
* If the transaction times out or fails because of decline, do not restart it
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisableRestartTransactionOnFail = function() {
  return this.disableRestartTransactionOnFail;
};

/**
* Set the field value
* Total amount paid
*
* @memberof remotepay.TransactionRequest
* @param {Number} amount must be a long integer
*/
TransactionRequest.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotepay.TransactionRequest
* @return {Number} must be a long integer
*/
TransactionRequest.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotepay.TransactionRequest
* @param {Number|Null} cardEntryMethods must be an integer, 
*/
TransactionRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotepay.TransactionRequest
* @return {Number|Null} must be an integer, 
*/
TransactionRequest.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

/**
* Set the field value
* A saved card
*
* @memberof remotepay.TransactionRequest
* @param {payments.VaultedCard|Null} vaultedCard 
*/
TransactionRequest.prototype.setVaultedCard = function(vaultedCard) {
  this.vaultedCard = vaultedCard;
};

/**
* Get the field value
* A saved card
* @memberof remotepay.TransactionRequest
* @return {payments.VaultedCard|Null} 
*/
TransactionRequest.prototype.getVaultedCard = function() {
  return this.vaultedCard;
};

/**
* Set the field value
* An id that will be persisted with transactions.
*
* @memberof remotepay.TransactionRequest
* @param {String} externalId 
*/
TransactionRequest.prototype.setExternalId = function(externalId) {
  this.externalId = externalId;
};

/**
* Get the field value
* An id that will be persisted with transactions.
* @memberof remotepay.TransactionRequest
* @return {String} 
*/
TransactionRequest.prototype.getExternalId = function() {
  return this.externalId;
};

/**
* Set the field value
* The type of the transaction.
*
* @memberof remotepay.TransactionRequest
* @param {remotepay.TransactionType} type 
*/
TransactionRequest.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* The type of the transaction.
* @memberof remotepay.TransactionRequest
* @return {remotepay.TransactionType} 
*/
TransactionRequest.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* Do not show/send potential duplicate challenges
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} autoAcceptPaymentConfirmations 
*/
TransactionRequest.prototype.setAutoAcceptPaymentConfirmations = function(autoAcceptPaymentConfirmations) {
  this.autoAcceptPaymentConfirmations = autoAcceptPaymentConfirmations;
};

/**
* Get the field value
* Do not show/send potential duplicate challenges
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getAutoAcceptPaymentConfirmations = function() {
  return this.autoAcceptPaymentConfirmations;
};

/**
* Set the field value
* Do not show/send signature verification challenges
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} autoAcceptSignature 
*/
TransactionRequest.prototype.setAutoAcceptSignature = function(autoAcceptSignature) {
  this.autoAcceptSignature = autoAcceptSignature;
};

/**
* Get the field value
* Do not show/send signature verification challenges
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getAutoAcceptSignature = function() {
  return this.autoAcceptSignature;
};

TransactionRequest._meta_ =  {fields:  {}};
TransactionRequest._meta_._class_ =  TransactionRequest;
TransactionRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
TransactionRequest._meta_.fields["orderId"] = {};
TransactionRequest._meta_.fields["orderId"].type = String;
TransactionRequest._meta_.fields["signatureThreshold"] = {};
TransactionRequest._meta_.fields["signatureThreshold"].type = Number;
TransactionRequest._meta_.fields["disablePrinting"] = {};
TransactionRequest._meta_.fields["disablePrinting"].type = Boolean;
TransactionRequest._meta_.fields["disableReceiptSelection"] = {};
TransactionRequest._meta_.fields["disableReceiptSelection"].type = Boolean;
TransactionRequest._meta_.fields["disableDuplicateChecking"] = {};
TransactionRequest._meta_.fields["disableDuplicateChecking"].type = Boolean;
TransactionRequest._meta_.fields["signatureEntryLocation"] = {};
TransactionRequest._meta_.fields["signatureEntryLocation"].type = payments_DataEntryLocation;
TransactionRequest._meta_.fields["cardNotPresent"] = {};
TransactionRequest._meta_.fields["cardNotPresent"].type = Boolean;
TransactionRequest._meta_.fields["disableRestartTransactionOnFail"] = {};
TransactionRequest._meta_.fields["disableRestartTransactionOnFail"].type = Boolean;
TransactionRequest._meta_.fields["amount"] = {};
TransactionRequest._meta_.fields["amount"].type = Number;
TransactionRequest._meta_.fields["cardEntryMethods"] = {};
TransactionRequest._meta_.fields["cardEntryMethods"].type = Number;
TransactionRequest._meta_.fields["vaultedCard"] = {};
TransactionRequest._meta_.fields["vaultedCard"].type = payments_VaultedCard;
TransactionRequest._meta_.fields["externalId"] = {};
TransactionRequest._meta_.fields["externalId"].type = String;
TransactionRequest._meta_.fields["type"] = {};
TransactionRequest._meta_.fields["type"].type = remotepay_TransactionType;
TransactionRequest._meta_.fields["autoAcceptPaymentConfirmations"] = {};
TransactionRequest._meta_.fields["autoAcceptPaymentConfirmations"].type = Boolean;
TransactionRequest._meta_.fields["autoAcceptSignature"] = {};
TransactionRequest._meta_.fields["autoAcceptSignature"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = TransactionRequest;
}



/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var Tender = function() {
  this._class_ = Tender;
  this.id = undefined;
  this.editable = undefined;
  this.labelKey = undefined;
  this.label = undefined;
  this.opensCashDrawer = undefined;
  this.supportsTipping = undefined;
  this.enabled = undefined;
  this.visible = undefined;
  this.instructions = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof base.Tender
* @param {String} id 
*/
Tender.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof base.Tender
* @return {String} 
*/
Tender.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* If this merchant tender is editable
*
* @memberof base.Tender
* @param {Boolean} editable 
*/
Tender.prototype.setEditable = function(editable) {
  this.editable = editable;
};

/**
* Get the field value
* If this merchant tender is editable
* @memberof base.Tender
* @return {Boolean} 
*/
Tender.prototype.getEditable = function() {
  return this.editable;
};

/**
* Set the field value
* Label Key
*
* @memberof base.Tender
* @param {String} labelKey 
*/
Tender.prototype.setLabelKey = function(labelKey) {
  this.labelKey = labelKey;
};

/**
* Get the field value
* Label Key
* @memberof base.Tender
* @return {String} 
*/
Tender.prototype.getLabelKey = function() {
  return this.labelKey;
};

/**
* Set the field value
* Label Key
*
* @memberof base.Tender
* @param {String} label 
*/
Tender.prototype.setLabel = function(label) {
  this.label = label;
};

/**
* Get the field value
* Label Key
* @memberof base.Tender
* @return {String} 
*/
Tender.prototype.getLabel = function() {
  return this.label;
};

/**
* Set the field value
* If this tender opens the cash drawer
*
* @memberof base.Tender
* @param {Boolean} opensCashDrawer 
*/
Tender.prototype.setOpensCashDrawer = function(opensCashDrawer) {
  this.opensCashDrawer = opensCashDrawer;
};

/**
* Get the field value
* If this tender opens the cash drawer
* @memberof base.Tender
* @return {Boolean} 
*/
Tender.prototype.getOpensCashDrawer = function() {
  return this.opensCashDrawer;
};

/**
* Set the field value
* Allow tipping on payment from tender
*
* @memberof base.Tender
* @param {Boolean} supportsTipping 
*/
Tender.prototype.setSupportsTipping = function(supportsTipping) {
  this.supportsTipping = supportsTipping;
};

/**
* Get the field value
* Allow tipping on payment from tender
* @memberof base.Tender
* @return {Boolean} 
*/
Tender.prototype.getSupportsTipping = function() {
  return this.supportsTipping;
};

/**
* Set the field value
* If this merchant tender is enabled
*
* @memberof base.Tender
* @param {Boolean} enabled 
*/
Tender.prototype.setEnabled = function(enabled) {
  this.enabled = enabled;
};

/**
* Get the field value
* If this merchant tender is enabled
* @memberof base.Tender
* @return {Boolean} 
*/
Tender.prototype.getEnabled = function() {
  return this.enabled;
};

/**
* Set the field value
* If this merchant tender is visible
*
* @memberof base.Tender
* @param {Boolean} visible 
*/
Tender.prototype.setVisible = function(visible) {
  this.visible = visible;
};

/**
* Get the field value
* If this merchant tender is visible
* @memberof base.Tender
* @return {Boolean} 
*/
Tender.prototype.getVisible = function() {
  return this.visible;
};

/**
* Set the field value
* Label Key
*
* @memberof base.Tender
* @param {String} instructions 
*/
Tender.prototype.setInstructions = function(instructions) {
  this.instructions = instructions;
};

/**
* Get the field value
* Label Key
* @memberof base.Tender
* @return {String} 
*/
Tender.prototype.getInstructions = function() {
  return this.instructions;
};

/**
* @memberof base.Tender
* @private
*/
Tender.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Tender.prototype.toString = function() {
  return JSON.stringify(this);
};

Tender._meta_ =  {fields:  {}};
Tender._meta_._class_ =  Tender;
Tender._meta_.fields["id"] = {};
Tender._meta_.fields["id"].type = String;
Tender._meta_.fields["editable"] = {};
Tender._meta_.fields["editable"].type = Boolean;
Tender._meta_.fields["labelKey"] = {};
Tender._meta_.fields["labelKey"].type = String;
Tender._meta_.fields["label"] = {};
Tender._meta_.fields["label"].type = String;
Tender._meta_.fields["opensCashDrawer"] = {};
Tender._meta_.fields["opensCashDrawer"].type = Boolean;
Tender._meta_.fields["supportsTipping"] = {};
Tender._meta_.fields["supportsTipping"].type = Boolean;
Tender._meta_.fields["enabled"] = {};
Tender._meta_.fields["enabled"].type = Boolean;
Tender._meta_.fields["visible"] = {};
Tender._meta_.fields["visible"].type = Boolean;
Tender._meta_.fields["instructions"] = {};
Tender._meta_.fields["instructions"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = Tender;
}



/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var Category = function() {
  this._class_ = Category;
  this.id = undefined;
  this.name = undefined;
  this.sortOrder = undefined;
  this.items = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Category
* @param {String} id 
*/
Category.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Category
* @return {String} 
*/
Category.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The name of the category which will appear in Clover Register App.
*
* @memberof inventory.Category
* @param {String} name 
*/
Category.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* The name of the category which will appear in Clover Register App.
* @memberof inventory.Category
* @return {String} 
*/
Category.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Integer used to determine how this category is sorted against other categories.
*
* @memberof inventory.Category
* @param {Number} sortOrder must be an integer
*/
Category.prototype.setSortOrder = function(sortOrder) {
  this.sortOrder = sortOrder;
};

/**
* Get the field value
* Integer used to determine how this category is sorted against other categories.
* @memberof inventory.Category
* @return {Number} must be an integer
*/
Category.prototype.getSortOrder = function() {
  return this.sortOrder;
};

/**
* Set the field value
* Ordered list of items associated with this category.
*
* @memberof inventory.Category
* @param {Array.<base.Reference>} items An array of 
*/
Category.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* Ordered list of items associated with this category.
* @memberof inventory.Category
* @return {Array.<base.Reference>} An array of 
*/
Category.prototype.getItems = function() {
  return this.items;
};

/**
* @memberof inventory.Category
* @private
*/
Category.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Category.prototype.toString = function() {
  return JSON.stringify(this);
};

Category._meta_ =  {fields:  {}};
Category._meta_._class_ =  Category;
Category._meta_.fields["id"] = {};
Category._meta_.fields["id"].type = String;
Category._meta_.fields["name"] = {};
Category._meta_.fields["name"].type = String;
Category._meta_.fields["sortOrder"] = {};
Category._meta_.fields["sortOrder"].type = Number;
Category._meta_.fields["items"] = {};
Category._meta_.fields["items"].type = Array;
Category._meta_.fields["items"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Category;
}



/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var TaxRate = function() {
  this._class_ = TaxRate;
  this.id = undefined;
  this.lineItemRef = undefined;
  this.name = undefined;
  this.rate = undefined;
  this.isDefault = undefined;
  this.items = undefined;
};


/**
* Set the field value
* @memberof inventory.TaxRate
* @param {String} id 
*/
TaxRate.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof inventory.TaxRate
* @return {String} 
*/
TaxRate.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The line item with which the tax rate is associated
*
* @memberof inventory.TaxRate
* @param {base.Reference} lineItemRef 
*/
TaxRate.prototype.setLineItemRef = function(lineItemRef) {
  this.lineItemRef = lineItemRef;
};

/**
* Get the field value
* The line item with which the tax rate is associated
* @memberof inventory.TaxRate
* @return {base.Reference} 
*/
TaxRate.prototype.getLineItemRef = function() {
  return this.lineItemRef;
};

/**
* Set the field value
* @memberof inventory.TaxRate
* @param {String} name 
*/
TaxRate.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof inventory.TaxRate
* @return {String} 
*/
TaxRate.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof inventory.TaxRate
* @param {Number} rate must be a long integer
*/
TaxRate.prototype.setRate = function(rate) {
  this.rate = rate;
};

/**
* Get the field value
* @memberof inventory.TaxRate
* @return {Number} must be a long integer
*/
TaxRate.prototype.getRate = function() {
  return this.rate;
};

/**
* Set the field value
* @memberof inventory.TaxRate
* @param {Boolean} isDefault 
*/
TaxRate.prototype.setIsDefault = function(isDefault) {
  this.isDefault = isDefault;
};

/**
* Get the field value
* @memberof inventory.TaxRate
* @return {Boolean} 
*/
TaxRate.prototype.getIsDefault = function() {
  return this.isDefault;
};

/**
* Set the field value
* Items associated with this tax rate
*
* @memberof inventory.TaxRate
* @param {Array.<base.Reference>} items An array of 
*/
TaxRate.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* Items associated with this tax rate
* @memberof inventory.TaxRate
* @return {Array.<base.Reference>} An array of 
*/
TaxRate.prototype.getItems = function() {
  return this.items;
};

/**
* @memberof inventory.TaxRate
* @private
*/
TaxRate.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TaxRate.prototype.toString = function() {
  return JSON.stringify(this);
};

TaxRate._meta_ =  {fields:  {}};
TaxRate._meta_._class_ =  TaxRate;
TaxRate._meta_.fields["id"] = {};
TaxRate._meta_.fields["id"].type = String;
TaxRate._meta_.fields["lineItemRef"] = {};
TaxRate._meta_.fields["lineItemRef"].type = base_Reference;
TaxRate._meta_.fields["name"] = {};
TaxRate._meta_.fields["name"].type = String;
TaxRate._meta_.fields["rate"] = {};
TaxRate._meta_.fields["rate"].type = Number;
TaxRate._meta_.fields["isDefault"] = {};
TaxRate._meta_.fields["isDefault"].type = Boolean;
TaxRate._meta_.fields["items"] = {};
TaxRate._meta_.fields["items"].type = Array;
TaxRate._meta_.fields["items"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = TaxRate;
}



/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);
var inventory_Modifier = __webpack_require__(46);

/**
* @constructor
* @memberof inventory
*/
var ModifierGroup = function() {
  this._class_ = ModifierGroup;
  this.id = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.minRequired = undefined;
  this.maxAllowed = undefined;
  this.showByDefault = true;
  this.modifiers = undefined;
  this.modifierIds = undefined;
  this.items = undefined;
  this.sortOrder = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.ModifierGroup
* @param {String} id 
*/
ModifierGroup.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.ModifierGroup
* @return {String} 
*/
ModifierGroup.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the modifier group
*
* @memberof inventory.ModifierGroup
* @param {String} name 
*/
ModifierGroup.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the modifier group
* @memberof inventory.ModifierGroup
* @return {String} 
*/
ModifierGroup.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof inventory.ModifierGroup
* @param {String} alternateName 
*/
ModifierGroup.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* @memberof inventory.ModifierGroup
* @return {String} 
*/
ModifierGroup.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* The minimum amount of modifiers from this group that must be applied to associated lineItems when using Register
*
* @memberof inventory.ModifierGroup
* @param {Number} minRequired must be an integer
*/
ModifierGroup.prototype.setMinRequired = function(minRequired) {
  this.minRequired = minRequired;
};

/**
* Get the field value
* The minimum amount of modifiers from this group that must be applied to associated lineItems when using Register
* @memberof inventory.ModifierGroup
* @return {Number} must be an integer
*/
ModifierGroup.prototype.getMinRequired = function() {
  return this.minRequired;
};

/**
* Set the field value
* The maximum amount of modifiers from this group that can be applied to associated lineItems when using Register
*
* @memberof inventory.ModifierGroup
* @param {Number} maxAllowed must be an integer
*/
ModifierGroup.prototype.setMaxAllowed = function(maxAllowed) {
  this.maxAllowed = maxAllowed;
};

/**
* Get the field value
* The maximum amount of modifiers from this group that can be applied to associated lineItems when using Register
* @memberof inventory.ModifierGroup
* @return {Number} must be an integer
*/
ModifierGroup.prototype.getMaxAllowed = function() {
  return this.maxAllowed;
};

/**
* Set the field value
* Whether employees will be automatically prompted to add modifiers from this category when using Register
*
* @memberof inventory.ModifierGroup
* @param {Boolean} showByDefault 
*/
ModifierGroup.prototype.setShowByDefault = function(showByDefault) {
  this.showByDefault = showByDefault;
};

/**
* Get the field value
* Whether employees will be automatically prompted to add modifiers from this category when using Register
* @memberof inventory.ModifierGroup
* @return {Boolean} 
*/
ModifierGroup.prototype.getShowByDefault = function() {
  return this.showByDefault;
};

/**
* Set the field value
* @memberof inventory.ModifierGroup
* @param {Array.<inventory.Modifier>} modifiers An array of 
*/
ModifierGroup.prototype.setModifiers = function(modifiers) {
  this.modifiers = modifiers;
};

/**
* Get the field value
* @memberof inventory.ModifierGroup
* @return {Array.<inventory.Modifier>} An array of 
*/
ModifierGroup.prototype.getModifiers = function() {
  return this.modifiers;
};

/**
* Set the field value
* An ordered, comma-separated list of modifier ids in this group. (READ ONLY)
*
* @memberof inventory.ModifierGroup
* @param {String} modifierIds 
*/
ModifierGroup.prototype.setModifierIds = function(modifierIds) {
  this.modifierIds = modifierIds;
};

/**
* Get the field value
* An ordered, comma-separated list of modifier ids in this group. (READ ONLY)
* @memberof inventory.ModifierGroup
* @return {String} 
*/
ModifierGroup.prototype.getModifierIds = function() {
  return this.modifierIds;
};

/**
* Set the field value
* @memberof inventory.ModifierGroup
* @param {Array.<base.Reference>} items An array of 
*/
ModifierGroup.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* @memberof inventory.ModifierGroup
* @return {Array.<base.Reference>} An array of 
*/
ModifierGroup.prototype.getItems = function() {
  return this.items;
};

/**
* Set the field value
* The ordinal value used to determine where in an ordered list this modifier group should appear relative to others.
*
* @memberof inventory.ModifierGroup
* @param {Number} sortOrder must be an integer
*/
ModifierGroup.prototype.setSortOrder = function(sortOrder) {
  this.sortOrder = sortOrder;
};

/**
* Get the field value
* The ordinal value used to determine where in an ordered list this modifier group should appear relative to others.
* @memberof inventory.ModifierGroup
* @return {Number} must be an integer
*/
ModifierGroup.prototype.getSortOrder = function() {
  return this.sortOrder;
};

/**
* @memberof inventory.ModifierGroup
* @private
*/
ModifierGroup.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ModifierGroup.prototype.toString = function() {
  return JSON.stringify(this);
};

ModifierGroup._meta_ =  {fields:  {}};
ModifierGroup._meta_._class_ =  ModifierGroup;
ModifierGroup._meta_.fields["id"] = {};
ModifierGroup._meta_.fields["id"].type = String;
ModifierGroup._meta_.fields["name"] = {};
ModifierGroup._meta_.fields["name"].type = String;
ModifierGroup._meta_.fields["alternateName"] = {};
ModifierGroup._meta_.fields["alternateName"].type = String;
ModifierGroup._meta_.fields["minRequired"] = {};
ModifierGroup._meta_.fields["minRequired"].type = Number;
ModifierGroup._meta_.fields["maxAllowed"] = {};
ModifierGroup._meta_.fields["maxAllowed"].type = Number;
ModifierGroup._meta_.fields["showByDefault"] = {};
ModifierGroup._meta_.fields["showByDefault"].type = Boolean;
ModifierGroup._meta_.fields["modifiers"] = {};
ModifierGroup._meta_.fields["modifiers"].type = Array;
ModifierGroup._meta_.fields["modifiers"].elementType = inventory_Modifier;
ModifierGroup._meta_.fields["modifierIds"] = {};
ModifierGroup._meta_.fields["modifierIds"].type = String;
ModifierGroup._meta_.fields["items"] = {};
ModifierGroup._meta_.fields["items"].type = Array;
ModifierGroup._meta_.fields["items"].elementType = base_Reference;
ModifierGroup._meta_.fields["sortOrder"] = {};
ModifierGroup._meta_.fields["sortOrder"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = ModifierGroup;
}



/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var Tag = function() {
  this._class_ = Tag;
  this.id = undefined;
  this.name = undefined;
  this.showInReporting = false;
  this.items = undefined;
  this.printers = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Tag
* @param {String} id 
*/
Tag.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Tag
* @return {String} 
*/
Tag.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Tag name
*
* @memberof inventory.Tag
* @param {String} name 
*/
Tag.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Tag name
* @memberof inventory.Tag
* @return {String} 
*/
Tag.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* True if tag is a summary label in the reporting app
*
* @memberof inventory.Tag
* @param {Boolean} showInReporting 
*/
Tag.prototype.setShowInReporting = function(showInReporting) {
  this.showInReporting = showInReporting;
};

/**
* Get the field value
* True if tag is a summary label in the reporting app
* @memberof inventory.Tag
* @return {Boolean} 
*/
Tag.prototype.getShowInReporting = function() {
  return this.showInReporting;
};

/**
* Set the field value
* Items associated with this tag
*
* @memberof inventory.Tag
* @param {Array.<base.Reference>} items An array of 
*/
Tag.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* Items associated with this tag
* @memberof inventory.Tag
* @return {Array.<base.Reference>} An array of 
*/
Tag.prototype.getItems = function() {
  return this.items;
};

/**
* Set the field value
* Printers associated with this tag
*
* @memberof inventory.Tag
* @param {Array.<base.Reference>} printers An array of 
*/
Tag.prototype.setPrinters = function(printers) {
  this.printers = printers;
};

/**
* Get the field value
* Printers associated with this tag
* @memberof inventory.Tag
* @return {Array.<base.Reference>} An array of 
*/
Tag.prototype.getPrinters = function() {
  return this.printers;
};

/**
* @memberof inventory.Tag
* @private
*/
Tag.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Tag.prototype.toString = function() {
  return JSON.stringify(this);
};

Tag._meta_ =  {fields:  {}};
Tag._meta_._class_ =  Tag;
Tag._meta_.fields["id"] = {};
Tag._meta_.fields["id"].type = String;
Tag._meta_.fields["name"] = {};
Tag._meta_.fields["name"].type = String;
Tag._meta_.fields["showInReporting"] = {};
Tag._meta_.fields["showInReporting"].type = Boolean;
Tag._meta_.fields["items"] = {};
Tag._meta_.fields["items"].type = Array;
Tag._meta_.fields["items"].elementType = base_Reference;
Tag._meta_.fields["printers"] = {};
Tag._meta_.fields["printers"].type = Array;
Tag._meta_.fields["printers"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Tag;
}



/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_Modification = __webpack_require__(102);
var inventory_TaxRate = __webpack_require__(25);
var payments_LineItemPayment = __webpack_require__(29);
var order_Discount = __webpack_require__(47);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof order
*/
var LineItem = function() {
  this._class_ = LineItem;
  this.id = undefined;
  this.orderRef = undefined;
  this.item = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.price = undefined;
  this.unitQty = undefined;
  this.unitName = undefined;
  this.itemCode = undefined;
  this.note = undefined;
  this.printed = false;
  this.exchangedLineItem = undefined;
  this.binName = undefined;
  this.userData = undefined;
  this.createdTime = undefined;
  this.orderClientCreatedTime = undefined;
  this.discounts = undefined;
  this.discountAmount = undefined;
  this.exchanged = false;
  this.modifications = undefined;
  this.refunded = false;
  this.isRevenue = false;
  this.taxRates = undefined;
  this.payments = undefined;
  this.revenueAmount = undefined;
  this.quantitySold = undefined;
};


/**
* Set the field value
* Unique identifier.
*
* @memberof order.LineItem
* @param {String} id 
*/
LineItem.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier.
* @memberof order.LineItem
* @return {String} 
*/
LineItem.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Reference to the order with which the line item is associated.
*
* @memberof order.LineItem
* @param {base.Reference} orderRef 
*/
LineItem.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* Reference to the order with which the line item is associated.
* @memberof order.LineItem
* @return {base.Reference} 
*/
LineItem.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* A reference to the inventory item that was used to create this line item.
*
* @memberof order.LineItem
* @param {Null|base.Reference} item 
*/
LineItem.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* A reference to the inventory item that was used to create this line item.
* @memberof order.LineItem
* @return {Null|base.Reference} 
*/
LineItem.prototype.getItem = function() {
  return this.item;
};

/**
* Set the field value
* Line item name
*
* @memberof order.LineItem
* @param {Null|String} name 
*/
LineItem.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Line item name
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Alternate name of the line item.
*
* @memberof order.LineItem
* @param {Null|String} alternateName 
*/
LineItem.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* Alternate name of the line item.
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price.
*
* @memberof order.LineItem
* @param {Number} price must be a long integer
*/
LineItem.prototype.setPrice = function(price) {
  this.price = price;
};

/**
* Get the field value
* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price.
* @memberof order.LineItem
* @return {Number} must be a long integer
*/
LineItem.prototype.getPrice = function() {
  return this.price;
};

/**
* Set the field value
* Unit quantity if this line item is priced by quantity instead of having a fixed price.
*
* @memberof order.LineItem
* @param {Null|Number} unitQty must be an integer
*/
LineItem.prototype.setUnitQty = function(unitQty) {
  this.unitQty = unitQty;
};

/**
* Get the field value
* Unit quantity if this line item is priced by quantity instead of having a fixed price.
* @memberof order.LineItem
* @return {Null|Number} must be an integer
*/
LineItem.prototype.getUnitQty = function() {
  return this.unitQty;
};

/**
* Set the field value
* Unit name (e.g. oz, lb, etc.)
*
* @memberof order.LineItem
* @param {Null|String} unitName 
*/
LineItem.prototype.setUnitName = function(unitName) {
  this.unitName = unitName;
};

/**
* Get the field value
* Unit name (e.g. oz, lb, etc.)
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getUnitName = function() {
  return this.unitName;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Null|String} itemCode 
*/
LineItem.prototype.setItemCode = function(itemCode) {
  this.itemCode = itemCode;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getItemCode = function() {
  return this.itemCode;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Null|String} note 
*/
LineItem.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* True if this line item has been printed out on an order printer at least once already.
*
* @memberof order.LineItem
* @param {Boolean} printed 
*/
LineItem.prototype.setPrinted = function(printed) {
  this.printed = printed;
};

/**
* Get the field value
* True if this line item has been printed out on an order printer at least once already.
* @memberof order.LineItem
* @return {Boolean} 
*/
LineItem.prototype.getPrinted = function() {
  return this.printed;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Null|base.Reference} exchangedLineItem 
*/
LineItem.prototype.setExchangedLineItem = function(exchangedLineItem) {
  this.exchangedLineItem = exchangedLineItem;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Null|base.Reference} 
*/
LineItem.prototype.getExchangedLineItem = function() {
  return this.exchangedLineItem;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Null|String} binName 
*/
LineItem.prototype.setBinName = function(binName) {
  this.binName = binName;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getBinName = function() {
  return this.binName;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Null|String} userData 
*/
LineItem.prototype.setUserData = function(userData) {
  this.userData = userData;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Null|String} 
*/
LineItem.prototype.getUserData = function() {
  return this.userData;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Number} createdTime must be a long integer
*/
LineItem.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Number} must be a long integer
*/
LineItem.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Number} orderClientCreatedTime must be a long integer
*/
LineItem.prototype.setOrderClientCreatedTime = function(orderClientCreatedTime) {
  this.orderClientCreatedTime = orderClientCreatedTime;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Number} must be a long integer
*/
LineItem.prototype.getOrderClientCreatedTime = function() {
  return this.orderClientCreatedTime;
};

/**
* Set the field value
* List of references to of Order discounts.
*
* @memberof order.LineItem
* @param {Array.<order.Discount>} discounts An array of 
*/
LineItem.prototype.setDiscounts = function(discounts) {
  this.discounts = discounts;
};

/**
* Get the field value
* List of references to of Order discounts.
* @memberof order.LineItem
* @return {Array.<order.Discount>} An array of 
*/
LineItem.prototype.getDiscounts = function() {
  return this.discounts;
};

/**
* Set the field value
* Unnamed fixed discount amount in cents.
*
* @memberof order.LineItem
* @param {Null|Number} discountAmount must be a long integer
*/
LineItem.prototype.setDiscountAmount = function(discountAmount) {
  this.discountAmount = discountAmount;
};

/**
* Get the field value
* Unnamed fixed discount amount in cents.
* @memberof order.LineItem
* @return {Null|Number} must be a long integer
*/
LineItem.prototype.getDiscountAmount = function() {
  return this.discountAmount;
};

/**
* Set the field value
* @memberof order.LineItem
* @param {Boolean} exchanged 
*/
LineItem.prototype.setExchanged = function(exchanged) {
  this.exchanged = exchanged;
};

/**
* Get the field value
* @memberof order.LineItem
* @return {Boolean} 
*/
LineItem.prototype.getExchanged = function() {
  return this.exchanged;
};

/**
* Set the field value
* List of references to modifications applied to this line item.
*
* @memberof order.LineItem
* @param {Array.<order.Modification>} modifications An array of 
*/
LineItem.prototype.setModifications = function(modifications) {
  this.modifications = modifications;
};

/**
* Get the field value
* List of references to modifications applied to this line item.
* @memberof order.LineItem
* @return {Array.<order.Modification>} An array of 
*/
LineItem.prototype.getModifications = function() {
  return this.modifications;
};

/**
* Set the field value
* True if this line item has been refunded
*
* @memberof order.LineItem
* @param {Boolean} refunded 
*/
LineItem.prototype.setRefunded = function(refunded) {
  this.refunded = refunded;
};

/**
* Get the field value
* True if this line item has been refunded
* @memberof order.LineItem
* @return {Boolean} 
*/
LineItem.prototype.getRefunded = function() {
  return this.refunded;
};

/**
* Set the field value
* True if this item should be counted as revenue, for example gift cards and donations would not.
*
* @memberof order.LineItem
* @param {Boolean} isRevenue 
*/
LineItem.prototype.setIsRevenue = function(isRevenue) {
  this.isRevenue = isRevenue;
};

/**
* Get the field value
* True if this item should be counted as revenue, for example gift cards and donations would not.
* @memberof order.LineItem
* @return {Boolean} 
*/
LineItem.prototype.getIsRevenue = function() {
  return this.isRevenue;
};

/**
* Set the field value
* Tax rates that apply to this line item
*
* @memberof order.LineItem
* @param {Array.<inventory.TaxRate>} taxRates An array of 
*/
LineItem.prototype.setTaxRates = function(taxRates) {
  this.taxRates = taxRates;
};

/**
* Get the field value
* Tax rates that apply to this line item
* @memberof order.LineItem
* @return {Array.<inventory.TaxRate>} An array of 
*/
LineItem.prototype.getTaxRates = function() {
  return this.taxRates;
};

/**
* Set the field value
* Payments that apply to this line item
*
* @memberof order.LineItem
* @param {Array.<payments.LineItemPayment>} payments An array of 
*/
LineItem.prototype.setPayments = function(payments) {
  this.payments = payments;
};

/**
* Get the field value
* Payments that apply to this line item
* @memberof order.LineItem
* @return {Array.<payments.LineItemPayment>} An array of 
*/
LineItem.prototype.getPayments = function() {
  return this.payments;
};

/**
* Set the field value
* Revenue collected for this. This field is only used in reporting.
*
* @memberof order.LineItem
* @param {Number} revenueAmount must be a long integer
*/
LineItem.prototype.setRevenueAmount = function(revenueAmount) {
  this.revenueAmount = revenueAmount;
};

/**
* Get the field value
* Revenue collected for this. This field is only used in reporting.
* @memberof order.LineItem
* @return {Number} must be a long integer
*/
LineItem.prototype.getRevenueAmount = function() {
  return this.revenueAmount;
};

/**
* Set the field value
* Quantity sold for this line item. This field is only used in reporting
*
* @memberof order.LineItem
* @param {Number} quantitySold must be a double
*/
LineItem.prototype.setQuantitySold = function(quantitySold) {
  this.quantitySold = quantitySold;
};

/**
* Get the field value
* Quantity sold for this line item. This field is only used in reporting
* @memberof order.LineItem
* @return {Number} must be a double
*/
LineItem.prototype.getQuantitySold = function() {
  return this.quantitySold;
};

/**
* @memberof order.LineItem
* @private
*/
LineItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

LineItem.prototype.toString = function() {
  return JSON.stringify(this);
};

LineItem._meta_ =  {fields:  {}};
LineItem._meta_._class_ =  LineItem;
LineItem._meta_.fields["id"] = {};
LineItem._meta_.fields["id"].type = String;
LineItem._meta_.fields["orderRef"] = {};
LineItem._meta_.fields["orderRef"].type = base_Reference;
LineItem._meta_.fields["item"] = {};
LineItem._meta_.fields["item"].type = base_Reference;
LineItem._meta_.fields["name"] = {};
LineItem._meta_.fields["name"].type = String;
LineItem._meta_.fields["alternateName"] = {};
LineItem._meta_.fields["alternateName"].type = String;
LineItem._meta_.fields["price"] = {};
LineItem._meta_.fields["price"].type = Number;
LineItem._meta_.fields["unitQty"] = {};
LineItem._meta_.fields["unitQty"].type = Number;
LineItem._meta_.fields["unitName"] = {};
LineItem._meta_.fields["unitName"].type = String;
LineItem._meta_.fields["itemCode"] = {};
LineItem._meta_.fields["itemCode"].type = String;
LineItem._meta_.fields["note"] = {};
LineItem._meta_.fields["note"].type = String;
LineItem._meta_.fields["printed"] = {};
LineItem._meta_.fields["printed"].type = Boolean;
LineItem._meta_.fields["exchangedLineItem"] = {};
LineItem._meta_.fields["exchangedLineItem"].type = base_Reference;
LineItem._meta_.fields["binName"] = {};
LineItem._meta_.fields["binName"].type = String;
LineItem._meta_.fields["userData"] = {};
LineItem._meta_.fields["userData"].type = String;
LineItem._meta_.fields["createdTime"] = {};
LineItem._meta_.fields["createdTime"].type = Number;
LineItem._meta_.fields["orderClientCreatedTime"] = {};
LineItem._meta_.fields["orderClientCreatedTime"].type = Number;
LineItem._meta_.fields["discounts"] = {};
LineItem._meta_.fields["discounts"].type = Array;
LineItem._meta_.fields["discounts"].elementType = order_Discount;
LineItem._meta_.fields["discountAmount"] = {};
LineItem._meta_.fields["discountAmount"].type = Number;
LineItem._meta_.fields["exchanged"] = {};
LineItem._meta_.fields["exchanged"].type = Boolean;
LineItem._meta_.fields["modifications"] = {};
LineItem._meta_.fields["modifications"].type = Array;
LineItem._meta_.fields["modifications"].elementType = order_Modification;
LineItem._meta_.fields["refunded"] = {};
LineItem._meta_.fields["refunded"].type = Boolean;
LineItem._meta_.fields["isRevenue"] = {};
LineItem._meta_.fields["isRevenue"].type = Boolean;
LineItem._meta_.fields["taxRates"] = {};
LineItem._meta_.fields["taxRates"].type = Array;
LineItem._meta_.fields["taxRates"].elementType = inventory_TaxRate;
LineItem._meta_.fields["payments"] = {};
LineItem._meta_.fields["payments"].type = Array;
LineItem._meta_.fields["payments"].elementType = payments_LineItemPayment;
LineItem._meta_.fields["revenueAmount"] = {};
LineItem._meta_.fields["revenueAmount"].type = Number;
LineItem._meta_.fields["quantitySold"] = {};
LineItem._meta_.fields["quantitySold"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = LineItem;
}



/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var LineItemPayment = function() {
  this._class_ = LineItemPayment;
  this.id = undefined;
  this.lineItemRef = undefined;
  this.paymentRef = undefined;
  this.percentage = undefined;
  this.binName = undefined;
  this.refunded = undefined;
};


/**
* Set the field value
* Unique identifier; TBD this is confusing because it's used as either line item id or payment id
*
* @memberof payments.LineItemPayment
* @param {String} id 
*/
LineItemPayment.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier; TBD this is confusing because it's used as either line item id or payment id
* @memberof payments.LineItemPayment
* @return {String} 
*/
LineItemPayment.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The line item with which the line item payment is associated
*
* @memberof payments.LineItemPayment
* @param {base.Reference} lineItemRef 
*/
LineItemPayment.prototype.setLineItemRef = function(lineItemRef) {
  this.lineItemRef = lineItemRef;
};

/**
* Get the field value
* The line item with which the line item payment is associated
* @memberof payments.LineItemPayment
* @return {base.Reference} 
*/
LineItemPayment.prototype.getLineItemRef = function() {
  return this.lineItemRef;
};

/**
* Set the field value
* The payment with which the line item payment is associated
*
* @memberof payments.LineItemPayment
* @param {base.Reference} paymentRef 
*/
LineItemPayment.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which the line item payment is associated
* @memberof payments.LineItemPayment
* @return {base.Reference} 
*/
LineItemPayment.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* Percent of this line item covered by this payment
*
* @memberof payments.LineItemPayment
* @param {Number} percentage must be a long integer
*/
LineItemPayment.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
};

/**
* Get the field value
* Percent of this line item covered by this payment
* @memberof payments.LineItemPayment
* @return {Number} must be a long integer
*/
LineItemPayment.prototype.getPercentage = function() {
  return this.percentage;
};

/**
* Set the field value
* Bin this line item payment was for
*
* @memberof payments.LineItemPayment
* @param {Null|String} binName 
*/
LineItemPayment.prototype.setBinName = function(binName) {
  this.binName = binName;
};

/**
* Get the field value
* Bin this line item payment was for
* @memberof payments.LineItemPayment
* @return {Null|String} 
*/
LineItemPayment.prototype.getBinName = function() {
  return this.binName;
};

/**
* Set the field value
* Payment has been refunded
*
* @memberof payments.LineItemPayment
* @param {Boolean} refunded 
*/
LineItemPayment.prototype.setRefunded = function(refunded) {
  this.refunded = refunded;
};

/**
* Get the field value
* Payment has been refunded
* @memberof payments.LineItemPayment
* @return {Boolean} 
*/
LineItemPayment.prototype.getRefunded = function() {
  return this.refunded;
};

/**
* @memberof payments.LineItemPayment
* @private
*/
LineItemPayment.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

LineItemPayment.prototype.toString = function() {
  return JSON.stringify(this);
};

LineItemPayment._meta_ =  {fields:  {}};
LineItemPayment._meta_._class_ =  LineItemPayment;
LineItemPayment._meta_.fields["id"] = {};
LineItemPayment._meta_.fields["id"].type = String;
LineItemPayment._meta_.fields["lineItemRef"] = {};
LineItemPayment._meta_.fields["lineItemRef"].type = base_Reference;
LineItemPayment._meta_.fields["paymentRef"] = {};
LineItemPayment._meta_.fields["paymentRef"].type = base_Reference;
LineItemPayment._meta_.fields["percentage"] = {};
LineItemPayment._meta_.fields["percentage"].type = Number;
LineItemPayment._meta_.fields["binName"] = {};
LineItemPayment._meta_.fields["binName"].type = String;
LineItemPayment._meta_.fields["refunded"] = {};
LineItemPayment._meta_.fields["refunded"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = LineItemPayment;
}



/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var DisplayDiscount = function() {
  this._class_ = DisplayDiscount;
  this.id = undefined;
  this.lineItemId = undefined;
  this.name = undefined;
  this.amount = undefined;
  this.percentage = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.DisplayDiscount
* @param {String} id 
*/
DisplayDiscount.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.DisplayDiscount
* @return {String} 
*/
DisplayDiscount.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The lineItem with which the discount is associated
*
* @memberof order.DisplayDiscount
* @param {String} lineItemId 
*/
DisplayDiscount.prototype.setLineItemId = function(lineItemId) {
  this.lineItemId = lineItemId;
};

/**
* Get the field value
* The lineItem with which the discount is associated
* @memberof order.DisplayDiscount
* @return {String} 
*/
DisplayDiscount.prototype.getLineItemId = function() {
  return this.lineItemId;
};

/**
* Set the field value
* Name of the discount
*
* @memberof order.DisplayDiscount
* @param {String} name 
*/
DisplayDiscount.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the discount
* @memberof order.DisplayDiscount
* @return {String} 
*/
DisplayDiscount.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Formatted discount amount
*
* @memberof order.DisplayDiscount
* @param {String} amount 
*/
DisplayDiscount.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Formatted discount amount
* @memberof order.DisplayDiscount
* @return {String} 
*/
DisplayDiscount.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Discount amount in percent
*
* @memberof order.DisplayDiscount
* @param {String} percentage 
*/
DisplayDiscount.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
};

/**
* Get the field value
* Discount amount in percent
* @memberof order.DisplayDiscount
* @return {String} 
*/
DisplayDiscount.prototype.getPercentage = function() {
  return this.percentage;
};

/**
* @memberof order.DisplayDiscount
* @private
*/
DisplayDiscount.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayDiscount.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayDiscount._meta_ =  {fields:  {}};
DisplayDiscount._meta_._class_ =  DisplayDiscount;
DisplayDiscount._meta_.fields["id"] = {};
DisplayDiscount._meta_.fields["id"].type = String;
DisplayDiscount._meta_.fields["lineItemId"] = {};
DisplayDiscount._meta_.fields["lineItemId"].type = String;
DisplayDiscount._meta_.fields["name"] = {};
DisplayDiscount._meta_.fields["name"].type = String;
DisplayDiscount._meta_.fields["amount"] = {};
DisplayDiscount._meta_.fields["amount"].type = String;
DisplayDiscount._meta_.fields["percentage"] = {};
DisplayDiscount._meta_.fields["percentage"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DisplayDiscount;
}



/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_TipMode = __webpack_require__(55);
var payments_DataEntryLocation = __webpack_require__(56);

/**
* @constructor
* @memberof payments
*/
var TransactionSettings = function() {
  this._class_ = TransactionSettings;
  this.cardEntryMethods = undefined;
  this.disableCashBack = false;
  this.cloverShouldHandleReceipts = true;
  this.forcePinEntryOnSwipe = false;
  this.disableRestartTransactionOnFailure = false;
  this.allowOfflinePayment = false;
  this.approveOfflinePaymentWithoutPrompt = false;
  this.forceOfflinePayment = false;
  this.signatureThreshold = undefined;
  this.signatureEntryLocation = undefined;
  this.tipMode = undefined;
  this.tippableAmount = undefined;
  this.disableReceiptSelection = false;
  this.disableDuplicateCheck = false;
  this.autoAcceptPaymentConfirmations = false;
  this.autoAcceptSignature = false;
};


/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Number} cardEntryMethods must be an integer
*/
TransactionSettings.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Number} must be an integer
*/
TransactionSettings.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} disableCashBack 
*/
TransactionSettings.prototype.setDisableCashBack = function(disableCashBack) {
  this.disableCashBack = disableCashBack;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getDisableCashBack = function() {
  return this.disableCashBack;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} cloverShouldHandleReceipts 
*/
TransactionSettings.prototype.setCloverShouldHandleReceipts = function(cloverShouldHandleReceipts) {
  this.cloverShouldHandleReceipts = cloverShouldHandleReceipts;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getCloverShouldHandleReceipts = function() {
  return this.cloverShouldHandleReceipts;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} forcePinEntryOnSwipe 
*/
TransactionSettings.prototype.setForcePinEntryOnSwipe = function(forcePinEntryOnSwipe) {
  this.forcePinEntryOnSwipe = forcePinEntryOnSwipe;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getForcePinEntryOnSwipe = function() {
  return this.forcePinEntryOnSwipe;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} disableRestartTransactionOnFailure 
*/
TransactionSettings.prototype.setDisableRestartTransactionOnFailure = function(disableRestartTransactionOnFailure) {
  this.disableRestartTransactionOnFailure = disableRestartTransactionOnFailure;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getDisableRestartTransactionOnFailure = function() {
  return this.disableRestartTransactionOnFailure;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} allowOfflinePayment 
*/
TransactionSettings.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
  this.allowOfflinePayment = allowOfflinePayment;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getAllowOfflinePayment = function() {
  return this.allowOfflinePayment;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} approveOfflinePaymentWithoutPrompt 
*/
TransactionSettings.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
  return this.approveOfflinePaymentWithoutPrompt;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} forceOfflinePayment 
*/
TransactionSettings.prototype.setForceOfflinePayment = function(forceOfflinePayment) {
  this.forceOfflinePayment = forceOfflinePayment;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getForceOfflinePayment = function() {
  return this.forceOfflinePayment;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Number} signatureThreshold must be a long integer
*/
TransactionSettings.prototype.setSignatureThreshold = function(signatureThreshold) {
  this.signatureThreshold = signatureThreshold;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Number} must be a long integer
*/
TransactionSettings.prototype.getSignatureThreshold = function() {
  return this.signatureThreshold;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {payments.DataEntryLocation} signatureEntryLocation 
*/
TransactionSettings.prototype.setSignatureEntryLocation = function(signatureEntryLocation) {
  this.signatureEntryLocation = signatureEntryLocation;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {payments.DataEntryLocation} 
*/
TransactionSettings.prototype.getSignatureEntryLocation = function() {
  return this.signatureEntryLocation;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {payments.TipMode} tipMode 
*/
TransactionSettings.prototype.setTipMode = function(tipMode) {
  this.tipMode = tipMode;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {payments.TipMode} 
*/
TransactionSettings.prototype.getTipMode = function() {
  return this.tipMode;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Number} tippableAmount must be a long integer
*/
TransactionSettings.prototype.setTippableAmount = function(tippableAmount) {
  this.tippableAmount = tippableAmount;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Number} must be a long integer
*/
TransactionSettings.prototype.getTippableAmount = function() {
  return this.tippableAmount;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} disableReceiptSelection 
*/
TransactionSettings.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
  this.disableReceiptSelection = disableReceiptSelection;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getDisableReceiptSelection = function() {
  return this.disableReceiptSelection;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} disableDuplicateCheck 
*/
TransactionSettings.prototype.setDisableDuplicateCheck = function(disableDuplicateCheck) {
  this.disableDuplicateCheck = disableDuplicateCheck;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getDisableDuplicateCheck = function() {
  return this.disableDuplicateCheck;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} autoAcceptPaymentConfirmations 
*/
TransactionSettings.prototype.setAutoAcceptPaymentConfirmations = function(autoAcceptPaymentConfirmations) {
  this.autoAcceptPaymentConfirmations = autoAcceptPaymentConfirmations;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getAutoAcceptPaymentConfirmations = function() {
  return this.autoAcceptPaymentConfirmations;
};

/**
* Set the field value
* @memberof payments.TransactionSettings
* @param {Boolean} autoAcceptSignature 
*/
TransactionSettings.prototype.setAutoAcceptSignature = function(autoAcceptSignature) {
  this.autoAcceptSignature = autoAcceptSignature;
};

/**
* Get the field value
* @memberof payments.TransactionSettings
* @return {Boolean} 
*/
TransactionSettings.prototype.getAutoAcceptSignature = function() {
  return this.autoAcceptSignature;
};

/**
* @memberof payments.TransactionSettings
* @private
*/
TransactionSettings.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TransactionSettings.prototype.toString = function() {
  return JSON.stringify(this);
};

TransactionSettings._meta_ =  {fields:  {}};
TransactionSettings._meta_._class_ =  TransactionSettings;
TransactionSettings._meta_.fields["cardEntryMethods"] = {};
TransactionSettings._meta_.fields["cardEntryMethods"].type = Number;
TransactionSettings._meta_.fields["disableCashBack"] = {};
TransactionSettings._meta_.fields["disableCashBack"].type = Boolean;
TransactionSettings._meta_.fields["cloverShouldHandleReceipts"] = {};
TransactionSettings._meta_.fields["cloverShouldHandleReceipts"].type = Boolean;
TransactionSettings._meta_.fields["forcePinEntryOnSwipe"] = {};
TransactionSettings._meta_.fields["forcePinEntryOnSwipe"].type = Boolean;
TransactionSettings._meta_.fields["disableRestartTransactionOnFailure"] = {};
TransactionSettings._meta_.fields["disableRestartTransactionOnFailure"].type = Boolean;
TransactionSettings._meta_.fields["allowOfflinePayment"] = {};
TransactionSettings._meta_.fields["allowOfflinePayment"].type = Boolean;
TransactionSettings._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
TransactionSettings._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
TransactionSettings._meta_.fields["forceOfflinePayment"] = {};
TransactionSettings._meta_.fields["forceOfflinePayment"].type = Boolean;
TransactionSettings._meta_.fields["signatureThreshold"] = {};
TransactionSettings._meta_.fields["signatureThreshold"].type = Number;
TransactionSettings._meta_.fields["signatureEntryLocation"] = {};
TransactionSettings._meta_.fields["signatureEntryLocation"].type = payments_DataEntryLocation;
TransactionSettings._meta_.fields["tipMode"] = {};
TransactionSettings._meta_.fields["tipMode"].type = payments_TipMode;
TransactionSettings._meta_.fields["tippableAmount"] = {};
TransactionSettings._meta_.fields["tippableAmount"].type = Number;
TransactionSettings._meta_.fields["disableReceiptSelection"] = {};
TransactionSettings._meta_.fields["disableReceiptSelection"].type = Boolean;
TransactionSettings._meta_.fields["disableDuplicateCheck"] = {};
TransactionSettings._meta_.fields["disableDuplicateCheck"].type = Boolean;
TransactionSettings._meta_.fields["autoAcceptPaymentConfirmations"] = {};
TransactionSettings._meta_.fields["autoAcceptPaymentConfirmations"].type = Boolean;
TransactionSettings._meta_.fields["autoAcceptSignature"] = {};
TransactionSettings._meta_.fields["autoAcceptSignature"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = TransactionSettings;
}



/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
ExternalDeviceState = {
  IDLE : "IDLE",
  BUSY : "BUSY",
  WAITING_FOR_POS : "WAITING_FOR_POS",
  WAITING_FOR_CUSTOMER : "WAITING_FOR_CUSTOMER",
  UNKNOWN : "UNKNOWN"
};


//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceState;
}



/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
KeyPress = {
  NONE : "NONE",
  ENTER : "ENTER",
  ESC : "ESC",
  BACKSPACE : "BACKSPACE",
  TAB : "TAB",
  STAR : "STAR",
  BUTTON_1 : "BUTTON_1",
  BUTTON_2 : "BUTTON_2",
  BUTTON_3 : "BUTTON_3",
  BUTTON_4 : "BUTTON_4",
  BUTTON_5 : "BUTTON_5",
  BUTTON_6 : "BUTTON_6",
  BUTTON_7 : "BUTTON_7",
  BUTTON_8 : "BUTTON_8",
  DIGIT_1 : "DIGIT_1",
  DIGIT_2 : "DIGIT_2",
  DIGIT_3 : "DIGIT_3",
  DIGIT_4 : "DIGIT_4",
  DIGIT_5 : "DIGIT_5",
  DIGIT_6 : "DIGIT_6",
  DIGIT_7 : "DIGIT_7",
  DIGIT_8 : "DIGIT_8",
  DIGIT_9 : "DIGIT_9",
  DIGIT_0 : "DIGIT_0"
};


//
// Expose the module.
//
if (true) {
module.exports = KeyPress;
}



/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
TxState = {
  START : "START",
  SUCCESS : "SUCCESS",
  FAIL : "FAIL"
};


//
// Expose the module.
//
if (true) {
module.exports = TxState;
}



/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Payment = __webpack_require__(4);
var remotepay_BaseResponse = __webpack_require__(5);
var base_Signature = __webpack_require__(17);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var PaymentResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = PaymentResponse;
  this.payment = undefined;
  this.isSale = false;
  this.isPreAuth = false;
  this.isAuth = false;
  this.signature = undefined;
};

PaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
PaymentResponse.prototype.constructor = PaymentResponse;

/**
* Set the field value
* The payment from the sale
*
* @memberof remotepay.PaymentResponse
* @param {payments.Payment} payment 
*/
PaymentResponse.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* The payment from the sale
* @memberof remotepay.PaymentResponse
* @return {payments.Payment} 
*/
PaymentResponse.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof remotepay.PaymentResponse
* @param {Boolean} isSale 
*/
PaymentResponse.prototype.setIsSale = function(isSale) {
  this.isSale = isSale;
};

/**
* Get the field value
* @memberof remotepay.PaymentResponse
* @return {Boolean} 
*/
PaymentResponse.prototype.getIsSale = function() {
  return this.isSale;
};

/**
* Set the field value
* @memberof remotepay.PaymentResponse
* @param {Boolean} isPreAuth 
*/
PaymentResponse.prototype.setIsPreAuth = function(isPreAuth) {
  this.isPreAuth = isPreAuth;
};

/**
* Get the field value
* @memberof remotepay.PaymentResponse
* @return {Boolean} 
*/
PaymentResponse.prototype.getIsPreAuth = function() {
  return this.isPreAuth;
};

/**
* Set the field value
* @memberof remotepay.PaymentResponse
* @param {Boolean} isAuth 
*/
PaymentResponse.prototype.setIsAuth = function(isAuth) {
  this.isAuth = isAuth;
};

/**
* Get the field value
* @memberof remotepay.PaymentResponse
* @return {Boolean} 
*/
PaymentResponse.prototype.getIsAuth = function() {
  return this.isAuth;
};

/**
* Set the field value
* @memberof remotepay.PaymentResponse
* @param {base.Signature|Null} signature 
*/
PaymentResponse.prototype.setSignature = function(signature) {
  this.signature = signature;
};

/**
* Get the field value
* @memberof remotepay.PaymentResponse
* @return {base.Signature|Null} 
*/
PaymentResponse.prototype.getSignature = function() {
  return this.signature;
};

PaymentResponse._meta_ =  {fields:  {}};
PaymentResponse._meta_._class_ =  PaymentResponse;
PaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
PaymentResponse._meta_.fields["payment"] = {};
PaymentResponse._meta_.fields["payment"].type = payments_Payment;
PaymentResponse._meta_.fields["isSale"] = {};
PaymentResponse._meta_.fields["isSale"].type = Boolean;
PaymentResponse._meta_.fields["isPreAuth"] = {};
PaymentResponse._meta_.fields["isPreAuth"].type = Boolean;
PaymentResponse._meta_.fields["isAuth"] = {};
PaymentResponse._meta_.fields["isAuth"].type = Boolean;
PaymentResponse._meta_.fields["signature"] = {};
PaymentResponse._meta_.fields["signature"].type = base_Signature;

//
// Expose the module.
//
if (true) {
module.exports = PaymentResponse;
}



/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
ExternalDeviceState = {
  IDLE : "IDLE",
  BUSY : "BUSY",
  WAITING_FOR_POS : "WAITING_FOR_POS",
  WAITING_FOR_CUSTOMER : "WAITING_FOR_CUSTOMER",
  UNKNOWN : "UNKNOWN"
};


//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceState;
}



/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var CardEntryMethods_1 = __webpack_require__(160);
var CloverConnectorBroadcaster_1 = __webpack_require__(373);
var CloverDeviceFactory_1 = __webpack_require__(162);
var Logger_1 = __webpack_require__(7);
var Builder_1 = __webpack_require__(375);
/**
 * Clover Connector
 *
 * The clover connector implements the ICloverConnector interface. This is where
 * we define how the connector interacts with remote pay adapters.
 */
var CloverConnector = (function () {
    function CloverConnector(config) {
        // manual is not enabled by default
        this.cardEntryMethods = CardEntryMethods_1.CardEntryMethods.DEFAULT;
        // Create a logger
        this.logger = Logger_1.Logger.create();
        // List of listeners to broadcast notifications to
        this.broadcaster = new CloverConnectorBroadcaster_1.CloverConnectorBroadcaster();
        // Flag indicating whether the device is ready or not
        this.isReady = false;
        // Set the cancel input option
        CloverConnector.CANCEL_INPUT_OPTION = new sdk.remotemessage.InputOption();
        CloverConnector.CANCEL_INPUT_OPTION.setKeyPress(sdk.remotemessage.KeyPress.ESC);
        CloverConnector.CANCEL_INPUT_OPTION.setDescription("Cancel");
        // Try to load the configuration.
        if (config) {
            this.configuration = config;
        }
    }
    /**
     * Initialize the connector with a new config
     *
     * @param {CloverDeviceConfiguration} config - the configuration for the connector
     */
    CloverConnector.prototype.initialize = function (config) {
        this.configuration = config;
        this.deviceObserver = new CloverConnector.InnerDeviceObserver(this);
        // Get the device and subscribe to it.
        this.device = CloverDeviceFactory_1.CloverDeviceFactory.get(config);
        if (this.device) {
            this.device.subscribe(this.deviceObserver);
        }
    };
    CloverConnector.prototype.initializeConnection = function () {
        if (!this.device) {
            this.initialize(this.configuration);
        }
    };
    /**
     * Add new listener to receive broadcast notifications
     *
     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to add
     */
    CloverConnector.prototype.addCloverConnectorListener = function (connectorListener) {
        this.broadcaster.push(connectorListener);
    };
    /**
     * Remove a listener
     *
     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to remove
     */
    CloverConnector.prototype.removeCloverConnectorListener = function (connectorListener) {
        var indexOfListener = this.broadcaster.indexOf(connectorListener);
        if (indexOfListener != -1) {
            this.broadcaster.splice(indexOfListener, 1);
        }
    };
    CloverConnector.prototype.sale = function (request) {
        this.lastRequest = request;
        if (!this.device || !this.isReady) {
            this.deviceObserver.onFinishCancelSale(sdk.remotepay.ResponseCode.ERROR, "Device Connection Error", "In sale: SaleRequest - The Clover device is not connected.");
        }
        else if (request == null) {
            this.deviceObserver.onFinishCancelSale(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In sale: SaleRequest - The request that was passed in for processing is null.");
        }
        else if (request.getAmount() == null || request.getAmount() <= 0) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In sale: SaleRequest - The request amount cannot be zero. Original Request = " + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
        }
        else if (request.getTipAmount() && request.getTipAmount() < 0) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In sale: SaleRequest - The tip amount cannot be less than zero. Original Request = " + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
        }
        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 || request.getExternalId().trim().length > 32) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In sale: SaleRequest - The externalId is required and the max length is 32 characters. Original Request = " + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
        }
        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In sale: SaleRequest - Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
        }
        else {
            if (request.getTipAmount() == null) {
                request.setTipAmount(0);
            }
            try {
                this.saleAuth(request, false);
            }
            catch (e) {
                this.logger.debug("Error in sale", e);
                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
            }
        }
    };
    /**
     * A common PayIntent builder method for Sale, Auth and PreAuth
     *
     * @param request
     * @param suppressTipScreen
     */
    CloverConnector.prototype.saleAuth = function (request, suppressTipScreen) {
        if (this.device && this.isReady) {
            this.lastRequest = request;
            var builder = new Builder_1.PayIntent.Builder();
            var transactionSettings = new sdk.payments.TransactionSettings();
            builder.setTransactionType(request.getType()); // difference between sale, auth and auth(preAuth)
            builder.setAmount(request.getAmount());
            builder.setVaultedCard(request.getVaultedCard());
            builder.setExternalPaymentId(request.getExternalId().trim());
            builder.setRequiresRemoteConfirmation(true);
            if (request.getCardNotPresent()) {
                builder.setCardNotPresent(request.getCardNotPresent());
            }
            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);
            if (request.getDisablePrinting()) {
                transactionSettings.setCloverShouldHandleReceipts(!request.getDisablePrinting());
            }
            if (request.getDisableRestartTransactionOnFail()) {
                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());
            }
            transactionSettings.setSignatureEntryLocation(request.getSignatureEntryLocation());
            transactionSettings.setSignatureThreshold(request.getSignatureThreshold());
            transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());
            transactionSettings.setDisableDuplicateCheck(request.getDisableDuplicateChecking());
            transactionSettings.setAutoAcceptPaymentConfirmations(request.getAutoAcceptPaymentConfirmations());
            transactionSettings.setAutoAcceptSignature(request.getAutoAcceptSignature());
            var paymentRequestType = null;
            if (request instanceof sdk.remotepay.PreAuthRequest) {
                paymentRequestType = CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST;
            }
            else if (request instanceof sdk.remotepay.AuthRequest) {
                paymentRequestType = CloverConnector.TxTypeRequestInfo.AUTH_REQUEST;
                var req = request;
                if (req.getTaxAmount()) {
                    builder.setTaxAmount(req.getTaxAmount());
                }
                if (req.getTippableAmount()) {
                    transactionSettings.setTippableAmount(req.getTippableAmount());
                }
                if (req.getAllowOfflinePayment()) {
                    transactionSettings.setAllowOfflinePayment(req.getAllowOfflinePayment());
                }
                if (req.getApproveOfflinePaymentWithoutPrompt()) {
                    transactionSettings.setApproveOfflinePaymentWithoutPrompt(req.getApproveOfflinePaymentWithoutPrompt());
                }
                if (req.getDisableCashback()) {
                    transactionSettings.setDisableCashBack(req.getDisableCashback());
                }
                transactionSettings.setTipMode(sdk.payments.TipMode.ON_PAPER); // overriding TipMode, since it's an Auth request
            }
            else if (request instanceof sdk.remotepay.SaleRequest) {
                paymentRequestType = CloverConnector.TxTypeRequestInfo.SALE_REQUEST;
                var req = request;
                // shared with AuthRequest
                if (req.getAllowOfflinePayment()) {
                    transactionSettings.setAllowOfflinePayment(req.getAllowOfflinePayment());
                }
                if (req.getApproveOfflinePaymentWithoutPrompt()) {
                    transactionSettings.setApproveOfflinePaymentWithoutPrompt(req.getApproveOfflinePaymentWithoutPrompt());
                }
                if (req.getDisableCashback()) {
                    transactionSettings.setDisableCashBack(req.getDisableCashback());
                }
                if (req.getTaxAmount()) {
                    builder.setTaxAmount(req.getTaxAmount());
                }
                // SaleRequest
                if (req.getTippableAmount()) {
                    transactionSettings.setTippableAmount(req.getTippableAmount());
                }
                if (req.getTipAmount() !== undefined) {
                    builder.setTipAmount(req.getTipAmount());
                }
                if (req.getTipMode()) {
                    transactionSettings.setTipMode(CloverConnector.getV3TipModeFromRequestTipMode(req.getTipMode()));
                }
            }
            builder.setTransactionSettings(transactionSettings);
            var payIntent = builder.build();
            this.device.doTxStart(payIntent, null, paymentRequestType);
        }
    };
    CloverConnector.getV3TipModeFromRequestTipMode = function (saleTipMode) {
        var allowedTipModes = [
            sdk.payments.TipMode.TIP_PROVIDED,
            sdk.payments.TipMode.ON_SCREEN_BEFORE_PAYMENT,
            sdk.payments.TipMode.NO_TIP
        ];
        if (allowedTipModes.indexOf(saleTipMode) > -1) {
            return saleTipMode;
        }
        return null;
    };
    CloverConnector.prototype.notifyDeviceNotConnected = function (message) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.COMMUNICATION, sdk.remotepay.DeviceErrorEventCode.NotConnected, null, message + ": Device is not connected.");
    };
    CloverConnector.prototype.notifyInvalidData = function (message) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.VALIDATION, sdk.remotepay.DeviceErrorEventCode.InvalidParam, null, message);
    };
    CloverConnector.prototype.notifyDeviceError = function (errorType, errorCode, cause, message) {
        var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
        deviceErrorEvent.setType(errorType);
        deviceErrorEvent.setCode(errorCode);
        deviceErrorEvent.setCause(cause);
        deviceErrorEvent.setMessage(message);
        this.broadcaster.notifyOnDeviceError(deviceErrorEvent);
    };
    CloverConnector.prototype.acceptSignature = function (request) {
        var logLocation = "In acceptSignature";
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected(logLocation);
        }
        else if (request == null) {
            this.notifyInvalidData(logLocation + ": VerifySignatureRequest cannot be null.");
        }
        else if (request.getPayment() == null || request.getPayment().getId() == null) {
            this.notifyInvalidData(logLocation + ": VerifySignatureRequest. Payment must have an ID.");
        }
        else {
            this.device.doSignatureVerified(request.getPayment(), true);
        }
    };
    CloverConnector.prototype.rejectSignature = function (request) {
        var logLocation = "In rejectSignature";
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected(logLocation);
        }
        else if (request == null) {
            this.notifyInvalidData(logLocation + ": VerifySignatureRequest cannot be null.");
        }
        else if (request.getPayment() == null || request.getPayment().getId() == null) {
            this.notifyInvalidData(logLocation + ": VerifySignatureRequest. Payment must have an ID.");
        }
        else {
            this.device.doSignatureVerified(request.getPayment(), false);
        }
    };
    CloverConnector.prototype.acceptPayment = function (payment) {
        var logLocation = "In acceptPayment";
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected(logLocation);
        }
        else if (payment == null) {
            this.notifyInvalidData(logLocation + ": Payment cannot be null.");
        }
        else if (payment.getId() == null) {
            this.notifyInvalidData(logLocation + ": Payment must have an ID.");
        }
        else {
            this.device.doAcceptPayment(payment);
        }
    };
    CloverConnector.prototype.rejectPayment = function (payment, challenge) {
        var logLocation = "In rejectPayment";
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected(logLocation);
        }
        else if (payment == null) {
            this.notifyInvalidData(logLocation + ": Payment cannot be null.");
        }
        else if (payment.getId() == null) {
            this.notifyInvalidData(logLocation + ": Payment must have an ID.");
        }
        else if (challenge == null) {
            this.notifyInvalidData(logLocation + ": Challenge cannot be null.");
        }
        else {
            this.device.doRejectPayment(payment, challenge);
        }
    };
    CloverConnector.prototype.auth = function (request) {
        this.lastRequest = request;
        if (!this.device || !this.isReady) {
            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In auth: Auth Request - The Clover device is not connected.");
        }
        else if (!this.merchantInfo.getSupportsAuths()) {
            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In auth: AuthRequest - " +
                "Auths are not enabled for the payment gateway. Original Request = " + request);
        }
        else if (request == null) {
            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In auth: AuthRequest - The request that was passed in for processing is null.");
        }
        else if (request.getAmount() == null || request.getAmount() <= 0) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In auth: AuthRequest - " +
                "The request amount cannot be zero. Original Request = " + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
        }
        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 ||
            request.getExternalId().trim().length > 32) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In auth: AuthRequest - The externalId is invalid. It is " +
                "required and the max length is 32. Original Request = " + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
        }
        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In auth: AuthRequest - " +
                "Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
        }
        else {
            try {
                this.saleAuth(request, true);
            }
            catch (e) {
                this.logger.debug("Error in auth", e);
                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
            }
        }
    };
    CloverConnector.prototype.preAuth = function (request) {
        this.lastRequest = request;
        if (!this.device || !this.isReady) {
            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In preAuth: PreAuthRequest - The Clover device is not connected.");
        }
        else if (!this.merchantInfo.getSupportsPreAuths()) {
            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In preAuth: PreAuthRequest - " +
                "PreAuths are not enabled for the payment gateway. Original Request = " + request);
        }
        else if (request == null) {
            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In preAuth: PreAuthRequest - " +
                "The request that was passed in for processing is null.");
        }
        else if (request.getAmount() == null || request.getAmount() <= 0) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In preAuth: PreAuthRequest - " +
                "The request amount cannot be zero. Original Request = " + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
        }
        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 ||
            request.getExternalId().trim().length > 32) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In preAuth: PreAuthRequest - The externalId is invalid. " +
                "It is required and the max length is 32. Original Request = " + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
        }
        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In preAuth: PreAuthRequest - " +
                "Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
        }
        else {
            try {
                this.saleAuth(request, true);
            }
            catch (e) {
                this.lastRequest = null;
                this.logger.debug("Error in preAuth", e);
                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
            }
        }
    };
    CloverConnector.prototype.capturePreAuth = function (request) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In capturePreAuth: CapturePreAuth - The Clover device is not connected.", null, null);
        }
        else if (!this.merchantInfo.getSupportsPreAuths()) {
            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In capturePreAuth: PreAuth Captures are not enabled for the payment gateway. Original Request = " +
                request, null, null);
        }
        else if (request == null) {
            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In capturePreAuth: CapturePreAuth - " +
                "The request that was passed in for processing is null.", null, null);
        }
        else if (request.getAmount() < 0 || request.getTipAmount() < 0) {
            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In capturePreAuth: CapturePreAuth - " +
                "The request amount must be greater than zero and the tip must be greater " +
                "than or equal to zero. Original Request = " + request, null, null);
        }
        else if (!request.getPaymentId()) {
            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In capturePreAuth: CapturePreAuth - " +
                "The paymentId is null. Original Request = " + request, null, null);
        }
        else {
            try {
                this.device.doCaptureAuth(request.getPaymentId(), request.getAmount(), request.getTipAmount());
            }
            catch (e) {
                var response = new sdk.remotepay.CapturePreAuthResponse();
                CloverConnector.populateBaseResponse(response, false, sdk.remotepay.ResponseCode.UNSUPPORTED, "Pre Auths unsupported", "The currently configured merchant gateway does not support Capture Auth requests.");
                this.broadcaster.notifyOnCapturePreAuth(response);
            }
        }
    };
    CloverConnector.prototype.tipAdjustAuth = function (request) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In tipAdjustAuth: TipAdjustAuthRequest - The Clover device is not connected.");
        }
        else if (!this.merchantInfo.getSupportsTipAdjust()) {
            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In tipAdjustAuth: TipAdjustAuthRequest - Tip Adjustments are not enabled for the payment gateway. Original Request = " + request);
        }
        else if (request == null) {
            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In tipAdjustAuth: TipAdjustAuthRequest - The request that was passed in for processing is null.");
        }
        else if (request.getPaymentId() == null) {
            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In tipAdjustAuth: TipAdjustAuthRequest - The paymentId is required.");
        }
        else if (request.getTipAmount() < 0) {
            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In tipAdjustAuth: TipAdjustAuthRequest - The request amount cannot be less than zero. Original Request = " + request);
        }
        else {
            this.device.doTipAdjustAuth(request.getOrderId(), request.getPaymentId(), request.getTipAmount());
        }
    };
    CloverConnector.prototype.vaultCard = function (cardEntryMethods) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onVaultCardResponse(false, sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In vaultCard: The Clover device is not connected.", null);
        }
        else if (!this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onVaultCardResponse(false, sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In vaultCard: VaultCard/Payment Tokens are not enabled for the payment gateway.", null);
        }
        else {
            this.device.doVaultCard(cardEntryMethods ? cardEntryMethods : this.getCardEntryMethods());
        }
    };
    CloverConnector.prototype.voidPayment = function (request) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In voidPayment: VoidPaymentRequest - The Clover device is not connected.");
        }
        else if (request == null) {
            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In voidPayment: VoidPaymentRequest - The request that was passed in for processing is null.");
        }
        else if (request.getPaymentId() == null) {
            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In voidPayment: VoidPaymentRequest - The paymentId is required.");
        }
        else {
            var payment = new sdk.payments.Payment();
            payment.setId(request.getPaymentId());
            payment.setOrder(new sdk.base.Reference());
            payment.getOrder().setId(request.getOrderId());
            payment.setEmployee(new sdk.base.Reference());
            payment.getEmployee().setId(request.getEmployeeId());
            var reason = sdk.order.VoidReason[request.getVoidReason()];
            this.device.doVoidPayment(payment, reason);
        }
    };
    CloverConnector.prototype.refundPayment = function (request) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, "Device Connection Error", "In refundPayment: RefundPaymentRequest - The Clover device is not connected.", CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);
        }
        else if (request == null) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, "Request Validation Error", "In refundPayment: RefundPaymentRequest - The request that was passed in for processing is empty.", CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);
        }
        else if (request.getPaymentId() == null) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, "Request Validation Error", "In refundPayment: RefundPaymentRequest PaymentID cannot be empty. " + request, CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);
        }
        else if ((request.getAmount() == null || request.getAmount() <= 0) && !request.getFullRefund()) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, "Request Validation Error", "In refundPayment: RefundPaymentRequest Amount must be greater than zero when FullRefund is set to false. " + request, CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);
        }
        else {
            this.device.doPaymentRefund(request.getOrderId(), request.getPaymentId(), request.getAmount(), request.getFullRefund());
        }
    };
    CloverConnector.prototype.manualRefund = function (request) {
        var transactionSettings = new sdk.payments.TransactionSettings();
        this.lastRequest = request;
        if (!this.device || !this.isReady) {
            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In manualRefund: ManualRefundRequest - The Clover device is not connected.");
        }
        else if (!this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In manualRefund: ManualRefundRequest - Manual Refunds are not enabled for the payment gateway. Original Request = " + request);
        }
        else if (request == null) {
            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In manualRefund: ManualRefundRequest - The request that was passed in for processing is null.");
        }
        else if (request.getAmount() == null || request.getAmount() <= 0) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Request Validation Error", "In manualRefund: ManualRefundRequest - The request amount cannot be zero. Original Request = " + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
        }
        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 || request.getExternalId().trim().length > 32) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In manualRefund: ManualRefundRequest - The externalId is invalid. It is required and the max length is 32. Original Request = " + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
        }
        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In manualRefund: ManualRefundRequest - Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
        }
        else {
            var builder = new Builder_1.PayIntent.Builder();
            builder.setAmount(-Math.abs(request.getAmount()))
                .setTransactionType(sdk.remotepay.TransactionType.CREDIT)
                .setVaultedCard(request.getVaultedCard())
                .setExternalPaymentId(request.getExternalId());
            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);
            if (request.getDisablePrinting()) {
                transactionSettings.setCloverShouldHandleReceipts(request.getDisablePrinting());
            }
            if (request.getDisableRestartTransactionOnFail()) {
                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());
            }
            if (request.getSignatureEntryLocation()) {
                transactionSettings.setSignatureEntryLocation(request.getSignatureEntryLocation());
            }
            if (request.getSignatureThreshold()) {
                transactionSettings.setSignatureThreshold(request.getSignatureThreshold());
            }
            if (request.getDisableReceiptSelection()) {
                transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());
            }
            builder.setTransactionSettings(transactionSettings);
            var payIntent = builder.build();
            this.device.doTxStart(payIntent, null, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
        }
    };
    CloverConnector.prototype.retrievePendingPayments = function () {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onPendingPaymentsResponse(false, null, "Device connection Error", "In retrievePendingPayments: The Clover device is not connected.");
        }
        else {
            this.device.doRetrievePendingPayments();
        }
    };
    CloverConnector.prototype.readCardData = function (request) {
        if (!this.device || !this.isReady) {
            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In readCardData: The Clover device is not connected.");
        }
        else if (request == null) {
            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In readCardData: ReadCardDataRequest - The request that was passed in for processing is null.");
        }
        else {
            // create pay intent...
            var builder = new Builder_1.PayIntent.Builder();
            builder.setTransactionType(sdk.remotepay.TransactionType.DATA);
            builder.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);
            builder.setForceSwipePinEntry(request.getIsForceSwipePinEntry());
            var pi = builder.build();
            this.device.doReadCardData(pi);
        }
    };
    CloverConnector.prototype.sendMessageToActivity = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In sendMessageToActivity");
        }
        else if (request == null) {
            this.notifyInvalidData("In sendMessageToActivity: Invalid argument. Null is not allowed.");
        }
        else {
            this.device.doSendMessageToActivity(request.getAction(), request.getPayload());
        }
    };
    CloverConnector.prototype.retrievePayment = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In retrievePayment");
        }
        else if (request == null) {
            this.notifyInvalidData("In retrievePayment: Invalid argument. Null is not allowed.");
        }
        else if (!request.getExternalPaymentId()) {
            this.notifyInvalidData("In retrievePayment: RetrievePaymentRequest - The externalPaymentId is null.  It must be set.");
        }
        else {
            this.device.doRetrievePayment(request.getExternalPaymentId());
        }
    };
    CloverConnector.prototype.retrievePrinters = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In retrievePrinters");
        }
        else if (!request) {
            this.notifyInvalidData("In retrievePrinters: Invalid argument. Null is not allowed.");
        }
        else {
            this.device.doRetrievePrinters(request.getCategory());
        }
    };
    CloverConnector.prototype.retrievePrintJobStatus = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In retrievePrintJobStatus");
        }
        else if (!request || !request.getPrintRequestId()) {
            this.notifyInvalidData("In retrievePrintJobStatus: Invalid argument. Null is not allowed.");
        }
        else {
            this.device.doRetrievePrintJobStatus(request.getPrintRequestId());
        }
    };
    CloverConnector.prototype.closeout = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In closeout");
        }
        else {
            this.device.doCloseout(request.getAllowOpenTabs(), request.getBatchId());
        }
    };
    CloverConnector.prototype.cancel = function () {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In cancel");
        }
        else {
            this.invokeInputOption(CloverConnector.CANCEL_INPUT_OPTION);
        }
    };
    CloverConnector.prototype.printText = function (messages) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In printText");
        }
        else if (messages == null) {
            this.notifyInvalidData("In printText: Invalid argument. Null is not allowed.");
        }
        else {
            this.device.doPrintText(messages);
        }
    };
    CloverConnector.prototype.printImage = function (bitmap) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In printImage");
        }
        else if (bitmap == null) {
            this.notifyInvalidData("In printImage: Invalid argument.  Null is not allowed.");
        }
        else {
            this.device.doPrintImageObject(bitmap);
        }
    };
    CloverConnector.prototype.printImageFromURL = function (url) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In printImageFromURL");
        }
        else if (url == null) {
            this.notifyInvalidData("In printImageFromURL: Invalid argument.  Null is not allowed.");
        }
        else {
            this.device.doPrintImageUrl(url);
        }
    };
    CloverConnector.prototype.print = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In print");
        }
        else if (!request) {
            this.notifyInvalidData("In print: Invalid argument. Null is not allowed.");
        }
        else if (!this.validatePrintRequest(request)) {
            return;
        }
        else {
            if (request.getImage()) {
                if (Array.isArray(request.getImage()) && request.getImage().length > 1) {
                    this.notifyInvalidData("In print: Invalid argument. Only one image can be printed at a time in the current API.");
                }
                var singleOrArr = (Array.isArray(request.getImage()) ? request.getImage()[0] : request.getImage());
                this.device.doPrintImageObject(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());
            }
            else if (request.getText()) {
                this.device.doPrintText(request.getText(), request.getPrintRequestId(), request.getPrintDeviceId());
            }
            else if (request.getImageUrl()) {
                if (Array.isArray(request.getImageUrl()) && request.getImageUrl().length > 1) {
                    this.notifyInvalidData("In print: Invalid argument. Only one imageUrl can be printed at a time in the current API.");
                }
                var singleOrArr = (Array.isArray(request.getImageUrl()) ? request.getImageUrl()[0] : request.getImageUrl());
                this.device.doPrintImageUrl(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());
            }
            else {
                this.notifyInvalidData("In print: Invalid argument. PrintRequest element was not formatted correctly.");
            }
        }
    };
    CloverConnector.prototype.validatePrintRequest = function (request) {
        if (!request.getImage() && !request.getText() && !request.getImageUrl()) {
            this.notifyInvalidData("In validatePrintRequest: There are no items to print.");
            return false;
        }
        else if ((request.getImage() && request.getText()) ||
            (request.getImage() && request.getImageUrl()) ||
            (request.getText() && request.getImageUrl())) {
            this.notifyInvalidData("In validatePrintRequest: There are too may different kinds of items to print.  Can only have one.");
            return false;
        }
        else {
            return true;
        }
    };
    CloverConnector.prototype.showMessage = function (message) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In showMessage");
        }
        else if (message == null) {
            this.notifyInvalidData("In showMessage: Invalid argument.  Null is not allowed.");
        }
        else {
            this.device.doTerminalMessage(message);
        }
    };
    CloverConnector.prototype.showWelcomeScreen = function () {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In showWelcomeScreen");
        }
        else {
            this.device.doShowWelcomeScreen();
        }
    };
    CloverConnector.prototype.showThankYouScreen = function () {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In showThankYouScreen");
        }
        else {
            this.device.doShowThankYouScreen();
        }
    };
    /**
     * Incompatibility between sdks!  Old cloud had this.
     *
     * @deprecated
     *
     * @param orderId
     * @param paymentId
     */
    CloverConnector.prototype.showPaymentReceiptOptions = function (orderId, paymentId) {
        this.displayPaymentReceiptOptions(orderId, paymentId);
    };
    CloverConnector.prototype.displayPaymentReceiptOptions = function (orderId, paymentId) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In displayPaymentReceiptOptions");
        }
        else if (orderId == null) {
            this.notifyInvalidData("In displayPaymentReceiptOptions: Invalid argument.  The orderId cannot be null.");
        }
        else if (paymentId == null) {
            this.notifyInvalidData("In displayPaymentReceiptOptions: Invalid argument.  The paymentId cannot be null.");
        }
        else {
            this.device.doShowPaymentReceiptScreen(orderId, paymentId);
        }
    };
    CloverConnector.prototype.openCashDrawer = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In openCashDrawer");
        }
        else if (!request) {
            this.notifyInvalidData("In openCashDrawer: Invalid argument. The request cannot be null.");
        }
        else if (typeof request === "string") {
            this.device.doOpenCashDrawer(request);
        }
        else {
            this.device.doOpenCashDrawer(request.getReason(), request.getDeviceId());
        }
    };
    CloverConnector.prototype.showDisplayOrder = function (order) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In showDisplayOrder");
        }
        else if (order == null) {
            this.notifyInvalidData("In showDisplayOrder: Invalid argument.  The order cannot be null.");
        }
        else {
            this.device.doOrderUpdate(order, null);
        }
    };
    CloverConnector.prototype.removeDisplayOrder = function (order) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In removeDisplayOrder");
        }
        else if (order == null) {
            this.notifyInvalidData("In removeDisplayOrder: Invalid argument.  The order cannot be null.");
        }
        else {
            var dao = new sdk.order.operation.OrderDeletedOperation();
            dao.setId(order.getId());
            this.device.doOrderUpdate(order, dao);
        }
    };
    // I spoke to Hammer about this, there are no plans to implement it.
    CloverConnector.prototype.discountAddedToDisplayOrder = function (discount, order) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "discountAddedToDisplayOrder has not been implemented.");
    };
    // I spoke to Hammer about this, there are no plans to implement it.
    CloverConnector.prototype.discountRemovedFromDisplayOrder = function (discount, order) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "discountRemovedFromDisplayOrder has not been implemented.");
    };
    // I spoke to Hammer about this, there are no plans to implement it.
    CloverConnector.prototype.lineItemAddedToDisplayOrder = function (lineItem, order) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "lineItemAddedToDisplayOrder has not been implemented.");
    };
    // I spoke to Hammer about this, there are no plans to implement it.
    CloverConnector.prototype.lineItemRemovedFromDisplayOrder = function (lineItem, order) {
        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "lineItemRemovedFromDisplayOrder has not been implemented.");
    };
    CloverConnector.prototype.dispose = function () {
        this.broadcaster.clear();
        if (this.device) {
            this.device.dispose();
        }
    };
    CloverConnector.prototype.invokeInputOption = function (io) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In invokeInputOption");
        }
        else {
            this.device.doKeyPress(io.getKeyPress());
        }
    };
    CloverConnector.prototype.resetDevice = function () {
        this.lastRequest = null;
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In resetDevice");
        }
        else {
            this.device.doResetDevice();
        }
    };
    CloverConnector.prototype.retrieveDeviceStatus = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In retrieveDeviceStatus");
        }
        else {
            this.device.doRetrieveDeviceStatus(request);
        }
    };
    CloverConnector.prototype.getCardEntryMethods = function () {
        return this.cardEntryMethods;
    };
    CloverConnector.prototype.startCustomActivity = function (request) {
        if (!this.device || !this.isReady) {
            this.notifyDeviceNotConnected("In invokeInputOption");
        }
        else {
            this.device.doStartActivity(request.getAction(), request.getPayload(), request.getNonBlocking());
        }
    };
    CloverConnector.populateBaseResponse = function (response, success, result, reason, message) {
        response.setSuccess(success);
        response.setResult(result);
        response.setReason(reason);
        response.setMessage(message);
    };
    CloverConnector.populatePaymentResponse = function (response, success, result, payment, signature, reason, message) {
        CloverConnector.populateBaseResponse(response, success, result, reason, message);
        response.setPayment(payment);
        response.setSignature(signature);
        var cardTransaction = payment.getCardTransaction();
        if (cardTransaction) {
            var transactionType = cardTransaction.getType();
            response.setIsSale(sdk.payments.CardTransactionType.AUTH == transactionType &&
                sdk.payments.Result.SUCCESS == payment.getResult());
            response.setIsAuth(sdk.payments.CardTransactionType.PREAUTH == transactionType &&
                sdk.payments.Result.SUCCESS == payment.getResult());
            response.setIsPreAuth(sdk.payments.CardTransactionType.PREAUTH == transactionType &&
                sdk.payments.Result.AUTH == payment.getResult());
        }
    };
    CloverConnector.MAX_PAYLOAD_SIZE = 10000000; // maximum size of the payload of a full message.  if the payload exceeds this, the message will not be sent.
    return CloverConnector;
}());
exports.CloverConnector = CloverConnector;
(function (CloverConnector) {
    var TxTypeRequestInfo = (function () {
        function TxTypeRequestInfo() {
        }
        TxTypeRequestInfo.SALE_REQUEST = "SALE";
        TxTypeRequestInfo.AUTH_REQUEST = "AUTH";
        TxTypeRequestInfo.PREAUTH_REQUEST = "PREAUTH";
        TxTypeRequestInfo.CREDIT_REQUEST = "CREDIT";
        TxTypeRequestInfo.REFUND_REQUEST = "REFUND";
        return TxTypeRequestInfo;
    }());
    CloverConnector.TxTypeRequestInfo = TxTypeRequestInfo;
    var InnerDeviceObserver = (function () {
        function InnerDeviceObserver(cc) {
            // Create a logger
            this.logger = Logger_1.Logger.create();
            this.cloverConnector = cc;
        }
        InnerDeviceObserver.prototype.onTxState = function (txState) {
        };
        InnerDeviceObserver.prototype.getMessageTypeFromLastRequest = function (lastRequest) {
            if (lastRequest instanceof sdk.remotepay.PreAuthRequest) {
                return TxTypeRequestInfo.PREAUTH_REQUEST;
            }
            else if (lastRequest instanceof sdk.remotepay.AuthRequest) {
                return TxTypeRequestInfo.AUTH_REQUEST;
            }
            else if (lastRequest instanceof sdk.remotepay.SaleRequest) {
                return TxTypeRequestInfo.SALE_REQUEST;
            }
            else if (lastRequest instanceof sdk.remotepay.ManualRefundRequest) {
                return TxTypeRequestInfo.CREDIT_REQUEST;
            }
            return null;
        };
        InnerDeviceObserver.prototype.onTxStartResponse = function (result, externalId, requestInfo) {
            if (result == sdk.remotemessage.TxStartResponseResult.SUCCESS)
                return;
            var duplicate = (result == sdk.remotemessage.TxStartResponseResult.DUPLICATE);
            var code = duplicate ? sdk.remotepay.ResponseCode.CANCEL : sdk.remotepay.ResponseCode.FAIL;
            var message = duplicate ? "The provided transaction id of " + externalId + " has already been processed and cannot be resubmitted." : null;
            try {
                // The old (deprecated) way to get the type.  Here for backwards compatibility
                if (requestInfo == null) {
                    requestInfo = this.getMessageTypeFromLastRequest(this.cloverConnector.lastRequest);
                }
                // Use the requestInfo if it exists, to determine the request type
                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
                    var response = new sdk.remotepay.PreAuthResponse();
                    CloverConnector.populateBaseResponse(response, false, code, result, message);
                    this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
                }
                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
                    var response = new sdk.remotepay.AuthResponse();
                    CloverConnector.populateBaseResponse(response, false, code, result, message);
                    this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
                }
                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
                    var response = new sdk.remotepay.SaleResponse();
                    CloverConnector.populateBaseResponse(response, false, code, result, message);
                    this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
                }
                else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {
                    var response = new sdk.remotepay.ManualRefundResponse();
                    CloverConnector.populateBaseResponse(response, false, code, result, message);
                    this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
                }
                else {
                    this.logger.error("Could not determine request type. requestInfo = " + requestInfo + " lastRequest = " + this.cloverConnector.lastRequest);
                }
            }
            finally {
                this.cloverConnector.lastRequest = null;
            }
        };
        InnerDeviceObserver.prototype.onUiState = function (uiState, uiText, uiDirection, inputOptions) {
            var deviceEvent = new sdk.remotepay.CloverDeviceEvent();
            deviceEvent.setInputOptions(inputOptions);
            deviceEvent.setEventState(sdk.remotepay.DeviceEventState[uiState.toString()]);
            deviceEvent.setMessage(uiText);
            if (uiDirection == sdk.remotemessage.UiDirection.ENTER) {
                this.cloverConnector.broadcaster.notifyOnDeviceActivityStart(deviceEvent);
            }
            else if (uiDirection == sdk.remotemessage.UiDirection.EXIT) {
                this.cloverConnector.broadcaster.notifyOnDeviceActivityEnd(deviceEvent);
                if (uiState.toString() == sdk.remotepay.DeviceEventState.RECEIPT_OPTIONS.toString()) {
                    this.cloverConnector.device.doShowWelcomeScreen();
                }
            }
        };
        InnerDeviceObserver.prototype.onTipAdded = function (tip) {
            this.cloverConnector.broadcaster.notifyOnTipAdded(tip);
        };
        InnerDeviceObserver.prototype.onAuthTipAdjusted = function (resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess) {
            if (typeof resultStatusOrPaymentId == 'string') {
                if (messageOrSuccess) {
                    this.onAuthTipAdjustedHandler(resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess, sdk.remotepay.ResponseCode.SUCCESS, null, null);
                }
                else {
                    this.onAuthTipAdjustedHandler(resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess, sdk.remotepay.ResponseCode.FAIL, 'Failure', 'TipAdjustAuth failed to process for payment ID: ' + resultStatusOrPaymentId);
                }
            }
            else {
                this.onAuthTipAdjustedHandler(null, 0, false, resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess);
            }
        };
        InnerDeviceObserver.prototype.onAuthTipAdjustedHandler = function (paymentId, tipAmount, success, result, reason, message) {
            var response = new sdk.remotepay.TipAdjustAuthResponse();
            response.setPaymentId(paymentId);
            response.setTipAmount(tipAmount);
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            this.cloverConnector.broadcaster.notifyOnTipAdjustAuthResponse(response);
        };
        InnerDeviceObserver.prototype.onCashbackSelected = function (cashbackAmount) {
            //TODO: For future use
        };
        InnerDeviceObserver.prototype.onPartialAuth = function (partialAmount) {
            //TODO: For future use
        };
        InnerDeviceObserver.prototype.onFinishOkPayment = function (payment, signature, requestInfo) {
            try {
                this.cloverConnector.device.doShowThankYouScreen(); //need to do this first, so Listener implementation can replace the screen as desired
                var lastRequest = this.cloverConnector.lastRequest;
                this.cloverConnector.lastRequest = null;
                if (!requestInfo) {
                    // This is deprecated logic and should be removed at some point in the future
                    // when we are comfortable that there are no longer any backward compatibility issues
                    requestInfo = this.getMessageTypeFromLastRequest(lastRequest);
                }
                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
                    var response = new sdk.remotepay.PreAuthResponse();
                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
                    this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
                    this.cloverConnector.lastRequest = null;
                }
                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
                    var response = new sdk.remotepay.AuthResponse();
                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
                    this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
                    this.cloverConnector.lastRequest = null;
                }
                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
                    var response = new sdk.remotepay.SaleResponse();
                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
                    this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
                    this.cloverConnector.lastRequest = null;
                }
                else {
                    this.logger.error("Failed to pair this response: " + payment);
                }
            }
            finally {
                // do nothing for now...
            }
        };
        InnerDeviceObserver.prototype.onFinishOkCredit = function (credit) {
            try {
                this.cloverConnector.device.doShowWelcomeScreen();
                this.cloverConnector.lastRequest = null;
                var response = new sdk.remotepay.ManualRefundResponse();
                CloverConnector.populateBaseResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS);
                response.setCredit(credit);
                this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
            }
            finally {
            }
        };
        InnerDeviceObserver.prototype.onFinishOkRefund = function (refund) {
            try {
                this.cloverConnector.device.doShowWelcomeScreen();
                this.cloverConnector.lastRequest = null;
                // NOTE: these two lines can eventually be removed (once refunds have the orderRef populated correctly):
                var lastRefundResponse = this.lastPRR; //only needed for the order ID
                this.lastPRR = null;
                if (refund.getOrderRef() != null) {
                    var success = true;
                    var response = new sdk.remotepay.RefundPaymentResponse();
                    CloverConnector.populateBaseResponse(response, success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);
                    response.setOrderId(refund.getOrderRef().getId());
                    if (refund.getPayment()) {
                        response.setPaymentId(refund.getPayment().getId());
                    }
                    response.setRefund(refund);
                    this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
                }
                else {
                    if (lastRefundResponse && lastRefundResponse.getRefund().getId() == refund.getId()) {
                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(lastRefundResponse);
                    }
                    else {
                        var success = true;
                        var response = new sdk.remotepay.RefundPaymentResponse();
                        CloverConnector.populateBaseResponse(response, success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);
                        if (refund.getPayment()) {
                            response.setPaymentId(refund.getPayment().getId());
                        }
                        response.setRefund(refund);
                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
                    }
                }
            }
            finally {
            }
        };
        InnerDeviceObserver.prototype.onFinishOk = function (paymentCreditOrRefund, signature, requestInfo) {
            if (paymentCreditOrRefund instanceof sdk.payments.Payment /* && signature */) {
                this.onFinishOkPayment(paymentCreditOrRefund, signature, requestInfo);
            }
            else if (paymentCreditOrRefund instanceof sdk.payments.Credit) {
                this.onFinishOkCredit(paymentCreditOrRefund);
            }
            else {
                this.onFinishOkRefund(paymentCreditOrRefund);
            }
        };
        InnerDeviceObserver.prototype.onFinishCancel_rmm = function (result, reason, message, requestInfo) {
            try {
                if (this.cloverConnector.device) {
                    this.cloverConnector.device.doShowWelcomeScreen();
                }
                var lastReq = this.cloverConnector.lastRequest;
                this.cloverConnector.lastRequest = null;
                if (!requestInfo) {
                    // Backwards compatibility, attempt to get the message type from the last request.
                    requestInfo = this.getMessageTypeFromLastRequest(lastReq);
                }
                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
                    this.onFinishCancelPreAuth(result, reason, message);
                }
                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
                    this.onFinishCancelSale(result, reason, message);
                }
                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
                    this.onFinishCancelAuth(result, reason, message);
                }
                else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {
                    this.onFinishCancelManualRefund(result, reason, message);
                }
                else if (requestInfo == TxTypeRequestInfo.REFUND_REQUEST) {
                    this.onFinishCancelRefund(result, reason, message);
                }
                else {
                    // Complete any un-resolved payment refund requests.
                    if (this.lastPRR) {
                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(this.lastPRR);
                        this.lastPRR = null;
                    }
                    else {
                        if (!requestInfo) {
                            this.logger.error('onFinishCancel called, requestInfo was null, and ' +
                                'could not determine the type of the message from the last request', arguments);
                        }
                        else {
                            this.logger.error('onFinishCancel called, but could not determine how to respond!', arguments);
                        }
                    }
                }
            }
            finally {
                // do nothing
            }
        };
        InnerDeviceObserver.prototype.onFinishCancel = function (requestInfo) {
            this.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, null, null, requestInfo);
        };
        InnerDeviceObserver.prototype.onFinishCancelPreAuth = function (result, reason, message) {
            var response = new sdk.remotepay.PreAuthResponse();
            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The PreAuth Request was canceled.");
            this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
        };
        InnerDeviceObserver.prototype.onFinishCancelSale = function (result, reason, message) {
            var response = new sdk.remotepay.SaleResponse();
            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Sale Request was canceled.");
            this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
        };
        InnerDeviceObserver.prototype.onFinishCancelAuth = function (result, reason, message) {
            var response = new sdk.remotepay.AuthResponse();
            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Auth Request was canceled.");
            this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
        };
        InnerDeviceObserver.prototype.onFinishCancelManualRefund = function (result, reason, message) {
            var response = new sdk.remotepay.ManualRefundResponse();
            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Manual Refund Request was canceled.");
            this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
        };
        InnerDeviceObserver.prototype.onFinishCancelRefund = function (result, reason, message) {
            var response = new sdk.remotepay.RefundPaymentResponse();
            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Refund Request was canceled.");
            this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onVerifySignature = function (payment, signature) {
            var request = new InnerDeviceObserver.SVR(this.cloverConnector.device);
            request.setSignature(signature);
            request.setPayment(payment);
            this.cloverConnector.broadcaster.notifyOnVerifySignatureRequest(request);
        };
        InnerDeviceObserver.prototype.onConfirmPayment = function (payment, challenges) {
            var cpr = new sdk.remotepay.ConfirmPaymentRequest();
            cpr.setPayment(payment);
            cpr.setChallenges(challenges);
            this.cloverConnector.broadcaster.notifyOnConfirmPaymentRequest(cpr);
        };
        InnerDeviceObserver.prototype.onPaymentVoided = function (payment, voidReason, resultStatus, reason, message) {
            var success = (resultStatus == sdk.remotemessage.ResultStatus.SUCCESS);
            var result = (success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);
            reason = reason != null ? reason : result.toString();
            message = message ? message : "No extended information provided.";
            var response = new sdk.remotepay.VoidPaymentResponse();
            response.setPaymentId(payment != null ? payment.getId() : null);
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onPaymentVoided_responseCode = function (code, reason, message) {
            var success = (code == sdk.remotepay.ResponseCode.SUCCESS);
            reason = reason ? reason : code.toString();
            message = message ? message : "No extended information provided.";
            var response = new sdk.remotepay.VoidPaymentResponse();
            CloverConnector.populateBaseResponse(response, success, code, reason, message);
            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onKeyPressed = function (keyPress) {
            //TODO: For future use
        };
        InnerDeviceObserver.prototype.onPaymentRefundResponse = function (orderId, paymentId, refund, code, reason, message) {
            // hold the response for finishOk for the refund. See comments in onFinishOk(Refund)
            var success = (code == sdk.remotemessage.TxState.SUCCESS);
            var response = new sdk.remotepay.RefundPaymentResponse();
            CloverConnector.populateBaseResponse(response, success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);
            response.setOrderId(orderId);
            response.setPaymentId(paymentId);
            response.setRefund(refund);
            if (reason !== undefined) {
                response.setReason(reason.toString());
            }
            response.setMessage(message);
            //NOTE: While this is currently needed, we are attempting to move away from this requirement
            this.lastPRR = response; // set this so we have the appropriate information for when onFinish(Refund) is called
        };
        InnerDeviceObserver.prototype.onVaultCardResponse = function (vaultedCardOrSuccess, code, reason, message, vaultedCard) {
            if (vaultedCardOrSuccess instanceof sdk.payments.VaultedCard) {
                var success = (code == sdk.remotepay.ResponseCode.SUCCESS);
                this.onVaultCardResponse(success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL, null, null, vaultedCardOrSuccess);
            }
            else {
                this.cloverConnector.device.doShowWelcomeScreen();
                var response = new sdk.remotepay.VaultCardResponse();
                response.setCard(vaultedCard);
                CloverConnector.populateBaseResponse(response, vaultedCardOrSuccess, code, reason, message);
                this.cloverConnector.broadcaster.notifyOnVaultCardRespose(response);
            }
        };
        InnerDeviceObserver.prototype.onCapturePreAuth = function (statusOrCode, reason, paymentId, amount, tipAmount) {
            var success = (sdk.remotemessage.ResultStatus.SUCCESS == statusOrCode);
            var response = new sdk.remotepay.CapturePreAuthResponse();
            CloverConnector.populateBaseResponse(response, success, statusOrCode, reason);
            response.setPaymentId(paymentId);
            response.setAmount(amount);
            response.setTipAmount(tipAmount);
            this.cloverConnector.broadcaster.notifyOnCapturePreAuth(response);
        };
        InnerDeviceObserver.prototype.onCloseoutResponse = function (status, reason, batch) {
            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
            var result = (status == sdk.remotemessage.ResultStatus.SUCCESS ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL); //type is irrelevant, but we changed it for clarity sake
            var response = new sdk.remotepay.CloseoutResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason, null);
            response.setBatch(batch);
            this.cloverConnector.broadcaster.notifyCloseout(response);
        };
        InnerDeviceObserver.prototype.onCloseoutResponseHandler = function (batch, result, reason, message) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.CloseoutResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            response.setBatch(batch);
            this.cloverConnector.broadcaster.notifyCloseout(response);
        };
        InnerDeviceObserver.prototype.onDeviceDisconnected = function (device, message) {
            this.logger.debug('Disconnected ', message);
            this.cloverConnector.isReady = false;
            this.cloverConnector.broadcaster.notifyOnDisconnect(message);
        };
        InnerDeviceObserver.prototype.onDeviceConnected = function () {
            this.logger.debug('Connected');
            this.cloverConnector.isReady = false;
            this.cloverConnector.broadcaster.notifyOnConnect();
        };
        InnerDeviceObserver.prototype.onDeviceReady = function (device, drm) {
            this.logger.debug('Ready');
            this.cloverConnector.isReady = drm.getReady();
            // Build merchant info from the discoveryrequest
            var merchantInfo = new sdk.remotepay.MerchantInfo();
            merchantInfo.setMerchantID(drm.getMerchantId());
            merchantInfo.setMerchantMID(drm.getMerchantMId());
            merchantInfo.setMerchantName(drm.getMerchantName());
            var deviceInfo = new sdk.remotepay.DeviceInfo();
            merchantInfo.setDeviceInfo(deviceInfo);
            deviceInfo.setName(drm.getName());
            deviceInfo.setModel(drm.getModel());
            deviceInfo.setSerial(drm.getSerial());
            deviceInfo.setSupportsAcks(drm.getSupportsAcknowledgement());
            merchantInfo.setSupportsPreAuths(drm.getSupportsTipAdjust());
            merchantInfo.setSupportsManualRefunds(drm.getSupportsManualRefund());
            merchantInfo.setSupportsTipAdjust(drm.getSupportsTipAdjust());
            merchantInfo.setSupportsAuths(drm.getSupportsTipAdjust());
            merchantInfo.setSupportsVaultCards(drm.getSupportsManualRefund());
            this.cloverConnector.merchantInfo = merchantInfo;
            this.cloverConnector.device.setSupportsAcks(merchantInfo.getDeviceInfo().getSupportsAcks());
            if (drm.getReady()) {
                this.cloverConnector.broadcaster.notifyOnReady(merchantInfo);
            }
            else {
                this.cloverConnector.broadcaster.notifyOnConnect();
            }
        };
        InnerDeviceObserver.prototype.onDeviceError = function (errorEvent) {
            this.cloverConnector.broadcaster.notifyOnDeviceError(errorEvent);
        };
        // TODO: The Print Message objects are missing from the api
        InnerDeviceObserver.prototype.onPrintRefundPayment = function (payment, order, refund) {
            // this.cloverConnector.broadcaster.notifyOnPrintRefundPaymentReceipt(new PrintRefundPaymentReceiptMessage(payment, order, refund));
        };
        InnerDeviceObserver.prototype.onPrintMerchantReceipt = function (payment) {
            // this.cloverConnector.broadcaster.notifyOnPrintPaymentMerchantCopyReceipt(new PrintPaymentMerchantCopyReceiptMessage(payment));
        };
        InnerDeviceObserver.prototype.onPrintPaymentDecline = function (payment, reason) {
            // this.cloverConnector.broadcaster.notifyOnPrintPaymentDeclineReceipt(new PrintPaymentDeclineReceiptMessage(payment, reason));
        };
        InnerDeviceObserver.prototype.onPrintPayment = function (payment, order) {
            // this.cloverConnector.broadcaster.notifyOnPrintPaymentReceipt(new PrintPaymentReceiptMessage(payment, order));
        };
        InnerDeviceObserver.prototype.onPrintCredit = function (credit) {
            // this.cloverConnector.broadcaster.notifyOnPrintCreditReceipt(new PrintManualRefundReceiptMessage(credit));
        };
        InnerDeviceObserver.prototype.onPrintCreditDecline = function (credit, reason) {
            // this.cloverConnector.broadcaster.notifyOnPrintCreditDeclineReceipt(new PrintManualRefundDeclineReceiptMessage(credit, reason));
        };
        InnerDeviceObserver.prototype.onMessageAck = function (messageId) {
            // TODO: for future use
        };
        InnerDeviceObserver.prototype.onPendingPaymentsResponse = function (success, pendingPayments, reason, message) {
            var result = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.ERROR;
            var response = new sdk.remotepay.RetrievePendingPaymentsResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            if (pendingPayments) {
                response.setPendingPaymentEntries(pendingPayments);
            }
            else {
                this.cloverConnector.device.doShowWelcomeScreen();
            }
            this.cloverConnector.broadcaster.notifyOnRetrievePendingPaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onPendingPaymentsResponseHandler = function (success, pendingPayments, result, reason, message) {
            var response = new sdk.remotepay.RetrievePendingPaymentsResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            response.setPendingPaymentEntries(pendingPayments);
            this.cloverConnector.broadcaster.notifyOnRetrievePendingPaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onReadCardResponse = function (status, reason, cardData) {
            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
            if (success) {
                var response = new sdk.remotepay.ReadCardDataResponse();
                CloverConnector.populateBaseResponse(response, success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL, reason);
                response.setCardData(cardData);
                this.cloverConnector.device.doShowWelcomeScreen();
                this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);
            }
            else if (status == sdk.remotemessage.ResultStatus.CANCEL) {
                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.CANCEL, reason, '');
            }
            else {
                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, reason, '');
            }
        };
        InnerDeviceObserver.prototype.onMessageFromActivity = function (actionId, payload) {
            var message = new sdk.remotepay.MessageFromActivity();
            message.setAction(actionId);
            message.setPayload(payload);
            this.cloverConnector.broadcaster.notifyOnActivityMessage(message);
        };
        InnerDeviceObserver.prototype.onReadCardDataResponse = function (result, reason, message) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            this.cloverConnector.device.doShowWelcomeScreen();
            var response = new sdk.remotepay.ReadCardDataResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason, message);
            this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);
        };
        InnerDeviceObserver.prototype.onActivityResponse = function (status, payload, reason, actionId) {
            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
            var result = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.CANCEL;
            var response = new sdk.remotepay.CustomActivityResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason);
            response.setPayload(payload);
            response.setAction(actionId);
            this.cloverConnector.broadcaster.notifyOnActivityResponse(response);
        };
        InnerDeviceObserver.prototype.onDeviceStatusResponse = function (result, reason, state, data) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.RetrieveDeviceStatusResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason);
            response.setState(state);
            response.setData(data);
            this.cloverConnector.broadcaster.notifyOnRetrieveDeviceStatusResponse(response);
        };
        InnerDeviceObserver.prototype.onResetDeviceResponse = function (result, reason, state) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.ResetDeviceResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason);
            response.setState(state);
            this.cloverConnector.broadcaster.notifyOnResetDeviceResponse(response);
        };
        InnerDeviceObserver.prototype.onRetrievePaymentResponse = function (result, reason, externalPaymentId, queryStatus, payment) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.RetrievePaymentResponse();
            CloverConnector.populateBaseResponse(response, success, result, reason);
            response.setExternalPaymentId(externalPaymentId);
            response.setQueryStatus(queryStatus);
            response.setPayment(payment);
            this.cloverConnector.broadcaster.notifyOnRetrievePaymentResponse(response);
        };
        InnerDeviceObserver.prototype.onRetrievePrintersResponse = function (result, printers) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.RetrievePrintersResponse();
            CloverConnector.populateBaseResponse(response, success, result, null);
            response.setPrinters(printers);
            this.cloverConnector.broadcaster.notifyOnRetrievePrintersResponse(response);
        };
        InnerDeviceObserver.prototype.onPrintJobStatusResponse = function (result, printRequestId, printStatus) {
            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
            var response = new sdk.remotepay.PrintJobStatusResponse();
            CloverConnector.populateBaseResponse(response, success, result, printStatus);
            response.setStatus(printStatus);
            response.setPrintRequestId(printRequestId);
            this.cloverConnector.broadcaster.notifyOnPrintJobStatusResponse(response);
        };
        return InnerDeviceObserver;
    }());
    CloverConnector.InnerDeviceObserver = InnerDeviceObserver;
    (function (InnerDeviceObserver) {
        var SVR = (function (_super) {
            __extends(SVR, _super);
            function SVR(device) {
                var _this = _super.call(this) || this;
                _this.cloverDevice = device;
                return _this;
            }
            SVR.prototype.accept = function () {
                this.cloverDevice.doSignatureVerified(_super.prototype.getPayment.call(this), true);
            };
            SVR.prototype.reject = function () {
                this.cloverDevice.doSignatureVerified(_super.prototype.getPayment.call(this), false);
            };
            SVR.prototype.setSignature = function (signature) {
                _super.prototype.setSignature.call(this, signature);
            };
            SVR.prototype.setPayment = function (payment) {
                _super.prototype.setPayment.call(this, payment);
            };
            return SVR;
        }(sdk.remotepay.VerifySignatureRequest));
        InnerDeviceObserver.SVR = SVR;
    })(InnerDeviceObserver = CloverConnector.InnerDeviceObserver || (CloverConnector.InnerDeviceObserver = {}));
})(CloverConnector = exports.CloverConnector || (exports.CloverConnector = {}));
exports.CloverConnector = CloverConnector;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnector.js.map


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * WebSocket state.
 *
 *
 * </p>
 */
var WebSocketState;
(function (WebSocketState) {
    /**
     * This value does not exist in the web
     *
     * The initial state of a {@link WebSocket} instance.
     */
    // CREATED,
    /**
     * An <a href="https://tools.ietf.org/html/rfc6455#section-4">opening
     * handshake</a> is being performed.
     */
    WebSocketState[WebSocketState["CONNECTING"] = 0] = "CONNECTING";
    /**
     * The WebSocket connection is established ( the <a href=
     * "https://tools.ietf.org/html/rfc6455#section-4">opening handshake</a>
     * has succeeded) and usable.
     */
    WebSocketState[WebSocketState["OPEN"] = 1] = "OPEN";
    /**
     * A <a href="https://tools.ietf.org/html/rfc6455#section-7">closing
     * handshake</a> is being performed.
     */
    WebSocketState[WebSocketState["CLOSING"] = 2] = "CLOSING";
    /**
     * The WebSocket connection is closed.
     */
    WebSocketState[WebSocketState["CLOSED"] = 3] = "CLOSED";
})(WebSocketState = exports.WebSocketState || (exports.WebSocketState = {}));

//# sourceMappingURL=../../../maps/com/clover/websocket/WebSocketState.js.map


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var CardData = function() {
  this._class_ = CardData;
  this.track1 = undefined;
  this.track2 = undefined;
  this.track3 = undefined;
  this.encrypted = undefined;
  this.maskedTrack1 = undefined;
  this.maskedTrack2 = undefined;
  this.maskedTrack3 = undefined;
  this.pan = undefined;
  this.cardholderName = undefined;
  this.firstName = undefined;
  this.lastName = undefined;
  this.exp = undefined;
  this.last4 = undefined;
  this.first6 = undefined;
};


/**
* Set the field value
* The track1 data from the card.
*
* @memberof base.CardData
* @param {String} track1 
*/
CardData.prototype.setTrack1 = function(track1) {
  this.track1 = track1;
};

/**
* Get the field value
* The track1 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getTrack1 = function() {
  return this.track1;
};

/**
* Set the field value
* The track2 data from the card.
*
* @memberof base.CardData
* @param {String} track2 
*/
CardData.prototype.setTrack2 = function(track2) {
  this.track2 = track2;
};

/**
* Get the field value
* The track2 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getTrack2 = function() {
  return this.track2;
};

/**
* Set the field value
* The track3 data from the card.
*
* @memberof base.CardData
* @param {String} track3 
*/
CardData.prototype.setTrack3 = function(track3) {
  this.track3 = track3;
};

/**
* Get the field value
* The track3 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getTrack3 = function() {
  return this.track3;
};

/**
* Set the field value
* Indicates if the data is encrypted.
*
* @memberof base.CardData
* @param {Boolean} encrypted 
*/
CardData.prototype.setEncrypted = function(encrypted) {
  this.encrypted = encrypted;
};

/**
* Get the field value
* Indicates if the data is encrypted.
* @memberof base.CardData
* @return {Boolean} 
*/
CardData.prototype.getEncrypted = function() {
  return this.encrypted;
};

/**
* Set the field value
* The track1 data from the card.
*
* @memberof base.CardData
* @param {String} maskedTrack1 
*/
CardData.prototype.setMaskedTrack1 = function(maskedTrack1) {
  this.maskedTrack1 = maskedTrack1;
};

/**
* Get the field value
* The track1 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getMaskedTrack1 = function() {
  return this.maskedTrack1;
};

/**
* Set the field value
* The track2 data from the card.
*
* @memberof base.CardData
* @param {String} maskedTrack2 
*/
CardData.prototype.setMaskedTrack2 = function(maskedTrack2) {
  this.maskedTrack2 = maskedTrack2;
};

/**
* Get the field value
* The track2 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getMaskedTrack2 = function() {
  return this.maskedTrack2;
};

/**
* Set the field value
* The track3 data from the card.
*
* @memberof base.CardData
* @param {String} maskedTrack3 
*/
CardData.prototype.setMaskedTrack3 = function(maskedTrack3) {
  this.maskedTrack3 = maskedTrack3;
};

/**
* Get the field value
* The track3 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getMaskedTrack3 = function() {
  return this.maskedTrack3;
};

/**
* Set the field value
* The pan data from the card.
*
* @memberof base.CardData
* @param {String} pan 
*/
CardData.prototype.setPan = function(pan) {
  this.pan = pan;
};

/**
* Get the field value
* The pan data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getPan = function() {
  return this.pan;
};

/**
* Set the field value
* The cardholderName data from the card.
*
* @memberof base.CardData
* @param {String} cardholderName 
*/
CardData.prototype.setCardholderName = function(cardholderName) {
  this.cardholderName = cardholderName;
};

/**
* Get the field value
* The cardholderName data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getCardholderName = function() {
  return this.cardholderName;
};

/**
* Set the field value
* The firstName data from the card.
*
* @memberof base.CardData
* @param {String} firstName 
*/
CardData.prototype.setFirstName = function(firstName) {
  this.firstName = firstName;
};

/**
* Get the field value
* The firstName data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getFirstName = function() {
  return this.firstName;
};

/**
* Set the field value
* The lastName data from the card.
*
* @memberof base.CardData
* @param {String} lastName 
*/
CardData.prototype.setLastName = function(lastName) {
  this.lastName = lastName;
};

/**
* Get the field value
* The lastName data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getLastName = function() {
  return this.lastName;
};

/**
* Set the field value
* The exp data from the card.
*
* @memberof base.CardData
* @param {String} exp 
*/
CardData.prototype.setExp = function(exp) {
  this.exp = exp;
};

/**
* Get the field value
* The exp data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getExp = function() {
  return this.exp;
};

/**
* Set the field value
* The last4 data from the card.
*
* @memberof base.CardData
* @param {String} last4 
*/
CardData.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* The last4 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* The first6 data from the card.
*
* @memberof base.CardData
* @param {String} first6 
*/
CardData.prototype.setFirst6 = function(first6) {
  this.first6 = first6;
};

/**
* Get the field value
* The first6 data from the card.
* @memberof base.CardData
* @return {String} 
*/
CardData.prototype.getFirst6 = function() {
  return this.first6;
};

/**
* @memberof base.CardData
* @private
*/
CardData.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CardData.prototype.toString = function() {
  return JSON.stringify(this);
};

CardData._meta_ =  {fields:  {}};
CardData._meta_._class_ =  CardData;
CardData._meta_.fields["track1"] = {};
CardData._meta_.fields["track1"].type = String;
CardData._meta_.fields["track2"] = {};
CardData._meta_.fields["track2"].type = String;
CardData._meta_.fields["track3"] = {};
CardData._meta_.fields["track3"].type = String;
CardData._meta_.fields["encrypted"] = {};
CardData._meta_.fields["encrypted"].type = Boolean;
CardData._meta_.fields["maskedTrack1"] = {};
CardData._meta_.fields["maskedTrack1"].type = String;
CardData._meta_.fields["maskedTrack2"] = {};
CardData._meta_.fields["maskedTrack2"].type = String;
CardData._meta_.fields["maskedTrack3"] = {};
CardData._meta_.fields["maskedTrack3"].type = String;
CardData._meta_.fields["pan"] = {};
CardData._meta_.fields["pan"].type = String;
CardData._meta_.fields["cardholderName"] = {};
CardData._meta_.fields["cardholderName"].type = String;
CardData._meta_.fields["firstName"] = {};
CardData._meta_.fields["firstName"].type = String;
CardData._meta_.fields["lastName"] = {};
CardData._meta_.fields["lastName"].type = String;
CardData._meta_.fields["exp"] = {};
CardData._meta_.fields["exp"].type = String;
CardData._meta_.fields["last4"] = {};
CardData._meta_.fields["last4"].type = String;
CardData._meta_.fields["first6"] = {};
CardData._meta_.fields["first6"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CardData;
}



/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_VoidReason = __webpack_require__(14);
var base_ChallengeType = __webpack_require__(41);

/**
* @constructor
* @memberof base
*/
var Challenge = function() {
  this._class_ = Challenge;
  this.type = undefined;
  this.reason = undefined;
  this.message = undefined;
};


/**
* Set the field value
* The type of the challenge.
*
* @memberof base.Challenge
* @param {base.ChallengeType} type 
*/
Challenge.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* The type of the challenge.
* @memberof base.Challenge
* @return {base.ChallengeType} 
*/
Challenge.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
*
* @memberof base.Challenge
* @param {order.VoidReason} reason 
*/
Challenge.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
* @memberof base.Challenge
* @return {order.VoidReason} 
*/
Challenge.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* A default message that indicates what the challenge is in a user friendly format.
*
* @memberof base.Challenge
* @param {String} message 
*/
Challenge.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* A default message that indicates what the challenge is in a user friendly format.
* @memberof base.Challenge
* @return {String} 
*/
Challenge.prototype.getMessage = function() {
  return this.message;
};

/**
* @memberof base.Challenge
* @private
*/
Challenge.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Challenge.prototype.toString = function() {
  return JSON.stringify(this);
};

Challenge._meta_ =  {fields:  {}};
Challenge._meta_._class_ =  Challenge;
Challenge._meta_.fields["type"] = {};
Challenge._meta_.fields["type"].type = base_ChallengeType;
Challenge._meta_.fields["reason"] = {};
Challenge._meta_.fields["reason"].type = order_VoidReason;
Challenge._meta_.fields["message"] = {};
Challenge._meta_.fields["message"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = Challenge;
}



/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof base
* @enum {string}
*/
ChallengeType = {
  DUPLICATE_CHALLENGE : "DUPLICATE_CHALLENGE",
  OFFLINE_CHALLENGE : "OFFLINE_CHALLENGE"
};


//
// Expose the module.
//
if (true) {
module.exports = ChallengeType;
}



/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var PendingPaymentEntry = function() {
  this._class_ = PendingPaymentEntry;
  this.amount = undefined;
  this.paymentId = undefined;
};


/**
* Set the field value
* Total amount paid
*
* @memberof base.PendingPaymentEntry
* @param {Number} amount must be a long integer
*/
PendingPaymentEntry.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof base.PendingPaymentEntry
* @return {Number} must be a long integer
*/
PendingPaymentEntry.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof base.PendingPaymentEntry
* @param {String} paymentId 
*/
PendingPaymentEntry.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof base.PendingPaymentEntry
* @return {String} 
*/
PendingPaymentEntry.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* @memberof base.PendingPaymentEntry
* @private
*/
PendingPaymentEntry.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PendingPaymentEntry.prototype.toString = function() {
  return JSON.stringify(this);
};

PendingPaymentEntry._meta_ =  {fields:  {}};
PendingPaymentEntry._meta_._class_ =  PendingPaymentEntry;
PendingPaymentEntry._meta_.fields["amount"] = {};
PendingPaymentEntry._meta_.fields["amount"].type = Number;
PendingPaymentEntry._meta_.fields["paymentId"] = {};
PendingPaymentEntry._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PendingPaymentEntry;
}



/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var customers_EmailAddress = __webpack_require__(83);
var customers_PhoneNumber = __webpack_require__(84);
var customers_CustomerMetadata = __webpack_require__(85);
var base_Reference = __webpack_require__(2);
var customers_Address = __webpack_require__(80);
var customers_Card = __webpack_require__(81);

/**
* @constructor
* @memberof customers
*/
var Customer = function() {
  this._class_ = Customer;
  this.id = undefined;
  this.orderRef = undefined;
  this.merchant = undefined;
  this.firstName = undefined;
  this.lastName = undefined;
  this.marketingAllowed = undefined;
  this.customerSince = undefined;
  this.orders = undefined;
  this.addresses = undefined;
  this.emailAddresses = undefined;
  this.phoneNumbers = undefined;
  this.cards = undefined;
  this.metadata = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof customers.Customer
* @param {String} id 
*/
Customer.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof customers.Customer
* @return {String} 
*/
Customer.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the customer is associated
*
* @memberof customers.Customer
* @param {base.Reference} orderRef 
*/
Customer.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the customer is associated
* @memberof customers.Customer
* @return {base.Reference} 
*/
Customer.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* The merchant that is associated with this customer
*
* @memberof customers.Customer
* @param {base.Reference} merchant 
*/
Customer.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* The merchant that is associated with this customer
* @memberof customers.Customer
* @return {base.Reference} 
*/
Customer.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* First/given name of the customer
*
* @memberof customers.Customer
* @param {Null|String} firstName 
*/
Customer.prototype.setFirstName = function(firstName) {
  this.firstName = firstName;
};

/**
* Get the field value
* First/given name of the customer
* @memberof customers.Customer
* @return {Null|String} 
*/
Customer.prototype.getFirstName = function() {
  return this.firstName;
};

/**
* Set the field value
* Last name/surname of the customer
*
* @memberof customers.Customer
* @param {Null|String} lastName 
*/
Customer.prototype.setLastName = function(lastName) {
  this.lastName = lastName;
};

/**
* Get the field value
* Last name/surname of the customer
* @memberof customers.Customer
* @return {Null|String} 
*/
Customer.prototype.getLastName = function() {
  return this.lastName;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Boolean} marketingAllowed 
*/
Customer.prototype.setMarketingAllowed = function(marketingAllowed) {
  this.marketingAllowed = marketingAllowed;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Boolean} 
*/
Customer.prototype.getMarketingAllowed = function() {
  return this.marketingAllowed;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Number} customerSince must be a long integer
*/
Customer.prototype.setCustomerSince = function(customerSince) {
  this.customerSince = customerSince;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Number} must be a long integer
*/
Customer.prototype.getCustomerSince = function() {
  return this.customerSince;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Array.<base.Reference>} orders An array of 
*/
Customer.prototype.setOrders = function(orders) {
  this.orders = orders;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Array.<base.Reference>} An array of 
*/
Customer.prototype.getOrders = function() {
  return this.orders;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Array.<customers.Address>} addresses An array of 
*/
Customer.prototype.setAddresses = function(addresses) {
  this.addresses = addresses;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Array.<customers.Address>} An array of 
*/
Customer.prototype.getAddresses = function() {
  return this.addresses;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Array.<customers.EmailAddress>} emailAddresses An array of 
*/
Customer.prototype.setEmailAddresses = function(emailAddresses) {
  this.emailAddresses = emailAddresses;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Array.<customers.EmailAddress>} An array of 
*/
Customer.prototype.getEmailAddresses = function() {
  return this.emailAddresses;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Array.<customers.PhoneNumber>} phoneNumbers An array of 
*/
Customer.prototype.setPhoneNumbers = function(phoneNumbers) {
  this.phoneNumbers = phoneNumbers;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Array.<customers.PhoneNumber>} An array of 
*/
Customer.prototype.getPhoneNumbers = function() {
  return this.phoneNumbers;
};

/**
* Set the field value
* @memberof customers.Customer
* @param {Array.<customers.Card>} cards An array of 
*/
Customer.prototype.setCards = function(cards) {
  this.cards = cards;
};

/**
* Get the field value
* @memberof customers.Customer
* @return {Array.<customers.Card>} An array of 
*/
Customer.prototype.getCards = function() {
  return this.cards;
};

/**
* Set the field value
* Additional information about the customer.
*
* @memberof customers.Customer
* @param {customers.CustomerMetadata} metadata 
*/
Customer.prototype.setMetadata = function(metadata) {
  this.metadata = metadata;
};

/**
* Get the field value
* Additional information about the customer.
* @memberof customers.Customer
* @return {customers.CustomerMetadata} 
*/
Customer.prototype.getMetadata = function() {
  return this.metadata;
};

/**
* @memberof customers.Customer
* @private
*/
Customer.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Customer.prototype.toString = function() {
  return JSON.stringify(this);
};

Customer._meta_ =  {fields:  {}};
Customer._meta_._class_ =  Customer;
Customer._meta_.fields["id"] = {};
Customer._meta_.fields["id"].type = String;
Customer._meta_.fields["orderRef"] = {};
Customer._meta_.fields["orderRef"].type = base_Reference;
Customer._meta_.fields["merchant"] = {};
Customer._meta_.fields["merchant"].type = base_Reference;
Customer._meta_.fields["firstName"] = {};
Customer._meta_.fields["firstName"].type = String;
Customer._meta_.fields["lastName"] = {};
Customer._meta_.fields["lastName"].type = String;
Customer._meta_.fields["marketingAllowed"] = {};
Customer._meta_.fields["marketingAllowed"].type = Boolean;
Customer._meta_.fields["customerSince"] = {};
Customer._meta_.fields["customerSince"].type = Number;
Customer._meta_.fields["orders"] = {};
Customer._meta_.fields["orders"].type = Array;
Customer._meta_.fields["orders"].elementType = base_Reference;
Customer._meta_.fields["addresses"] = {};
Customer._meta_.fields["addresses"].type = Array;
Customer._meta_.fields["addresses"].elementType = customers_Address;
Customer._meta_.fields["emailAddresses"] = {};
Customer._meta_.fields["emailAddresses"].type = Array;
Customer._meta_.fields["emailAddresses"].elementType = customers_EmailAddress;
Customer._meta_.fields["phoneNumbers"] = {};
Customer._meta_.fields["phoneNumbers"].type = Array;
Customer._meta_.fields["phoneNumbers"].elementType = customers_PhoneNumber;
Customer._meta_.fields["cards"] = {};
Customer._meta_.fields["cards"].type = Array;
Customer._meta_.fields["cards"].elementType = customers_Card;
Customer._meta_.fields["metadata"] = {};
Customer._meta_.fields["metadata"].type = customers_CustomerMetadata;

//
// Expose the module.
//
if (true) {
module.exports = Customer;
}



/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof employees
* @enum {string}
*/
AccountRole = {
  ADMIN : "ADMIN",
  MANAGER : "MANAGER",
  EMPLOYEE : "EMPLOYEE"
};


//
// Expose the module.
//
if (true) {
module.exports = AccountRole;
}



/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var Option = function() {
  this._class_ = Option;
  this.id = undefined;
  this.name = undefined;
  this.attribute = undefined;
  this.items = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Option
* @param {String} id 
*/
Option.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Option
* @return {String} 
*/
Option.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the option
*
* @memberof inventory.Option
* @param {String} name 
*/
Option.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the option
* @memberof inventory.Option
* @return {String} 
*/
Option.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof inventory.Option
* @param {base.Reference} attribute 
*/
Option.prototype.setAttribute = function(attribute) {
  this.attribute = attribute;
};

/**
* Get the field value
* @memberof inventory.Option
* @return {base.Reference} 
*/
Option.prototype.getAttribute = function() {
  return this.attribute;
};

/**
* Set the field value
* Items associated with this option
*
* @memberof inventory.Option
* @param {Array.<base.Reference>} items An array of 
*/
Option.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* Items associated with this option
* @memberof inventory.Option
* @return {Array.<base.Reference>} An array of 
*/
Option.prototype.getItems = function() {
  return this.items;
};

/**
* @memberof inventory.Option
* @private
*/
Option.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Option.prototype.toString = function() {
  return JSON.stringify(this);
};

Option._meta_ =  {fields:  {}};
Option._meta_._class_ =  Option;
Option._meta_.fields["id"] = {};
Option._meta_.fields["id"].type = String;
Option._meta_.fields["name"] = {};
Option._meta_.fields["name"].type = String;
Option._meta_.fields["attribute"] = {};
Option._meta_.fields["attribute"].type = base_Reference;
Option._meta_.fields["items"] = {};
Option._meta_.fields["items"].type = Array;
Option._meta_.fields["items"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Option;
}



/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var Modifier = function() {
  this._class_ = Modifier;
  this.id = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.price = 0;
  this.modifierGroup = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Modifier
* @param {String} id 
*/
Modifier.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Modifier
* @return {String} 
*/
Modifier.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the modifier
*
* @memberof inventory.Modifier
* @param {String} name 
*/
Modifier.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the modifier
* @memberof inventory.Modifier
* @return {String} 
*/
Modifier.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Alternate name of the modifier
*
* @memberof inventory.Modifier
* @param {String} alternateName 
*/
Modifier.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* Alternate name of the modifier
* @memberof inventory.Modifier
* @return {String} 
*/
Modifier.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* Additional cost when used
*
* @memberof inventory.Modifier
* @param {Number} price must be a long integer
*/
Modifier.prototype.setPrice = function(price) {
  this.price = price;
};

/**
* Get the field value
* Additional cost when used
* @memberof inventory.Modifier
* @return {Number} must be a long integer
*/
Modifier.prototype.getPrice = function() {
  return this.price;
};

/**
* Set the field value
* @memberof inventory.Modifier
* @param {base.Reference} modifierGroup 
*/
Modifier.prototype.setModifierGroup = function(modifierGroup) {
  this.modifierGroup = modifierGroup;
};

/**
* Get the field value
* @memberof inventory.Modifier
* @return {base.Reference} 
*/
Modifier.prototype.getModifierGroup = function() {
  return this.modifierGroup;
};

/**
* @memberof inventory.Modifier
* @private
*/
Modifier.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Modifier.prototype.toString = function() {
  return JSON.stringify(this);
};

Modifier._meta_ =  {fields:  {}};
Modifier._meta_._class_ =  Modifier;
Modifier._meta_.fields["id"] = {};
Modifier._meta_.fields["id"].type = String;
Modifier._meta_.fields["name"] = {};
Modifier._meta_.fields["name"].type = String;
Modifier._meta_.fields["alternateName"] = {};
Modifier._meta_.fields["alternateName"].type = String;
Modifier._meta_.fields["price"] = {};
Modifier._meta_.fields["price"].type = Number;
Modifier._meta_.fields["modifierGroup"] = {};
Modifier._meta_.fields["modifierGroup"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Modifier;
}



/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof order
*/
var Discount = function() {
  this._class_ = Discount;
  this.id = undefined;
  this.orderRef = undefined;
  this.lineItemRef = undefined;
  this.discount = undefined;
  this.approver = undefined;
  this.name = undefined;
  this.amount = undefined;
  this.percentage = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.Discount
* @param {String} id 
*/
Discount.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.Discount
* @return {String} 
*/
Discount.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the discount is associated
*
* @memberof order.Discount
* @param {Null|base.Reference} orderRef 
*/
Discount.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the discount is associated
* @memberof order.Discount
* @return {Null|base.Reference} 
*/
Discount.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* The lineItem with which the discount is associated
*
* @memberof order.Discount
* @param {Null|base.Reference} lineItemRef 
*/
Discount.prototype.setLineItemRef = function(lineItemRef) {
  this.lineItemRef = lineItemRef;
};

/**
* Get the field value
* The lineItem with which the discount is associated
* @memberof order.Discount
* @return {Null|base.Reference} 
*/
Discount.prototype.getLineItemRef = function() {
  return this.lineItemRef;
};

/**
* Set the field value
* If this item is based on a standard discount, this will point to the appropriate inventory.Discount
*
* @memberof order.Discount
* @param {Null|base.Reference} discount 
*/
Discount.prototype.setDiscount = function(discount) {
  this.discount = discount;
};

/**
* Get the field value
* If this item is based on a standard discount, this will point to the appropriate inventory.Discount
* @memberof order.Discount
* @return {Null|base.Reference} 
*/
Discount.prototype.getDiscount = function() {
  return this.discount;
};

/**
* Set the field value
* The person that authorized a discount
*
* @memberof order.Discount
* @param {Null|base.Reference} approver 
*/
Discount.prototype.setApprover = function(approver) {
  this.approver = approver;
};

/**
* Get the field value
* The person that authorized a discount
* @memberof order.Discount
* @return {Null|base.Reference} 
*/
Discount.prototype.getApprover = function() {
  return this.approver;
};

/**
* Set the field value
* Name of the discount
*
* @memberof order.Discount
* @param {String} name 
*/
Discount.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the discount
* @memberof order.Discount
* @return {String} 
*/
Discount.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
*
* @memberof order.Discount
* @param {Null|Number} amount must be a long integer
*/
Discount.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
* @memberof order.Discount
* @return {Null|Number} must be a long integer
*/
Discount.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Discount amount in percent
*
* @memberof order.Discount
* @param {Null|Number} percentage must be a long integer
*/
Discount.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
};

/**
* Get the field value
* Discount amount in percent
* @memberof order.Discount
* @return {Null|Number} must be a long integer
*/
Discount.prototype.getPercentage = function() {
  return this.percentage;
};

/**
* @memberof order.Discount
* @private
*/
Discount.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Discount.prototype.toString = function() {
  return JSON.stringify(this);
};

Discount._meta_ =  {fields:  {}};
Discount._meta_._class_ =  Discount;
Discount._meta_.fields["id"] = {};
Discount._meta_.fields["id"].type = String;
Discount._meta_.fields["orderRef"] = {};
Discount._meta_.fields["orderRef"].type = base_Reference;
Discount._meta_.fields["lineItemRef"] = {};
Discount._meta_.fields["lineItemRef"].type = base_Reference;
Discount._meta_.fields["discount"] = {};
Discount._meta_.fields["discount"].type = base_Reference;
Discount._meta_.fields["approver"] = {};
Discount._meta_.fields["approver"].type = base_Reference;
Discount._meta_.fields["name"] = {};
Discount._meta_.fields["name"].type = String;
Discount._meta_.fields["amount"] = {};
Discount._meta_.fields["amount"].type = Number;
Discount._meta_.fields["percentage"] = {};
Discount._meta_.fields["percentage"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Discount;
}



/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_DisplayDiscount = __webpack_require__(30);
var order_DisplayModification = __webpack_require__(104);

/**
* @constructor
* @memberof order
*/
var DisplayLineItem = function() {
  this._class_ = DisplayLineItem;
  this.id = undefined;
  this.orderId = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.price = undefined;
  this.unitPrice = undefined;
  this.quantity = undefined;
  this.unitQuantity = undefined;
  this.note = undefined;
  this.printed = "false";
  this.binName = undefined;
  this.userData = undefined;
  this.discounts = undefined;
  this.discountAmount = undefined;
  this.exchanged = "false";
  this.exchangedAmount = undefined;
  this.modifications = undefined;
  this.refunded = "false";
  this.refundedAmount = undefined;
  this.percent = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.DisplayLineItem
* @param {String} id 
*/
DisplayLineItem.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.DisplayLineItem
* @return {String} 
*/
DisplayLineItem.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the line item is associated
*
* @memberof order.DisplayLineItem
* @param {String} orderId 
*/
DisplayLineItem.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* The order with which the line item is associated
* @memberof order.DisplayLineItem
* @return {String} 
*/
DisplayLineItem.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Line item name
*
* @memberof order.DisplayLineItem
* @param {Null|String} name 
*/
DisplayLineItem.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Line item name
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Alternate name of the line item
*
* @memberof order.DisplayLineItem
* @param {Null|String} alternateName 
*/
DisplayLineItem.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* Alternate name of the line item
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* Formatted total price of the line item
*
* @memberof order.DisplayLineItem
* @param {String} price 
*/
DisplayLineItem.prototype.setPrice = function(price) {
  this.price = price;
};

/**
* Get the field value
* Formatted total price of the line item
* @memberof order.DisplayLineItem
* @return {String} 
*/
DisplayLineItem.prototype.getPrice = function() {
  return this.price;
};

/**
* Set the field value
* Formatted unit price in cases if applicable
*
* @memberof order.DisplayLineItem
* @param {String} unitPrice 
*/
DisplayLineItem.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};

/**
* Get the field value
* Formatted unit price in cases if applicable
* @memberof order.DisplayLineItem
* @return {String} 
*/
DisplayLineItem.prototype.getUnitPrice = function() {
  return this.unitPrice;
};

/**
* Set the field value
* Formatted quantity
*
* @memberof order.DisplayLineItem
* @param {Null|String} quantity 
*/
DisplayLineItem.prototype.setQuantity = function(quantity) {
  this.quantity = quantity;
};

/**
* Get the field value
* Formatted quantity
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getQuantity = function() {
  return this.quantity;
};

/**
* Set the field value
* Formatted unit quantity - such as 10 @ $1.99/oz
*
* @memberof order.DisplayLineItem
* @param {Null|String} unitQuantity 
*/
DisplayLineItem.prototype.setUnitQuantity = function(unitQuantity) {
  this.unitQuantity = unitQuantity;
};

/**
* Get the field value
* Formatted unit quantity - such as 10 @ $1.99/oz
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getUnitQuantity = function() {
  return this.unitQuantity;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Null|String} note 
*/
DisplayLineItem.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Boolean} printed 
*/
DisplayLineItem.prototype.setPrinted = function(printed) {
  this.printed = printed;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Boolean} 
*/
DisplayLineItem.prototype.getPrinted = function() {
  return this.printed;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Null|String} binName 
*/
DisplayLineItem.prototype.setBinName = function(binName) {
  this.binName = binName;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getBinName = function() {
  return this.binName;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Null|String} userData 
*/
DisplayLineItem.prototype.setUserData = function(userData) {
  this.userData = userData;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getUserData = function() {
  return this.userData;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Array.<order.DisplayDiscount>} discounts An array of 
*/
DisplayLineItem.prototype.setDiscounts = function(discounts) {
  this.discounts = discounts;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Array.<order.DisplayDiscount>} An array of 
*/
DisplayLineItem.prototype.getDiscounts = function() {
  return this.discounts;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Null|String} discountAmount 
*/
DisplayLineItem.prototype.setDiscountAmount = function(discountAmount) {
  this.discountAmount = discountAmount;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getDiscountAmount = function() {
  return this.discountAmount;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Boolean} exchanged 
*/
DisplayLineItem.prototype.setExchanged = function(exchanged) {
  this.exchanged = exchanged;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Boolean} 
*/
DisplayLineItem.prototype.getExchanged = function() {
  return this.exchanged;
};

/**
* Set the field value
* Formatted exchanged amount
*
* @memberof order.DisplayLineItem
* @param {Null|String} exchangedAmount 
*/
DisplayLineItem.prototype.setExchangedAmount = function(exchangedAmount) {
  this.exchangedAmount = exchangedAmount;
};

/**
* Get the field value
* Formatted exchanged amount
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getExchangedAmount = function() {
  return this.exchangedAmount;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Array.<order.DisplayModification>} modifications An array of 
*/
DisplayLineItem.prototype.setModifications = function(modifications) {
  this.modifications = modifications;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Array.<order.DisplayModification>} An array of 
*/
DisplayLineItem.prototype.getModifications = function() {
  return this.modifications;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Boolean} refunded 
*/
DisplayLineItem.prototype.setRefunded = function(refunded) {
  this.refunded = refunded;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Boolean} 
*/
DisplayLineItem.prototype.getRefunded = function() {
  return this.refunded;
};

/**
* Set the field value
* Formatted refunded amount
*
* @memberof order.DisplayLineItem
* @param {Null|String} refundedAmount 
*/
DisplayLineItem.prototype.setRefundedAmount = function(refundedAmount) {
  this.refundedAmount = refundedAmount;
};

/**
* Get the field value
* Formatted refunded amount
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getRefundedAmount = function() {
  return this.refundedAmount;
};

/**
* Set the field value
* @memberof order.DisplayLineItem
* @param {Null|String} percent 
*/
DisplayLineItem.prototype.setPercent = function(percent) {
  this.percent = percent;
};

/**
* Get the field value
* @memberof order.DisplayLineItem
* @return {Null|String} 
*/
DisplayLineItem.prototype.getPercent = function() {
  return this.percent;
};

/**
* @memberof order.DisplayLineItem
* @private
*/
DisplayLineItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayLineItem.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayLineItem._meta_ =  {fields:  {}};
DisplayLineItem._meta_._class_ =  DisplayLineItem;
DisplayLineItem._meta_.fields["id"] = {};
DisplayLineItem._meta_.fields["id"].type = String;
DisplayLineItem._meta_.fields["orderId"] = {};
DisplayLineItem._meta_.fields["orderId"].type = String;
DisplayLineItem._meta_.fields["name"] = {};
DisplayLineItem._meta_.fields["name"].type = String;
DisplayLineItem._meta_.fields["alternateName"] = {};
DisplayLineItem._meta_.fields["alternateName"].type = String;
DisplayLineItem._meta_.fields["price"] = {};
DisplayLineItem._meta_.fields["price"].type = String;
DisplayLineItem._meta_.fields["unitPrice"] = {};
DisplayLineItem._meta_.fields["unitPrice"].type = String;
DisplayLineItem._meta_.fields["quantity"] = {};
DisplayLineItem._meta_.fields["quantity"].type = String;
DisplayLineItem._meta_.fields["unitQuantity"] = {};
DisplayLineItem._meta_.fields["unitQuantity"].type = String;
DisplayLineItem._meta_.fields["note"] = {};
DisplayLineItem._meta_.fields["note"].type = String;
DisplayLineItem._meta_.fields["printed"] = {};
DisplayLineItem._meta_.fields["printed"].type = Boolean;
DisplayLineItem._meta_.fields["binName"] = {};
DisplayLineItem._meta_.fields["binName"].type = String;
DisplayLineItem._meta_.fields["userData"] = {};
DisplayLineItem._meta_.fields["userData"].type = String;
DisplayLineItem._meta_.fields["discounts"] = {};
DisplayLineItem._meta_.fields["discounts"].type = Array;
DisplayLineItem._meta_.fields["discounts"].elementType = order_DisplayDiscount;
DisplayLineItem._meta_.fields["discountAmount"] = {};
DisplayLineItem._meta_.fields["discountAmount"].type = String;
DisplayLineItem._meta_.fields["exchanged"] = {};
DisplayLineItem._meta_.fields["exchanged"].type = Boolean;
DisplayLineItem._meta_.fields["exchangedAmount"] = {};
DisplayLineItem._meta_.fields["exchangedAmount"].type = String;
DisplayLineItem._meta_.fields["modifications"] = {};
DisplayLineItem._meta_.fields["modifications"].type = Array;
DisplayLineItem._meta_.fields["modifications"].elementType = order_DisplayModification;
DisplayLineItem._meta_.fields["refunded"] = {};
DisplayLineItem._meta_.fields["refunded"].type = Boolean;
DisplayLineItem._meta_.fields["refundedAmount"] = {};
DisplayLineItem._meta_.fields["refundedAmount"].type = String;
DisplayLineItem._meta_.fields["percent"] = {};
DisplayLineItem._meta_.fields["percent"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DisplayLineItem;
}



/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var customers_Customer = __webpack_require__(43);
var payments_Authorization = __webpack_require__(108);
var order_Discount = __webpack_require__(47);
var order_PayType = __webpack_require__(116);
var order_LineItem = __webpack_require__(28);
var order_OrderType = __webpack_require__(57);
var payments_Payment = __webpack_require__(4);
var base_Reference = __webpack_require__(2);
var base_ServiceCharge = __webpack_require__(79);
var order_OrderTaxRate = __webpack_require__(117);
var payments_Refund = __webpack_require__(10);
var payments_Credit = __webpack_require__(16);

/** The Order object is at the core of Clover’s transaction data. Almost every transaction either creates or updates an Order. When an order is created or updated via one of the Clover SDKs, the order data is automatically synchronized between the Clover Server and the merchant’s Clover devices. */
/**
* @constructor
* @memberof order
*/
var Order = function() {
  this._class_ = Order;
  this.id = undefined;
  this.currency = undefined;
  this.customerId = undefined;
  this.customerUuid = undefined;
  this.orderTypeId = undefined;
  this.customers = undefined;
  this.employee = undefined;
  this.total = undefined;
  this.title = undefined;
  this.note = undefined;
  this.orderType = undefined;
  this.taxRemoved = false;
  this.isVat = undefined;
  this.state = undefined;
  this.manualTransaction = undefined;
  this.groupLineItems = undefined;
  this.testMode = undefined;
  this.payType = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.modifiedTime = undefined;
  this.deletedTimestamp = undefined;
  this.serviceCharge = undefined;
  this.discounts = undefined;
  this.lineItems = undefined;
  this.taxRates = undefined;
  this.payments = undefined;
  this.refunds = undefined;
  this.credits = undefined;
  this.voids = undefined;
  this.preAuths = undefined;
  this.device = undefined;
  this.authorizations = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.Order
* @param {String} id 
*/
Order.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.Order
* @return {String} 
*/
Order.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Currency of this order. For example, "USD"
*
* @memberof order.Order
* @param {String} currency 
*/
Order.prototype.setCurrency = function(currency) {
  this.currency = currency;
};

/**
* Get the field value
* Currency of this order. For example, "USD"
* @memberof order.Order
* @return {String} 
*/
Order.prototype.getCurrency = function() {
  return this.currency;
};

/**
* Set the field value
* @memberof order.Order
* @param {Number} customerId must be a long integer
*/
Order.prototype.setCustomerId = function(customerId) {
  this.customerId = customerId;
};

/**
* Get the field value
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getCustomerId = function() {
  return this.customerId;
};

/**
* Set the field value
* @memberof order.Order
* @param {String} customerUuid 
*/
Order.prototype.setCustomerUuid = function(customerUuid) {
  this.customerUuid = customerUuid;
};

/**
* Get the field value
* @memberof order.Order
* @return {String} 
*/
Order.prototype.getCustomerUuid = function() {
  return this.customerUuid;
};

/**
* Set the field value
* @memberof order.Order
* @param {Number} orderTypeId must be a long integer
*/
Order.prototype.setOrderTypeId = function(orderTypeId) {
  this.orderTypeId = orderTypeId;
};

/**
* Get the field value
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getOrderTypeId = function() {
  return this.orderTypeId;
};

/**
* Set the field value
* List of customers associated with this order.
*
* @memberof order.Order
* @param {Array.<customers.Customer>} customers An array of 
*/
Order.prototype.setCustomers = function(customers) {
  this.customers = customers;
};

/**
* Get the field value
* List of customers associated with this order.
* @memberof order.Order
* @return {Array.<customers.Customer>} An array of 
*/
Order.prototype.getCustomers = function() {
  return this.customers;
};

/**
* Set the field value
* The employee who took this order
*
* @memberof order.Order
* @param {Null|base.Reference} employee 
*/
Order.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee who took this order
* @memberof order.Order
* @return {Null|base.Reference} 
*/
Order.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* Total price of the order in cents
*
* @memberof order.Order
* @param {Null|Number} total must be a long integer
*/
Order.prototype.setTotal = function(total) {
  this.total = total;
};

/**
* Get the field value
* Total price of the order in cents
* @memberof order.Order
* @return {Null|Number} must be a long integer
*/
Order.prototype.getTotal = function() {
  return this.total;
};

/**
* Set the field value
* @memberof order.Order
* @param {Null|String} title 
*/
Order.prototype.setTitle = function(title) {
  this.title = title;
};

/**
* Get the field value
* @memberof order.Order
* @return {Null|String} 
*/
Order.prototype.getTitle = function() {
  return this.title;
};

/**
* Set the field value
* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
*
* @memberof order.Order
* @param {Null|String} note 
*/
Order.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
* @memberof order.Order
* @return {Null|String} 
*/
Order.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* @memberof order.Order
* @param {Null|order.OrderType} orderType 
*/
Order.prototype.setOrderType = function(orderType) {
  this.orderType = orderType;
};

/**
* Get the field value
* @memberof order.Order
* @return {Null|order.OrderType} 
*/
Order.prototype.getOrderType = function() {
  return this.orderType;
};

/**
* Set the field value
* If true then this order should not have taxes applied to it
*
* @memberof order.Order
* @param {Boolean} taxRemoved 
*/
Order.prototype.setTaxRemoved = function(taxRemoved) {
  this.taxRemoved = taxRemoved;
};

/**
* Get the field value
* If true then this order should not have taxes applied to it
* @memberof order.Order
* @return {Boolean} 
*/
Order.prototype.getTaxRemoved = function() {
  return this.taxRemoved;
};

/**
* Set the field value
* This order was created by merchant with VAT enabled.
*
* @memberof order.Order
* @param {Boolean} isVat 
*/
Order.prototype.setIsVat = function(isVat) {
  this.isVat = isVat;
};

/**
* Get the field value
* This order was created by merchant with VAT enabled.
* @memberof order.Order
* @return {Boolean} 
*/
Order.prototype.getIsVat = function() {
  return this.isVat;
};

/**
* Set the field value
* A String generally describing the state of this Order. The value null indicates an empty Order that is not displayed in user interfaces. Other value such as "open" and "locked" are not checked or enforced by client or server and thus are not useful for making any logical decisions about this Order.
*
* @memberof order.Order
* @param {Null|String} state 
*/
Order.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* A String generally describing the state of this Order. The value null indicates an empty Order that is not displayed in user interfaces. Other value such as "open" and "locked" are not checked or enforced by client or server and thus are not useful for making any logical decisions about this Order.
* @memberof order.Order
* @return {Null|String} 
*/
Order.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* Whether this order represents a manual transaction. A manual transaction is a transaction that has an arbitrary amount defined and is not associated with any inventory items. For example, the Clover Sale App and Clover Manual Transaction App create manual transactions. A manual transactions will have a single associated line item to hold the sale amount, but the generated receipt will display this differently to indicate that it is not considered a typical order with inventory items.
*
* @memberof order.Order
* @param {Boolean} manualTransaction 
*/
Order.prototype.setManualTransaction = function(manualTransaction) {
  this.manualTransaction = manualTransaction;
};

/**
* Get the field value
* Whether this order represents a manual transaction. A manual transaction is a transaction that has an arbitrary amount defined and is not associated with any inventory items. For example, the Clover Sale App and Clover Manual Transaction App create manual transactions. A manual transactions will have a single associated line item to hold the sale amount, but the generated receipt will display this differently to indicate that it is not considered a typical order with inventory items.
* @memberof order.Order
* @return {Boolean} 
*/
Order.prototype.getManualTransaction = function() {
  return this.manualTransaction;
};

/**
* Set the field value
* Whether similar line items should be grouped together on the receipt that this order generates. Item "similarity" is based on items having matching values for a set of properties including price, modifiers, and discounts.
*
* @memberof order.Order
* @param {Boolean} groupLineItems 
*/
Order.prototype.setGroupLineItems = function(groupLineItems) {
  this.groupLineItems = groupLineItems;
};

/**
* Get the field value
* Whether similar line items should be grouped together on the receipt that this order generates. Item "similarity" is based on items having matching values for a set of properties including price, modifiers, and discounts.
* @memberof order.Order
* @return {Boolean} 
*/
Order.prototype.getGroupLineItems = function() {
  return this.groupLineItems;
};

/**
* Set the field value
* Whether this order was created in test mode. Payments made against test orders are not processed. Test mode orders can be deleted from the Orders App on the merchant's device or web dashboard (https://www.clover.com/orders/m/{mId}/orders). They will also be deleted when the device sends a POST to the /v2/merchant/{mId}/orders/delete_all_tests endpoint.
*
* @memberof order.Order
* @param {Boolean} testMode 
*/
Order.prototype.setTestMode = function(testMode) {
  this.testMode = testMode;
};

/**
* Get the field value
* Whether this order was created in test mode. Payments made against test orders are not processed. Test mode orders can be deleted from the Orders App on the merchant's device or web dashboard (https://www.clover.com/orders/m/{mId}/orders). They will also be deleted when the device sends a POST to the /v2/merchant/{mId}/orders/delete_all_tests endpoint.
* @memberof order.Order
* @return {Boolean} 
*/
Order.prototype.getTestMode = function() {
  return this.testMode;
};

/**
* Set the field value
* Possible values: SPLIT_GUEST, SPLIT_ITEM, SPLIT_CUSTOM, FULL. During the payment flow, if the user chooses to split the payment for this order, this field will be set to one of the SPLIT_* values to indicate how the full amount should be split. If the user chooses to pay for the order in full with one payment, then this field will be FULL.
*
* @memberof order.Order
* @param {order.PayType} payType 
*/
Order.prototype.setPayType = function(payType) {
  this.payType = payType;
};

/**
* Get the field value
* Possible values: SPLIT_GUEST, SPLIT_ITEM, SPLIT_CUSTOM, FULL. During the payment flow, if the user chooses to split the payment for this order, this field will be set to one of the SPLIT_* values to indicate how the full amount should be split. If the user chooses to pay for the order in full with one payment, then this field will be FULL.
* @memberof order.Order
* @return {order.PayType} 
*/
Order.prototype.getPayType = function() {
  return this.payType;
};

/**
* Set the field value
* Creation timestamp
*
* @memberof order.Order
* @param {Number} createdTime must be a long integer
*/
Order.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Creation timestamp
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* The time at which the client created this order
*
* @memberof order.Order
* @param {Number} clientCreatedTime must be a long integer
*/
Order.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time at which the client created this order
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* Last modified time of the order
*
* @memberof order.Order
* @param {Number} modifiedTime must be a long integer
*/
Order.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* Last modified time of the order
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* Set the field value
* @memberof order.Order
* @param {Number} deletedTimestamp must be a long integer
*/
Order.prototype.setDeletedTimestamp = function(deletedTimestamp) {
  this.deletedTimestamp = deletedTimestamp;
};

/**
* Get the field value
* @memberof order.Order
* @return {Number} must be a long integer
*/
Order.prototype.getDeletedTimestamp = function() {
  return this.deletedTimestamp;
};

/**
* Set the field value
* Optional service charge (gratuity) applied to this order
*
* @memberof order.Order
* @param {Null|base.ServiceCharge} serviceCharge 
*/
Order.prototype.setServiceCharge = function(serviceCharge) {
  this.serviceCharge = serviceCharge;
};

/**
* Get the field value
* Optional service charge (gratuity) applied to this order
* @memberof order.Order
* @return {Null|base.ServiceCharge} 
*/
Order.prototype.getServiceCharge = function() {
  return this.serviceCharge;
};

/**
* Set the field value
* Discounts applied to this order
*
* @memberof order.Order
* @param {Array.<order.Discount>} discounts An array of 
*/
Order.prototype.setDiscounts = function(discounts) {
  this.discounts = discounts;
};

/**
* Get the field value
* Discounts applied to this order
* @memberof order.Order
* @return {Array.<order.Discount>} An array of 
*/
Order.prototype.getDiscounts = function() {
  return this.discounts;
};

/**
* Set the field value
* Line items associated with this order
*
* @memberof order.Order
* @param {Array.<order.LineItem>} lineItems An array of 
*/
Order.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* Line items associated with this order
* @memberof order.Order
* @return {Array.<order.LineItem>} An array of 
*/
Order.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* @memberof order.Order
* @param {Array.<order.OrderTaxRate>} taxRates An array of 
*/
Order.prototype.setTaxRates = function(taxRates) {
  this.taxRates = taxRates;
};

/**
* Get the field value
* @memberof order.Order
* @return {Array.<order.OrderTaxRate>} An array of 
*/
Order.prototype.getTaxRates = function() {
  return this.taxRates;
};

/**
* Set the field value
* Payments that were made for this order. If multiple payments were made, then the payType field should reflect the method used to split the total amount.
*
* @memberof order.Order
* @param {Array.<payments.Payment>} payments An array of 
*/
Order.prototype.setPayments = function(payments) {
  this.payments = payments;
};

/**
* Get the field value
* Payments that were made for this order. If multiple payments were made, then the payType field should reflect the method used to split the total amount.
* @memberof order.Order
* @return {Array.<payments.Payment>} An array of 
*/
Order.prototype.getPayments = function() {
  return this.payments;
};

/**
* Set the field value
* Refunds that were made for this order
*
* @memberof order.Order
* @param {Array.<payments.Refund>} refunds An array of 
*/
Order.prototype.setRefunds = function(refunds) {
  this.refunds = refunds;
};

/**
* Get the field value
* Refunds that were made for this order
* @memberof order.Order
* @return {Array.<payments.Refund>} An array of 
*/
Order.prototype.getRefunds = function() {
  return this.refunds;
};

/**
* Set the field value
* Credits associated with this order.
*
* @memberof order.Order
* @param {Array.<payments.Credit>} credits An array of 
*/
Order.prototype.setCredits = function(credits) {
  this.credits = credits;
};

/**
* Get the field value
* Credits associated with this order.
* @memberof order.Order
* @return {Array.<payments.Credit>} An array of 
*/
Order.prototype.getCredits = function() {
  return this.credits;
};

/**
* Set the field value
* Voided payments associated with this order
*
* @memberof order.Order
* @param {Array.<payments.Payment>} voids An array of 
*/
Order.prototype.setVoids = function(voids) {
  this.voids = voids;
};

/**
* Get the field value
* Voided payments associated with this order
* @memberof order.Order
* @return {Array.<payments.Payment>} An array of 
*/
Order.prototype.getVoids = function() {
  return this.voids;
};

/**
* Set the field value
* Pre-authorizations associated with this order
*
* @memberof order.Order
* @param {Array.<payments.Payment>} preAuths An array of 
*/
Order.prototype.setPreAuths = function(preAuths) {
  this.preAuths = preAuths;
};

/**
* Get the field value
* Pre-authorizations associated with this order
* @memberof order.Order
* @return {Array.<payments.Payment>} An array of 
*/
Order.prototype.getPreAuths = function() {
  return this.preAuths;
};

/**
* Set the field value
* Device which created the order
*
* @memberof order.Order
* @param {base.Reference|Null} device 
*/
Order.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which created the order
* @memberof order.Order
* @return {base.Reference|Null} 
*/
Order.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* Card authorizations associated with this order
*
* @memberof order.Order
* @param {Array.<payments.Authorization>} authorizations An array of 
*/
Order.prototype.setAuthorizations = function(authorizations) {
  this.authorizations = authorizations;
};

/**
* Get the field value
* Card authorizations associated with this order
* @memberof order.Order
* @return {Array.<payments.Authorization>} An array of 
*/
Order.prototype.getAuthorizations = function() {
  return this.authorizations;
};

/**
* @memberof order.Order
* @private
*/
Order.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Order.prototype.toString = function() {
  return JSON.stringify(this);
};

Order._meta_ =  {fields:  {}};
Order._meta_._class_ =  Order;
Order._meta_.fields["id"] = {};
Order._meta_.fields["id"].type = String;
Order._meta_.fields["currency"] = {};
Order._meta_.fields["currency"].type = String;
Order._meta_.fields["customerId"] = {};
Order._meta_.fields["customerId"].type = Number;
Order._meta_.fields["customerUuid"] = {};
Order._meta_.fields["customerUuid"].type = String;
Order._meta_.fields["orderTypeId"] = {};
Order._meta_.fields["orderTypeId"].type = Number;
Order._meta_.fields["customers"] = {};
Order._meta_.fields["customers"].type = Array;
Order._meta_.fields["customers"].elementType = customers_Customer;
Order._meta_.fields["employee"] = {};
Order._meta_.fields["employee"].type = base_Reference;
Order._meta_.fields["total"] = {};
Order._meta_.fields["total"].type = Number;
Order._meta_.fields["title"] = {};
Order._meta_.fields["title"].type = String;
Order._meta_.fields["note"] = {};
Order._meta_.fields["note"].type = String;
Order._meta_.fields["orderType"] = {};
Order._meta_.fields["orderType"].type = order_OrderType;
Order._meta_.fields["taxRemoved"] = {};
Order._meta_.fields["taxRemoved"].type = Boolean;
Order._meta_.fields["isVat"] = {};
Order._meta_.fields["isVat"].type = Boolean;
Order._meta_.fields["state"] = {};
Order._meta_.fields["state"].type = String;
Order._meta_.fields["manualTransaction"] = {};
Order._meta_.fields["manualTransaction"].type = Boolean;
Order._meta_.fields["groupLineItems"] = {};
Order._meta_.fields["groupLineItems"].type = Boolean;
Order._meta_.fields["testMode"] = {};
Order._meta_.fields["testMode"].type = Boolean;
Order._meta_.fields["payType"] = {};
Order._meta_.fields["payType"].type = order_PayType;
Order._meta_.fields["createdTime"] = {};
Order._meta_.fields["createdTime"].type = Number;
Order._meta_.fields["clientCreatedTime"] = {};
Order._meta_.fields["clientCreatedTime"].type = Number;
Order._meta_.fields["modifiedTime"] = {};
Order._meta_.fields["modifiedTime"].type = Number;
Order._meta_.fields["deletedTimestamp"] = {};
Order._meta_.fields["deletedTimestamp"].type = Number;
Order._meta_.fields["serviceCharge"] = {};
Order._meta_.fields["serviceCharge"].type = base_ServiceCharge;
Order._meta_.fields["discounts"] = {};
Order._meta_.fields["discounts"].type = Array;
Order._meta_.fields["discounts"].elementType = order_Discount;
Order._meta_.fields["lineItems"] = {};
Order._meta_.fields["lineItems"].type = Array;
Order._meta_.fields["lineItems"].elementType = order_LineItem;
Order._meta_.fields["taxRates"] = {};
Order._meta_.fields["taxRates"].type = Array;
Order._meta_.fields["taxRates"].elementType = order_OrderTaxRate;
Order._meta_.fields["payments"] = {};
Order._meta_.fields["payments"].type = Array;
Order._meta_.fields["payments"].elementType = payments_Payment;
Order._meta_.fields["refunds"] = {};
Order._meta_.fields["refunds"].type = Array;
Order._meta_.fields["refunds"].elementType = payments_Refund;
Order._meta_.fields["credits"] = {};
Order._meta_.fields["credits"].type = Array;
Order._meta_.fields["credits"].elementType = payments_Credit;
Order._meta_.fields["voids"] = {};
Order._meta_.fields["voids"].type = Array;
Order._meta_.fields["voids"].elementType = payments_Payment;
Order._meta_.fields["preAuths"] = {};
Order._meta_.fields["preAuths"].type = Array;
Order._meta_.fields["preAuths"].elementType = payments_Payment;
Order._meta_.fields["device"] = {};
Order._meta_.fields["device"].type = base_Reference;
Order._meta_.fields["authorizations"] = {};
Order._meta_.fields["authorizations"].type = Array;
Order._meta_.fields["authorizations"].elementType = payments_Authorization;

//
// Expose the module.
//
if (true) {
module.exports = Order;
}



/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
The expected values of the payment.result and credit.result fields
* @memberof payments
* @enum {string}
*/
Result = {
  SUCCESS : "SUCCESS",
  FAIL : "FAIL",
  INITIATED : "INITIATED",
  VOIDED : "VOIDED",
  VOIDING : "VOIDING",
  VOID_FAILED : "VOID_FAILED",
  AUTH : "AUTH",
  AUTH_COMPLETED : "AUTH_COMPLETED"
};


//
// Expose the module.
//
if (true) {
module.exports = Result;
}



/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var DCCInfo = function() {
  this._class_ = DCCInfo;
  this.inquiryRateId = undefined;
  this.dccApplied = undefined;
  this.foreignCurrencyCode = undefined;
  this.foreignAmount = undefined;
  this.exchangeRate = undefined;
  this.marginRatePercentage = undefined;
  this.exchangeRateSourceName = undefined;
  this.exchangeRateSourceTimeStamp = undefined;
  this.paymentRef = undefined;
  this.creditRef = undefined;
};


/**
* Set the field value
* Inquiry Rate ID (IPG)
*
* @memberof payments.DCCInfo
* @param {Number} inquiryRateId must be a long integer
*/
DCCInfo.prototype.setInquiryRateId = function(inquiryRateId) {
  this.inquiryRateId = inquiryRateId;
};

/**
* Get the field value
* Inquiry Rate ID (IPG)
* @memberof payments.DCCInfo
* @return {Number} must be a long integer
*/
DCCInfo.prototype.getInquiryRateId = function() {
  return this.inquiryRateId;
};

/**
* Set the field value
* Flag indicating whether DCC was applied on this txn
*
* @memberof payments.DCCInfo
* @param {Boolean} dccApplied 
*/
DCCInfo.prototype.setDccApplied = function(dccApplied) {
  this.dccApplied = dccApplied;
};

/**
* Get the field value
* Flag indicating whether DCC was applied on this txn
* @memberof payments.DCCInfo
* @return {Boolean} 
*/
DCCInfo.prototype.getDccApplied = function() {
  return this.dccApplied;
};

/**
* Set the field value
* Foreign currency code
*
* @memberof payments.DCCInfo
* @param {String} foreignCurrencyCode 
*/
DCCInfo.prototype.setForeignCurrencyCode = function(foreignCurrencyCode) {
  this.foreignCurrencyCode = foreignCurrencyCode;
};

/**
* Get the field value
* Foreign currency code
* @memberof payments.DCCInfo
* @return {String} 
*/
DCCInfo.prototype.getForeignCurrencyCode = function() {
  return this.foreignCurrencyCode;
};

/**
* Set the field value
* Foreign (transaction) amount
*
* @memberof payments.DCCInfo
* @param {Number} foreignAmount must be a long integer
*/
DCCInfo.prototype.setForeignAmount = function(foreignAmount) {
  this.foreignAmount = foreignAmount;
};

/**
* Get the field value
* Foreign (transaction) amount
* @memberof payments.DCCInfo
* @return {Number} must be a long integer
*/
DCCInfo.prototype.getForeignAmount = function() {
  return this.foreignAmount;
};

/**
* Set the field value
* Exchange Rate
*
* @memberof payments.DCCInfo
* @param {Number} exchangeRate must be a double
*/
DCCInfo.prototype.setExchangeRate = function(exchangeRate) {
  this.exchangeRate = exchangeRate;
};

/**
* Get the field value
* Exchange Rate
* @memberof payments.DCCInfo
* @return {Number} must be a double
*/
DCCInfo.prototype.getExchangeRate = function() {
  return this.exchangeRate;
};

/**
* Set the field value
* Margin Rate Percentage
*
* @memberof payments.DCCInfo
* @param {String} marginRatePercentage 
*/
DCCInfo.prototype.setMarginRatePercentage = function(marginRatePercentage) {
  this.marginRatePercentage = marginRatePercentage;
};

/**
* Get the field value
* Margin Rate Percentage
* @memberof payments.DCCInfo
* @return {String} 
*/
DCCInfo.prototype.getMarginRatePercentage = function() {
  return this.marginRatePercentage;
};

/**
* Set the field value
* Exchange Rate Source Name
*
* @memberof payments.DCCInfo
* @param {String} exchangeRateSourceName 
*/
DCCInfo.prototype.setExchangeRateSourceName = function(exchangeRateSourceName) {
  this.exchangeRateSourceName = exchangeRateSourceName;
};

/**
* Get the field value
* Exchange Rate Source Name
* @memberof payments.DCCInfo
* @return {String} 
*/
DCCInfo.prototype.getExchangeRateSourceName = function() {
  return this.exchangeRateSourceName;
};

/**
* Set the field value
* Exchange Rate Source Timestamp
*
* @memberof payments.DCCInfo
* @param {String} exchangeRateSourceTimeStamp 
*/
DCCInfo.prototype.setExchangeRateSourceTimeStamp = function(exchangeRateSourceTimeStamp) {
  this.exchangeRateSourceTimeStamp = exchangeRateSourceTimeStamp;
};

/**
* Get the field value
* Exchange Rate Source Timestamp
* @memberof payments.DCCInfo
* @return {String} 
*/
DCCInfo.prototype.getExchangeRateSourceTimeStamp = function() {
  return this.exchangeRateSourceTimeStamp;
};

/**
* Set the field value
* The payment with which this DCC info is associated
*
* @memberof payments.DCCInfo
* @param {base.Reference} paymentRef 
*/
DCCInfo.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which this DCC info is associated
* @memberof payments.DCCInfo
* @return {base.Reference} 
*/
DCCInfo.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* The credit (manual refund) with which this DCC info is associated
*
* @memberof payments.DCCInfo
* @param {base.Reference} creditRef 
*/
DCCInfo.prototype.setCreditRef = function(creditRef) {
  this.creditRef = creditRef;
};

/**
* Get the field value
* The credit (manual refund) with which this DCC info is associated
* @memberof payments.DCCInfo
* @return {base.Reference} 
*/
DCCInfo.prototype.getCreditRef = function() {
  return this.creditRef;
};

/**
* @memberof payments.DCCInfo
* @private
*/
DCCInfo.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DCCInfo.prototype.toString = function() {
  return JSON.stringify(this);
};

DCCInfo._meta_ =  {fields:  {}};
DCCInfo._meta_._class_ =  DCCInfo;
DCCInfo._meta_.fields["inquiryRateId"] = {};
DCCInfo._meta_.fields["inquiryRateId"].type = Number;
DCCInfo._meta_.fields["dccApplied"] = {};
DCCInfo._meta_.fields["dccApplied"].type = Boolean;
DCCInfo._meta_.fields["foreignCurrencyCode"] = {};
DCCInfo._meta_.fields["foreignCurrencyCode"].type = String;
DCCInfo._meta_.fields["foreignAmount"] = {};
DCCInfo._meta_.fields["foreignAmount"].type = Number;
DCCInfo._meta_.fields["exchangeRate"] = {};
DCCInfo._meta_.fields["exchangeRate"].type = Number;
DCCInfo._meta_.fields["marginRatePercentage"] = {};
DCCInfo._meta_.fields["marginRatePercentage"].type = String;
DCCInfo._meta_.fields["exchangeRateSourceName"] = {};
DCCInfo._meta_.fields["exchangeRateSourceName"].type = String;
DCCInfo._meta_.fields["exchangeRateSourceTimeStamp"] = {};
DCCInfo._meta_.fields["exchangeRateSourceTimeStamp"].type = String;
DCCInfo._meta_.fields["paymentRef"] = {};
DCCInfo._meta_.fields["paymentRef"].type = base_Reference;
DCCInfo._meta_.fields["creditRef"] = {};
DCCInfo._meta_.fields["creditRef"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = DCCInfo;
}



/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_IdType = __webpack_require__(111);

/**
* @constructor
* @memberof payments
*/
var CashAdvanceCustomerIdentification = function() {
  this._class_ = CashAdvanceCustomerIdentification;
  this.idType = undefined;
  this.serialNumber = undefined;
  this.maskedSerialNumber = undefined;
  this.encryptedSerialNumber = undefined;
  this.expirationDate = undefined;
  this.issuingState = undefined;
  this.issuingCountry = undefined;
  this.customerName = undefined;
  this.addressStreet1 = undefined;
  this.addressStreet2 = undefined;
  this.addressCity = undefined;
  this.addressState = undefined;
  this.addressZipCode = undefined;
  this.addressCountry = undefined;
};


/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {payments.IdType} idType 
*/
CashAdvanceCustomerIdentification.prototype.setIdType = function(idType) {
  this.idType = idType;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {payments.IdType} 
*/
CashAdvanceCustomerIdentification.prototype.getIdType = function() {
  return this.idType;
};

/**
* Set the field value
* Identification serial number
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} serialNumber 
*/
CashAdvanceCustomerIdentification.prototype.setSerialNumber = function(serialNumber) {
  this.serialNumber = serialNumber;
};

/**
* Get the field value
* Identification serial number
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getSerialNumber = function() {
  return this.serialNumber;
};

/**
* Set the field value
* Masked identification serial number
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} maskedSerialNumber 
*/
CashAdvanceCustomerIdentification.prototype.setMaskedSerialNumber = function(maskedSerialNumber) {
  this.maskedSerialNumber = maskedSerialNumber;
};

/**
* Get the field value
* Masked identification serial number
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getMaskedSerialNumber = function() {
  return this.maskedSerialNumber;
};

/**
* Set the field value
* Encrypted identification serial number
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} encryptedSerialNumber 
*/
CashAdvanceCustomerIdentification.prototype.setEncryptedSerialNumber = function(encryptedSerialNumber) {
  this.encryptedSerialNumber = encryptedSerialNumber;
};

/**
* Get the field value
* Encrypted identification serial number
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getEncryptedSerialNumber = function() {
  return this.encryptedSerialNumber;
};

/**
* Set the field value
* Expiration date in format MMDDYYYY
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} expirationDate 
*/
CashAdvanceCustomerIdentification.prototype.setExpirationDate = function(expirationDate) {
  this.expirationDate = expirationDate;
};

/**
* Get the field value
* Expiration date in format MMDDYYYY
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getExpirationDate = function() {
  return this.expirationDate;
};

/**
* Set the field value
* State in which identification was issued
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} issuingState 
*/
CashAdvanceCustomerIdentification.prototype.setIssuingState = function(issuingState) {
  this.issuingState = issuingState;
};

/**
* Get the field value
* State in which identification was issued
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getIssuingState = function() {
  return this.issuingState;
};

/**
* Set the field value
* Country in which identification was issued
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} issuingCountry 
*/
CashAdvanceCustomerIdentification.prototype.setIssuingCountry = function(issuingCountry) {
  this.issuingCountry = issuingCountry;
};

/**
* Get the field value
* Country in which identification was issued
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getIssuingCountry = function() {
  return this.issuingCountry;
};

/**
* Set the field value
* Full customer name
*
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} customerName 
*/
CashAdvanceCustomerIdentification.prototype.setCustomerName = function(customerName) {
  this.customerName = customerName;
};

/**
* Get the field value
* Full customer name
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getCustomerName = function() {
  return this.customerName;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressStreet1 
*/
CashAdvanceCustomerIdentification.prototype.setAddressStreet1 = function(addressStreet1) {
  this.addressStreet1 = addressStreet1;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressStreet1 = function() {
  return this.addressStreet1;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressStreet2 
*/
CashAdvanceCustomerIdentification.prototype.setAddressStreet2 = function(addressStreet2) {
  this.addressStreet2 = addressStreet2;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressStreet2 = function() {
  return this.addressStreet2;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressCity 
*/
CashAdvanceCustomerIdentification.prototype.setAddressCity = function(addressCity) {
  this.addressCity = addressCity;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressCity = function() {
  return this.addressCity;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressState 
*/
CashAdvanceCustomerIdentification.prototype.setAddressState = function(addressState) {
  this.addressState = addressState;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressState = function() {
  return this.addressState;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressZipCode 
*/
CashAdvanceCustomerIdentification.prototype.setAddressZipCode = function(addressZipCode) {
  this.addressZipCode = addressZipCode;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressZipCode = function() {
  return this.addressZipCode;
};

/**
* Set the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @param {String} addressCountry 
*/
CashAdvanceCustomerIdentification.prototype.setAddressCountry = function(addressCountry) {
  this.addressCountry = addressCountry;
};

/**
* Get the field value
* @memberof payments.CashAdvanceCustomerIdentification
* @return {String} 
*/
CashAdvanceCustomerIdentification.prototype.getAddressCountry = function() {
  return this.addressCountry;
};

/**
* @memberof payments.CashAdvanceCustomerIdentification
* @private
*/
CashAdvanceCustomerIdentification.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CashAdvanceCustomerIdentification.prototype.toString = function() {
  return JSON.stringify(this);
};

CashAdvanceCustomerIdentification._meta_ =  {fields:  {}};
CashAdvanceCustomerIdentification._meta_._class_ =  CashAdvanceCustomerIdentification;
CashAdvanceCustomerIdentification._meta_.fields["idType"] = {};
CashAdvanceCustomerIdentification._meta_.fields["idType"].type = payments_IdType;
CashAdvanceCustomerIdentification._meta_.fields["serialNumber"] = {};
CashAdvanceCustomerIdentification._meta_.fields["serialNumber"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["maskedSerialNumber"] = {};
CashAdvanceCustomerIdentification._meta_.fields["maskedSerialNumber"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["encryptedSerialNumber"] = {};
CashAdvanceCustomerIdentification._meta_.fields["encryptedSerialNumber"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["expirationDate"] = {};
CashAdvanceCustomerIdentification._meta_.fields["expirationDate"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["issuingState"] = {};
CashAdvanceCustomerIdentification._meta_.fields["issuingState"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["issuingCountry"] = {};
CashAdvanceCustomerIdentification._meta_.fields["issuingCountry"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["customerName"] = {};
CashAdvanceCustomerIdentification._meta_.fields["customerName"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressStreet1"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressStreet1"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressStreet2"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressStreet2"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressCity"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressCity"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressState"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressState"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressZipCode"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressZipCode"].type = String;
CashAdvanceCustomerIdentification._meta_.fields["addressCountry"] = {};
CashAdvanceCustomerIdentification._meta_.fields["addressCountry"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CashAdvanceCustomerIdentification;
}



/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CardType = __webpack_require__(19);
var payments_CardTransactionState = __webpack_require__(112);
var base_Reference = __webpack_require__(2);
var payments_CardEntryType = __webpack_require__(54);
var payments_VaultedCard = __webpack_require__(11);
var payments_CardTransactionType = __webpack_require__(113);
var payments_AVSResult = __webpack_require__(114);

/**
* @constructor
* @memberof payments
*/
var CardTransaction = function() {
  this._class_ = CardTransaction;
  this.paymentRef = undefined;
  this.creditRef = undefined;
  this.cardType = undefined;
  this.entryType = undefined;
  this.first6 = undefined;
  this.last4 = undefined;
  this.type = undefined;
  this.authCode = undefined;
  this.referenceId = undefined;
  this.transactionNo = undefined;
  this.state = undefined;
  this.extra = undefined;
  this.begBalance = undefined;
  this.endBalance = undefined;
  this.avsResult = undefined;
  this.cardholderName = undefined;
  this.token = undefined;
  this.vaultedCard = undefined;
};


/**
* Set the field value
* The payment with which the card transaction is associated
*
* @memberof payments.CardTransaction
* @param {Null|base.Reference} paymentRef 
*/
CardTransaction.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which the card transaction is associated
* @memberof payments.CardTransaction
* @return {Null|base.Reference} 
*/
CardTransaction.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* The credit with which the card transaction is associated
*
* @memberof payments.CardTransaction
* @param {Null|base.Reference} creditRef 
*/
CardTransaction.prototype.setCreditRef = function(creditRef) {
  this.creditRef = creditRef;
};

/**
* Get the field value
* The credit with which the card transaction is associated
* @memberof payments.CardTransaction
* @return {Null|base.Reference} 
*/
CardTransaction.prototype.getCreditRef = function() {
  return this.creditRef;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {payments.CardType} cardType 
*/
CardTransaction.prototype.setCardType = function(cardType) {
  this.cardType = cardType;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {payments.CardType} 
*/
CardTransaction.prototype.getCardType = function() {
  return this.cardType;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {payments.CardEntryType} entryType 
*/
CardTransaction.prototype.setEntryType = function(entryType) {
  this.entryType = entryType;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {payments.CardEntryType} 
*/
CardTransaction.prototype.getEntryType = function() {
  return this.entryType;
};

/**
* Set the field value
* The first four digits of the card number
*
* @memberof payments.CardTransaction
* @param {String} first6 
*/
CardTransaction.prototype.setFirst6 = function(first6) {
  this.first6 = first6;
};

/**
* Get the field value
* The first four digits of the card number
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getFirst6 = function() {
  return this.first6;
};

/**
* Set the field value
* The last four digits of the card number
*
* @memberof payments.CardTransaction
* @param {String} last4 
*/
CardTransaction.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* The last four digits of the card number
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {payments.CardTransactionType} type 
*/
CardTransaction.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {payments.CardTransactionType} 
*/
CardTransaction.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* Authorization code (if successful)
*
* @memberof payments.CardTransaction
* @param {String} authCode 
*/
CardTransaction.prototype.setAuthCode = function(authCode) {
  this.authCode = authCode;
};

/**
* Get the field value
* Authorization code (if successful)
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getAuthCode = function() {
  return this.authCode;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {String} referenceId 
*/
CardTransaction.prototype.setReferenceId = function(referenceId) {
  this.referenceId = referenceId;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getReferenceId = function() {
  return this.referenceId;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {String} transactionNo 
*/
CardTransaction.prototype.setTransactionNo = function(transactionNo) {
  this.transactionNo = transactionNo;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getTransactionNo = function() {
  return this.transactionNo;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {payments.CardTransactionState} state 
*/
CardTransaction.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {payments.CardTransactionState} 
*/
CardTransaction.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* Extra info to be stored as part of gateway/card transaction
*
* @memberof payments.CardTransaction
* @param {Object.<String,String>} extra A map of <String> to <>
*/
CardTransaction.prototype.setExtra = function(extra) {
  this.extra = extra;
};

/**
* Get the field value
* Extra info to be stored as part of gateway/card transaction
* @memberof payments.CardTransaction
* @return {Object.<String,String>} A map of <String> to <>
*/
CardTransaction.prototype.getExtra = function() {
  return this.extra;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {Number|Null} begBalance must be a long integer, 
*/
CardTransaction.prototype.setBegBalance = function(begBalance) {
  this.begBalance = begBalance;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {Number|Null} must be a long integer, 
*/
CardTransaction.prototype.getBegBalance = function() {
  return this.begBalance;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {Number|Null} endBalance must be a long integer, 
*/
CardTransaction.prototype.setEndBalance = function(endBalance) {
  this.endBalance = endBalance;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {Number|Null} must be a long integer, 
*/
CardTransaction.prototype.getEndBalance = function() {
  return this.endBalance;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {payments.AVSResult} avsResult 
*/
CardTransaction.prototype.setAvsResult = function(avsResult) {
  this.avsResult = avsResult;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {payments.AVSResult} 
*/
CardTransaction.prototype.getAvsResult = function() {
  return this.avsResult;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {String} cardholderName 
*/
CardTransaction.prototype.setCardholderName = function(cardholderName) {
  this.cardholderName = cardholderName;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getCardholderName = function() {
  return this.cardholderName;
};

/**
* Set the field value
* @memberof payments.CardTransaction
* @param {String} token 
*/
CardTransaction.prototype.setToken = function(token) {
  this.token = token;
};

/**
* Get the field value
* @memberof payments.CardTransaction
* @return {String} 
*/
CardTransaction.prototype.getToken = function() {
  return this.token;
};

/**
* Set the field value
* Vaulted card which can be used for subsequent transactions
*
* @memberof payments.CardTransaction
* @param {Null|payments.VaultedCard} vaultedCard 
*/
CardTransaction.prototype.setVaultedCard = function(vaultedCard) {
  this.vaultedCard = vaultedCard;
};

/**
* Get the field value
* Vaulted card which can be used for subsequent transactions
* @memberof payments.CardTransaction
* @return {Null|payments.VaultedCard} 
*/
CardTransaction.prototype.getVaultedCard = function() {
  return this.vaultedCard;
};

/**
* @memberof payments.CardTransaction
* @private
*/
CardTransaction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CardTransaction.prototype.toString = function() {
  return JSON.stringify(this);
};

CardTransaction._meta_ =  {fields:  {}};
CardTransaction._meta_._class_ =  CardTransaction;
CardTransaction._meta_.fields["paymentRef"] = {};
CardTransaction._meta_.fields["paymentRef"].type = base_Reference;
CardTransaction._meta_.fields["creditRef"] = {};
CardTransaction._meta_.fields["creditRef"].type = base_Reference;
CardTransaction._meta_.fields["cardType"] = {};
CardTransaction._meta_.fields["cardType"].type = payments_CardType;
CardTransaction._meta_.fields["entryType"] = {};
CardTransaction._meta_.fields["entryType"].type = payments_CardEntryType;
CardTransaction._meta_.fields["first6"] = {};
CardTransaction._meta_.fields["first6"].type = String;
CardTransaction._meta_.fields["last4"] = {};
CardTransaction._meta_.fields["last4"].type = String;
CardTransaction._meta_.fields["type"] = {};
CardTransaction._meta_.fields["type"].type = payments_CardTransactionType;
CardTransaction._meta_.fields["authCode"] = {};
CardTransaction._meta_.fields["authCode"].type = String;
CardTransaction._meta_.fields["referenceId"] = {};
CardTransaction._meta_.fields["referenceId"].type = String;
CardTransaction._meta_.fields["transactionNo"] = {};
CardTransaction._meta_.fields["transactionNo"].type = String;
CardTransaction._meta_.fields["state"] = {};
CardTransaction._meta_.fields["state"].type = payments_CardTransactionState;
CardTransaction._meta_.fields["extra"] = {};
CardTransaction._meta_.fields["extra"].type = Object;
CardTransaction._meta_.fields["begBalance"] = {};
CardTransaction._meta_.fields["begBalance"].type = Number;
CardTransaction._meta_.fields["endBalance"] = {};
CardTransaction._meta_.fields["endBalance"].type = Number;
CardTransaction._meta_.fields["avsResult"] = {};
CardTransaction._meta_.fields["avsResult"].type = payments_AVSResult;
CardTransaction._meta_.fields["cardholderName"] = {};
CardTransaction._meta_.fields["cardholderName"].type = String;
CardTransaction._meta_.fields["token"] = {};
CardTransaction._meta_.fields["token"].type = String;
CardTransaction._meta_.fields["vaultedCard"] = {};
CardTransaction._meta_.fields["vaultedCard"].type = payments_VaultedCard;

//
// Expose the module.
//
if (true) {
module.exports = CardTransaction;
}



/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardEntryType = {
  SWIPED : "SWIPED",
  KEYED : "KEYED",
  VOICE : "VOICE",
  VAULTED : "VAULTED",
  OFFLINE_SWIPED : "OFFLINE_SWIPED",
  OFFLINE_KEYED : "OFFLINE_KEYED",
  EMV_CONTACT : "EMV_CONTACT",
  EMV_CONTACTLESS : "EMV_CONTACTLESS",
  MSD_CONTACTLESS : "MSD_CONTACTLESS",
  PINPAD_MANUAL_ENTRY : "PINPAD_MANUAL_ENTRY",
  QR_CODE : "QR_CODE",
  SCANNED : "SCANNED"
};


//
// Expose the module.
//
if (true) {
module.exports = CardEntryType;
}



/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
TipMode = {
  TIP_PROVIDED : "TIP_PROVIDED",
  ON_SCREEN_BEFORE_PAYMENT : "ON_SCREEN_BEFORE_PAYMENT",
  ON_SCREEN_AFTER_PAYMENT : "ON_SCREEN_AFTER_PAYMENT",
  ON_PAPER : "ON_PAPER",
  NO_TIP : "NO_TIP"
};


//
// Expose the module.
//
if (true) {
module.exports = TipMode;
}



/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
DataEntryLocation = {
  ON_SCREEN : "ON_SCREEN",
  ON_PAPER : "ON_PAPER",
  NONE : "NONE"
};


//
// Expose the module.
//
if (true) {
module.exports = DataEntryLocation;
}



/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_HoursAvailable = __webpack_require__(107);
var hours_HoursSet = __webpack_require__(95);
var base_Reference = __webpack_require__(2);
var order_CustomerIdMethod = __webpack_require__(103);

/**
* @constructor
* @memberof order
*/
var OrderType = function() {
  this._class_ = OrderType;
  this.id = undefined;
  this.labelKey = undefined;
  this.label = undefined;
  this.taxable = false;
  this.isDefault = false;
  this.filterCategories = false;
  this.isHidden = false;
  this.fee = undefined;
  this.minOrderAmount = undefined;
  this.maxOrderAmount = undefined;
  this.maxRadius = undefined;
  this.avgOrderTime = undefined;
  this.hoursAvailable = undefined;
  this.customerIdMethod = undefined;
  this.isDeleted = false;
  this.systemOrderTypeId = undefined;
  this.hours = undefined;
  this.categories = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.OrderType
* @param {String} id 
*/
OrderType.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.OrderType
* @return {String} 
*/
OrderType.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Label Key
*
* @memberof order.OrderType
* @param {String} labelKey 
*/
OrderType.prototype.setLabelKey = function(labelKey) {
  this.labelKey = labelKey;
};

/**
* Get the field value
* Label Key
* @memberof order.OrderType
* @return {String} 
*/
OrderType.prototype.getLabelKey = function() {
  return this.labelKey;
};

/**
* Set the field value
* Label Key
*
* @memberof order.OrderType
* @param {String} label 
*/
OrderType.prototype.setLabel = function(label) {
  this.label = label;
};

/**
* Get the field value
* Label Key
* @memberof order.OrderType
* @return {String} 
*/
OrderType.prototype.getLabel = function() {
  return this.label;
};

/**
* Set the field value
* If this order type is taxable
*
* @memberof order.OrderType
* @param {Boolean} taxable 
*/
OrderType.prototype.setTaxable = function(taxable) {
  this.taxable = taxable;
};

/**
* Get the field value
* If this order type is taxable
* @memberof order.OrderType
* @return {Boolean} 
*/
OrderType.prototype.getTaxable = function() {
  return this.taxable;
};

/**
* Set the field value
* If this order type is the default
*
* @memberof order.OrderType
* @param {Boolean} isDefault 
*/
OrderType.prototype.setIsDefault = function(isDefault) {
  this.isDefault = isDefault;
};

/**
* Get the field value
* If this order type is the default
* @memberof order.OrderType
* @return {Boolean} 
*/
OrderType.prototype.getIsDefault = function() {
  return this.isDefault;
};

/**
* Set the field value
* If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
*
* @memberof order.OrderType
* @param {Boolean} filterCategories 
*/
OrderType.prototype.setFilterCategories = function(filterCategories) {
  this.filterCategories = filterCategories;
};

/**
* Get the field value
* If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
* @memberof order.OrderType
* @return {Boolean} 
*/
OrderType.prototype.getFilterCategories = function() {
  return this.filterCategories;
};

/**
* Set the field value
* If this order type is hidden on the register
*
* @memberof order.OrderType
* @param {Boolean} isHidden 
*/
OrderType.prototype.setIsHidden = function(isHidden) {
  this.isHidden = isHidden;
};

/**
* Get the field value
* If this order type is hidden on the register
* @memberof order.OrderType
* @return {Boolean} 
*/
OrderType.prototype.getIsHidden = function() {
  return this.isHidden;
};

/**
* Set the field value
* The price of a fee added to this order type, not fully implemented at this time.
*
* @memberof order.OrderType
* @param {Null|Number} fee must be a long integer
*/
OrderType.prototype.setFee = function(fee) {
  this.fee = fee;
};

/**
* Get the field value
* The price of a fee added to this order type, not fully implemented at this time.
* @memberof order.OrderType
* @return {Null|Number} must be a long integer
*/
OrderType.prototype.getFee = function() {
  return this.fee;
};

/**
* Set the field value
* The minimum amount required for an order to be placed
*
* @memberof order.OrderType
* @param {Null|Number} minOrderAmount must be a long integer
*/
OrderType.prototype.setMinOrderAmount = function(minOrderAmount) {
  this.minOrderAmount = minOrderAmount;
};

/**
* Get the field value
* The minimum amount required for an order to be placed
* @memberof order.OrderType
* @return {Null|Number} must be a long integer
*/
OrderType.prototype.getMinOrderAmount = function() {
  return this.minOrderAmount;
};

/**
* Set the field value
* The maximum amount for an order allowed
*
* @memberof order.OrderType
* @param {Null|Number} maxOrderAmount must be a long integer
*/
OrderType.prototype.setMaxOrderAmount = function(maxOrderAmount) {
  this.maxOrderAmount = maxOrderAmount;
};

/**
* Get the field value
* The maximum amount for an order allowed
* @memberof order.OrderType
* @return {Null|Number} must be a long integer
*/
OrderType.prototype.getMaxOrderAmount = function() {
  return this.maxOrderAmount;
};

/**
* Set the field value
* The maximum radius allowed for an order (i.e. delivery)
*
* @memberof order.OrderType
* @param {Null|Number} maxRadius must be a long integer
*/
OrderType.prototype.setMaxRadius = function(maxRadius) {
  this.maxRadius = maxRadius;
};

/**
* Get the field value
* The maximum radius allowed for an order (i.e. delivery)
* @memberof order.OrderType
* @return {Null|Number} must be a long integer
*/
OrderType.prototype.getMaxRadius = function() {
  return this.maxRadius;
};

/**
* Set the field value
* The average time it takes to complete the order
*
* @memberof order.OrderType
* @param {Null|Number} avgOrderTime must be a long integer
*/
OrderType.prototype.setAvgOrderTime = function(avgOrderTime) {
  this.avgOrderTime = avgOrderTime;
};

/**
* Get the field value
* The average time it takes to complete the order
* @memberof order.OrderType
* @return {Null|Number} must be a long integer
*/
OrderType.prototype.getAvgOrderTime = function() {
  return this.avgOrderTime;
};

/**
* Set the field value
* @memberof order.OrderType
* @param {order.HoursAvailable} hoursAvailable 
*/
OrderType.prototype.setHoursAvailable = function(hoursAvailable) {
  this.hoursAvailable = hoursAvailable;
};

/**
* Get the field value
* @memberof order.OrderType
* @return {order.HoursAvailable} 
*/
OrderType.prototype.getHoursAvailable = function() {
  return this.hoursAvailable;
};

/**
* Set the field value
* @memberof order.OrderType
* @param {order.CustomerIdMethod} customerIdMethod 
*/
OrderType.prototype.setCustomerIdMethod = function(customerIdMethod) {
  this.customerIdMethod = customerIdMethod;
};

/**
* Get the field value
* @memberof order.OrderType
* @return {order.CustomerIdMethod} 
*/
OrderType.prototype.getCustomerIdMethod = function() {
  return this.customerIdMethod;
};

/**
* Set the field value
* If this order type is deleted
*
* @memberof order.OrderType
* @param {Boolean} isDeleted 
*/
OrderType.prototype.setIsDeleted = function(isDeleted) {
  this.isDeleted = isDeleted;
};

/**
* Get the field value
* If this order type is deleted
* @memberof order.OrderType
* @return {Boolean} 
*/
OrderType.prototype.getIsDeleted = function() {
  return this.isDeleted;
};

/**
* Set the field value
* Optional system order type that this order type is associated with.
*
* @memberof order.OrderType
* @param {String} systemOrderTypeId 
*/
OrderType.prototype.setSystemOrderTypeId = function(systemOrderTypeId) {
  this.systemOrderTypeId = systemOrderTypeId;
};

/**
* Get the field value
* Optional system order type that this order type is associated with.
* @memberof order.OrderType
* @return {String} 
*/
OrderType.prototype.getSystemOrderTypeId = function() {
  return this.systemOrderTypeId;
};

/**
* Set the field value
* The hours this order type is available (if they differ from normal merchant hours)
*
* @memberof order.OrderType
* @param {hours.HoursSet} hours 
*/
OrderType.prototype.setHours = function(hours) {
  this.hours = hours;
};

/**
* Get the field value
* The hours this order type is available (if they differ from normal merchant hours)
* @memberof order.OrderType
* @return {hours.HoursSet} 
*/
OrderType.prototype.getHours = function() {
  return this.hours;
};

/**
* Set the field value
* The categories of items that can be assigned to this order type
*
* @memberof order.OrderType
* @param {Array.<base.Reference>} categories An array of 
*/
OrderType.prototype.setCategories = function(categories) {
  this.categories = categories;
};

/**
* Get the field value
* The categories of items that can be assigned to this order type
* @memberof order.OrderType
* @return {Array.<base.Reference>} An array of 
*/
OrderType.prototype.getCategories = function() {
  return this.categories;
};

/**
* @memberof order.OrderType
* @private
*/
OrderType.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderType.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderType._meta_ =  {fields:  {}};
OrderType._meta_._class_ =  OrderType;
OrderType._meta_.fields["id"] = {};
OrderType._meta_.fields["id"].type = String;
OrderType._meta_.fields["labelKey"] = {};
OrderType._meta_.fields["labelKey"].type = String;
OrderType._meta_.fields["label"] = {};
OrderType._meta_.fields["label"].type = String;
OrderType._meta_.fields["taxable"] = {};
OrderType._meta_.fields["taxable"].type = Boolean;
OrderType._meta_.fields["isDefault"] = {};
OrderType._meta_.fields["isDefault"].type = Boolean;
OrderType._meta_.fields["filterCategories"] = {};
OrderType._meta_.fields["filterCategories"].type = Boolean;
OrderType._meta_.fields["isHidden"] = {};
OrderType._meta_.fields["isHidden"].type = Boolean;
OrderType._meta_.fields["fee"] = {};
OrderType._meta_.fields["fee"].type = Number;
OrderType._meta_.fields["minOrderAmount"] = {};
OrderType._meta_.fields["minOrderAmount"].type = Number;
OrderType._meta_.fields["maxOrderAmount"] = {};
OrderType._meta_.fields["maxOrderAmount"].type = Number;
OrderType._meta_.fields["maxRadius"] = {};
OrderType._meta_.fields["maxRadius"].type = Number;
OrderType._meta_.fields["avgOrderTime"] = {};
OrderType._meta_.fields["avgOrderTime"].type = Number;
OrderType._meta_.fields["hoursAvailable"] = {};
OrderType._meta_.fields["hoursAvailable"].type = order_HoursAvailable;
OrderType._meta_.fields["customerIdMethod"] = {};
OrderType._meta_.fields["customerIdMethod"].type = order_CustomerIdMethod;
OrderType._meta_.fields["isDeleted"] = {};
OrderType._meta_.fields["isDeleted"].type = Boolean;
OrderType._meta_.fields["systemOrderTypeId"] = {};
OrderType._meta_.fields["systemOrderTypeId"].type = String;
OrderType._meta_.fields["hours"] = {};
OrderType._meta_.fields["hours"].type = hours_HoursSet;
OrderType._meta_.fields["categories"] = {};
OrderType._meta_.fields["categories"].type = Array;
OrderType._meta_.fields["categories"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = OrderType;
}



/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var apps_AppTracking = __webpack_require__(13);
var base_Reference = __webpack_require__(2);
var payments_GermanInfo = __webpack_require__(15);

/**
* @constructor
* @memberof payments
*/
var CreditRefund = function() {
  this._class_ = CreditRefund;
  this.id = undefined;
  this.orderRef = undefined;
  this.device = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.credit = undefined;
  this.employee = undefined;
  this.germanInfo = undefined;
  this.appTracking = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.CreditRefund
* @param {String} id 
*/
CreditRefund.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.CreditRefund
* @return {String} 
*/
CreditRefund.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the refund is associated
*
* @memberof payments.CreditRefund
* @param {base.Reference} orderRef 
*/
CreditRefund.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the refund is associated
* @memberof payments.CreditRefund
* @return {base.Reference} 
*/
CreditRefund.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* Device which processed the transaction for this refund
*
* @memberof payments.CreditRefund
* @param {base.Reference|Null} device 
*/
CreditRefund.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which processed the transaction for this refund
* @memberof payments.CreditRefund
* @return {base.Reference|Null} 
*/
CreditRefund.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* The time when the refund was recorded on the server
*
* @memberof payments.CreditRefund
* @param {Number} createdTime must be a long integer
*/
CreditRefund.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* The time when the refund was recorded on the server
* @memberof payments.CreditRefund
* @return {Number} must be a long integer
*/
CreditRefund.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* The time when the refund was recorded on the client
*
* @memberof payments.CreditRefund
* @param {Number} clientCreatedTime must be a long integer
*/
CreditRefund.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time when the refund was recorded on the client
* @memberof payments.CreditRefund
* @return {Number} must be a long integer
*/
CreditRefund.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* The credit with which the credit refund is associated
*
* @memberof payments.CreditRefund
* @param {base.Reference} credit 
*/
CreditRefund.prototype.setCredit = function(credit) {
  this.credit = credit;
};

/**
* Get the field value
* The credit with which the credit refund is associated
* @memberof payments.CreditRefund
* @return {base.Reference} 
*/
CreditRefund.prototype.getCredit = function() {
  return this.credit;
};

/**
* Set the field value
* @memberof payments.CreditRefund
* @param {base.Reference} employee 
*/
CreditRefund.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* @memberof payments.CreditRefund
* @return {base.Reference} 
*/
CreditRefund.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* German region-specific information
*
* @memberof payments.CreditRefund
* @param {payments.GermanInfo|Null} germanInfo 
*/
CreditRefund.prototype.setGermanInfo = function(germanInfo) {
  this.germanInfo = germanInfo;
};

/**
* Get the field value
* German region-specific information
* @memberof payments.CreditRefund
* @return {payments.GermanInfo|Null} 
*/
CreditRefund.prototype.getGermanInfo = function() {
  return this.germanInfo;
};

/**
* Set the field value
* Tracking information for the app that created this payment.
*
* @memberof payments.CreditRefund
* @param {apps.AppTracking|Null} appTracking 
*/
CreditRefund.prototype.setAppTracking = function(appTracking) {
  this.appTracking = appTracking;
};

/**
* Get the field value
* Tracking information for the app that created this payment.
* @memberof payments.CreditRefund
* @return {apps.AppTracking|Null} 
*/
CreditRefund.prototype.getAppTracking = function() {
  return this.appTracking;
};

/**
* @memberof payments.CreditRefund
* @private
*/
CreditRefund.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CreditRefund.prototype.toString = function() {
  return JSON.stringify(this);
};

CreditRefund._meta_ =  {fields:  {}};
CreditRefund._meta_._class_ =  CreditRefund;
CreditRefund._meta_.fields["id"] = {};
CreditRefund._meta_.fields["id"].type = String;
CreditRefund._meta_.fields["orderRef"] = {};
CreditRefund._meta_.fields["orderRef"].type = base_Reference;
CreditRefund._meta_.fields["device"] = {};
CreditRefund._meta_.fields["device"].type = base_Reference;
CreditRefund._meta_.fields["createdTime"] = {};
CreditRefund._meta_.fields["createdTime"].type = Number;
CreditRefund._meta_.fields["clientCreatedTime"] = {};
CreditRefund._meta_.fields["clientCreatedTime"].type = Number;
CreditRefund._meta_.fields["credit"] = {};
CreditRefund._meta_.fields["credit"].type = base_Reference;
CreditRefund._meta_.fields["employee"] = {};
CreditRefund._meta_.fields["employee"].type = base_Reference;
CreditRefund._meta_.fields["germanInfo"] = {};
CreditRefund._meta_.fields["germanInfo"].type = payments_GermanInfo;
CreditRefund._meta_.fields["appTracking"] = {};
CreditRefund._meta_.fields["appTracking"].type = apps_AppTracking;

//
// Expose the module.
//
if (true) {
module.exports = CreditRefund;
}



/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_BatchType = __webpack_require__(60);
var payments_BatchDetail = __webpack_require__(123);
var payments_BatchState = __webpack_require__(62);

/**
* @constructor
* @memberof payments
*/
var Batch = function() {
  this._class_ = Batch;
  this.id = undefined;
  this.merchantId = undefined;
  this.firstGatewayTxId = undefined;
  this.lastGatewayTxId = undefined;
  this.accountId = undefined;
  this.txCount = 0;
  this.totalBatchAmount = 0;
  this.devices = undefined;
  this.state = payments_BatchState["OPEN"];
  this.batchType = undefined;
  this.createdTime = undefined;
  this.modifiedTime = undefined;
  this.batchDetails = undefined;
};


/**
* Set the field value
* @memberof payments.Batch
* @param {String} id 
*/
Batch.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {String} 
*/
Batch.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof payments.Batch
* @param {Number} merchantId must be a long integer
*/
Batch.prototype.setMerchantId = function(merchantId) {
  this.merchantId = merchantId;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getMerchantId = function() {
  return this.merchantId;
};

/**
* Set the field value
* @memberof payments.Batch
* @param {Number} firstGatewayTxId must be a long integer
*/
Batch.prototype.setFirstGatewayTxId = function(firstGatewayTxId) {
  this.firstGatewayTxId = firstGatewayTxId;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getFirstGatewayTxId = function() {
  return this.firstGatewayTxId;
};

/**
* Set the field value
* @memberof payments.Batch
* @param {Number} lastGatewayTxId must be a long integer
*/
Batch.prototype.setLastGatewayTxId = function(lastGatewayTxId) {
  this.lastGatewayTxId = lastGatewayTxId;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getLastGatewayTxId = function() {
  return this.lastGatewayTxId;
};

/**
* Set the field value
* The id of employee who executed batch
*
* @memberof payments.Batch
* @param {Number} accountId must be a long integer
*/
Batch.prototype.setAccountId = function(accountId) {
  this.accountId = accountId;
};

/**
* Get the field value
* The id of employee who executed batch
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getAccountId = function() {
  return this.accountId;
};

/**
* Set the field value
* The number of transactions being batched
*
* @memberof payments.Batch
* @param {Number} txCount must be a long integer
*/
Batch.prototype.setTxCount = function(txCount) {
  this.txCount = txCount;
};

/**
* Get the field value
* The number of transactions being batched
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getTxCount = function() {
  return this.txCount;
};

/**
* Set the field value
* Total amount closed
*
* @memberof payments.Batch
* @param {Number} totalBatchAmount must be a long integer
*/
Batch.prototype.setTotalBatchAmount = function(totalBatchAmount) {
  this.totalBatchAmount = totalBatchAmount;
};

/**
* Get the field value
* Total amount closed
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getTotalBatchAmount = function() {
  return this.totalBatchAmount;
};

/**
* Set the field value
* List of devices in batch
*
* @memberof payments.Batch
* @param {String} devices 
*/
Batch.prototype.setDevices = function(devices) {
  this.devices = devices;
};

/**
* Get the field value
* List of devices in batch
* @memberof payments.Batch
* @return {String} 
*/
Batch.prototype.getDevices = function() {
  return this.devices;
};

/**
* Set the field value
* @memberof payments.Batch
* @param {payments.BatchState} state 
*/
Batch.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {payments.BatchState} 
*/
Batch.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof payments.Batch
* @param {payments.BatchType} batchType 
*/
Batch.prototype.setBatchType = function(batchType) {
  this.batchType = batchType;
};

/**
* Get the field value
* @memberof payments.Batch
* @return {payments.BatchType} 
*/
Batch.prototype.getBatchType = function() {
  return this.batchType;
};

/**
* Set the field value
* Created time of batch
*
* @memberof payments.Batch
* @param {Number} createdTime must be a long integer
*/
Batch.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Created time of batch
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* Modified time of batch
*
* @memberof payments.Batch
* @param {Number} modifiedTime must be a long integer
*/
Batch.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* Modified time of batch
* @memberof payments.Batch
* @return {Number} must be a long integer
*/
Batch.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* Set the field value
* Details split based on card / employees
*
* @memberof payments.Batch
* @param {payments.BatchDetail} batchDetails 
*/
Batch.prototype.setBatchDetails = function(batchDetails) {
  this.batchDetails = batchDetails;
};

/**
* Get the field value
* Details split based on card / employees
* @memberof payments.Batch
* @return {payments.BatchDetail} 
*/
Batch.prototype.getBatchDetails = function() {
  return this.batchDetails;
};

/**
* @memberof payments.Batch
* @private
*/
Batch.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Batch.prototype.toString = function() {
  return JSON.stringify(this);
};

Batch._meta_ =  {fields:  {}};
Batch._meta_._class_ =  Batch;
Batch._meta_.fields["id"] = {};
Batch._meta_.fields["id"].type = String;
Batch._meta_.fields["merchantId"] = {};
Batch._meta_.fields["merchantId"].type = Number;
Batch._meta_.fields["firstGatewayTxId"] = {};
Batch._meta_.fields["firstGatewayTxId"].type = Number;
Batch._meta_.fields["lastGatewayTxId"] = {};
Batch._meta_.fields["lastGatewayTxId"].type = Number;
Batch._meta_.fields["accountId"] = {};
Batch._meta_.fields["accountId"].type = Number;
Batch._meta_.fields["txCount"] = {};
Batch._meta_.fields["txCount"].type = Number;
Batch._meta_.fields["totalBatchAmount"] = {};
Batch._meta_.fields["totalBatchAmount"].type = Number;
Batch._meta_.fields["devices"] = {};
Batch._meta_.fields["devices"].type = String;
Batch._meta_.fields["state"] = {};
Batch._meta_.fields["state"].type = payments_BatchState;
Batch._meta_.fields["batchType"] = {};
Batch._meta_.fields["batchType"].type = payments_BatchType;
Batch._meta_.fields["createdTime"] = {};
Batch._meta_.fields["createdTime"].type = Number;
Batch._meta_.fields["modifiedTime"] = {};
Batch._meta_.fields["modifiedTime"].type = Number;
Batch._meta_.fields["batchDetails"] = {};
Batch._meta_.fields["batchDetails"].type = payments_BatchDetail;

//
// Expose the module.
//
if (true) {
module.exports = Batch;
}



/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
BatchType = {
  MANUAL_CLOSE : "MANUAL_CLOSE",
  AUTO_CLOSE : "AUTO_CLOSE"
};


//
// Expose the module.
//
if (true) {
module.exports = BatchType;
}



/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var BatchTotalType = function() {
  this._class_ = BatchTotalType;
  this.count = undefined;
  this.total = undefined;
};


/**
* Set the field value
* Total count of types
*
* @memberof payments.BatchTotalType
* @param {Number} count must be a long integer
*/
BatchTotalType.prototype.setCount = function(count) {
  this.count = count;
};

/**
* Get the field value
* Total count of types
* @memberof payments.BatchTotalType
* @return {Number} must be a long integer
*/
BatchTotalType.prototype.getCount = function() {
  return this.count;
};

/**
* Set the field value
* Total amount for type
*
* @memberof payments.BatchTotalType
* @param {Number} total must be a long integer
*/
BatchTotalType.prototype.setTotal = function(total) {
  this.total = total;
};

/**
* Get the field value
* Total amount for type
* @memberof payments.BatchTotalType
* @return {Number} must be a long integer
*/
BatchTotalType.prototype.getTotal = function() {
  return this.total;
};

/**
* @memberof payments.BatchTotalType
* @private
*/
BatchTotalType.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BatchTotalType.prototype.toString = function() {
  return JSON.stringify(this);
};

BatchTotalType._meta_ =  {fields:  {}};
BatchTotalType._meta_._class_ =  BatchTotalType;
BatchTotalType._meta_.fields["count"] = {};
BatchTotalType._meta_.fields["count"].type = Number;
BatchTotalType._meta_.fields["total"] = {};
BatchTotalType._meta_.fields["total"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = BatchTotalType;
}



/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
BatchState = {
  OPEN : "OPEN",
  QUEUED_FOR_PROCESSING : "QUEUED_FOR_PROCESSING",
  PROCESSING : "PROCESSING",
  CLOSED : "CLOSED",
  FAILED : "FAILED"
};


//
// Expose the module.
//
if (true) {
module.exports = BatchState;
}



/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof printer
* @enum {string}
*/
PrintCategory = {
  ORDER : "ORDER",
  RECEIPT : "RECEIPT"
};


//
// Expose the module.
//
if (true) {
module.exports = PrintCategory;
}



/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof printer
* @enum {string}
*/
PrintJobStatus = {
  IN_QUEUE : "IN_QUEUE",
  PRINTING : "PRINTING",
  DONE : "DONE",
  ERROR : "ERROR",
  UNKNOWN : "UNKNOWN",
  NOT_FOUND : "NOT_FOUND"
};


//
// Expose the module.
//
if (true) {
module.exports = PrintJobStatus;
}



/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_TransactionType = __webpack_require__(140);
var payments_CashAdvanceCustomerIdentification = __webpack_require__(52);
var payments_TaxableAmountRate = __webpack_require__(21);
var apps_AppTracking = __webpack_require__(13);
var payments_ServiceChargeAmount = __webpack_require__(20);
var payments_VaultedCard = __webpack_require__(11);
var payments_TransactionSettings = __webpack_require__(31);
var payments_GermanInfo = __webpack_require__(15);

/**
* @constructor
* @memberof remotemessage
*/
var PayIntent = function() {
  this._class_ = PayIntent;
  this.action = "com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY";
  this.amount = undefined;
  this.tippableAmount = undefined;
  this.tipAmount = undefined;
  this.taxAmount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
  this.employeeId = undefined;
  this.transactionType = undefined;
  this.taxableAmountRates = undefined;
  this.serviceChargeAmount = undefined;
  this.isDisableCashBack = undefined;
  this.isTesting = undefined;
  this.cardEntryMethods = undefined;
  this.voiceAuthCode = undefined;
  this.streetAddress = undefined;
  this.postalCode = undefined;
  this.isCardNotPresent = undefined;
  this.cardDataMessage = undefined;
  this.remotePrint = undefined;
  this.transactionNo = undefined;
  this.isForceSwipePinEntry = undefined;
  this.disableRestartTransactionWhenFailed = undefined;
  this.externalPaymentId = undefined;
  this.vaultedCard = undefined;
  this.allowOfflinePayment = undefined;
  this.approveOfflinePaymentWithoutPrompt = undefined;
  this.requiresRemoteConfirmation = undefined;
  this.applicationTracking = undefined;
  this.allowPartialAuth = true;
  this.germanInfo = undefined;
  this.cashAdvanceCustomerIdentification = undefined;
  this.transactionSettings = undefined;
};


/**
* Set the field value
* The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
*
* @memberof remotemessage.PayIntent
* @param {String} action 
*/
PayIntent.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Amount for transaction
*
* @memberof remotemessage.PayIntent
* @param {Number|Null} amount must be a long integer, 
*/
PayIntent.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount for transaction
* @memberof remotemessage.PayIntent
* @return {Number|Null} must be a long integer, 
*/
PayIntent.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount used when calculating on screen tips
*
* @memberof remotemessage.PayIntent
* @param {Number|Null} tippableAmount must be a long integer, 
*/
PayIntent.prototype.setTippableAmount = function(tippableAmount) {
  this.tippableAmount = tippableAmount;
};

/**
* Get the field value
* Amount used when calculating on screen tips
* @memberof remotemessage.PayIntent
* @return {Number|Null} must be a long integer, 
*/
PayIntent.prototype.getTippableAmount = function() {
  return this.tippableAmount;
};

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotemessage.PayIntent
* @param {Number|Null} tipAmount must be a long integer, 
*/
PayIntent.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotemessage.PayIntent
* @return {Number|Null} must be a long integer, 
*/
PayIntent.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Number|Null} taxAmount must be a long integer, 
*/
PayIntent.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Number|Null} must be a long integer, 
*/
PayIntent.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.PayIntent
* @param {String} orderId 
*/
PayIntent.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.PayIntent
* @param {String} paymentId 
*/
PayIntent.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* Unique identifier for a employee
*
* @memberof remotemessage.PayIntent
* @param {String} employeeId 
*/
PayIntent.prototype.setEmployeeId = function(employeeId) {
  this.employeeId = employeeId;
};

/**
* Get the field value
* Unique identifier for a employee
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getEmployeeId = function() {
  return this.employeeId;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {remotemessage.TransactionType} transactionType 
*/
PayIntent.prototype.setTransactionType = function(transactionType) {
  this.transactionType = transactionType;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {remotemessage.TransactionType} 
*/
PayIntent.prototype.getTransactionType = function() {
  return this.transactionType;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
*/
PayIntent.prototype.setTaxableAmountRates = function(taxableAmountRates) {
  this.taxableAmountRates = taxableAmountRates;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Array.<payments.TaxableAmountRate>} An array of 
*/
PayIntent.prototype.getTaxableAmountRates = function() {
  return this.taxableAmountRates;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Array.<payments.ServiceChargeAmount>} serviceChargeAmount An array of 
*/
PayIntent.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
  this.serviceChargeAmount = serviceChargeAmount;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Array.<payments.ServiceChargeAmount>} An array of 
*/
PayIntent.prototype.getServiceChargeAmount = function() {
  return this.serviceChargeAmount;
};

/**
* Set the field value
* If true, then cash back will not be offered.
*
* @memberof remotemessage.PayIntent
* @param {Boolean} isDisableCashBack 
*/
PayIntent.prototype.setIsDisableCashBack = function(isDisableCashBack) {
  this.isDisableCashBack = isDisableCashBack;
};

/**
* Get the field value
* If true, then cash back will not be offered.
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getIsDisableCashBack = function() {
  return this.isDisableCashBack;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean} isTesting 
*/
PayIntent.prototype.setIsTesting = function(isTesting) {
  this.isTesting = isTesting;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getIsTesting = function() {
  return this.isTesting;
};

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotemessage.PayIntent
* @param {Number} cardEntryMethods must be an integer
*/
PayIntent.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotemessage.PayIntent
* @return {Number} must be an integer
*/
PayIntent.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {String} voiceAuthCode 
*/
PayIntent.prototype.setVoiceAuthCode = function(voiceAuthCode) {
  this.voiceAuthCode = voiceAuthCode;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getVoiceAuthCode = function() {
  return this.voiceAuthCode;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {String} streetAddress 
*/
PayIntent.prototype.setStreetAddress = function(streetAddress) {
  this.streetAddress = streetAddress;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getStreetAddress = function() {
  return this.streetAddress;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {String} postalCode 
*/
PayIntent.prototype.setPostalCode = function(postalCode) {
  this.postalCode = postalCode;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getPostalCode = function() {
  return this.postalCode;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean} isCardNotPresent 
*/
PayIntent.prototype.setIsCardNotPresent = function(isCardNotPresent) {
  this.isCardNotPresent = isCardNotPresent;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getIsCardNotPresent = function() {
  return this.isCardNotPresent;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {String} cardDataMessage 
*/
PayIntent.prototype.setCardDataMessage = function(cardDataMessage) {
  this.cardDataMessage = cardDataMessage;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getCardDataMessage = function() {
  return this.cardDataMessage;
};

/**
* Set the field value
* If true, then the receiver of this message does NOT print
*
* @memberof remotemessage.PayIntent
* @param {Boolean} remotePrint 
*/
PayIntent.prototype.setRemotePrint = function(remotePrint) {
  this.remotePrint = remotePrint;
};

/**
* Get the field value
* If true, then the receiver of this message does NOT print
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getRemotePrint = function() {
  return this.remotePrint;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {String} transactionNo 
*/
PayIntent.prototype.setTransactionNo = function(transactionNo) {
  this.transactionNo = transactionNo;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getTransactionNo = function() {
  return this.transactionNo;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean} isForceSwipePinEntry 
*/
PayIntent.prototype.setIsForceSwipePinEntry = function(isForceSwipePinEntry) {
  this.isForceSwipePinEntry = isForceSwipePinEntry;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getIsForceSwipePinEntry = function() {
  return this.isForceSwipePinEntry;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean} disableRestartTransactionWhenFailed 
*/
PayIntent.prototype.setDisableRestartTransactionWhenFailed = function(disableRestartTransactionWhenFailed) {
  this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean} 
*/
PayIntent.prototype.getDisableRestartTransactionWhenFailed = function() {
  return this.disableRestartTransactionWhenFailed;
};

/**
* Set the field value
* An id that allows an external system to link to a payment.
*
* @memberof remotemessage.PayIntent
* @param {String} externalPaymentId 
*/
PayIntent.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* An id that allows an external system to link to a payment.
* @memberof remotemessage.PayIntent
* @return {String} 
*/
PayIntent.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {payments.VaultedCard} vaultedCard 
*/
PayIntent.prototype.setVaultedCard = function(vaultedCard) {
  this.vaultedCard = vaultedCard;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {payments.VaultedCard} 
*/
PayIntent.prototype.getVaultedCard = function() {
  return this.vaultedCard;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean|Null} allowOfflinePayment 
*/
PayIntent.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
  this.allowOfflinePayment = allowOfflinePayment;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean|Null} 
*/
PayIntent.prototype.getAllowOfflinePayment = function() {
  return this.allowOfflinePayment;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean|Null} approveOfflinePaymentWithoutPrompt 
*/
PayIntent.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean|Null} 
*/
PayIntent.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
  return this.approveOfflinePaymentWithoutPrompt;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean|Null} requiresRemoteConfirmation 
*/
PayIntent.prototype.setRequiresRemoteConfirmation = function(requiresRemoteConfirmation) {
  this.requiresRemoteConfirmation = requiresRemoteConfirmation;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean|Null} 
*/
PayIntent.prototype.getRequiresRemoteConfirmation = function() {
  return this.requiresRemoteConfirmation;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {apps.AppTracking} applicationTracking 
*/
PayIntent.prototype.setApplicationTracking = function(applicationTracking) {
  this.applicationTracking = applicationTracking;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {apps.AppTracking} 
*/
PayIntent.prototype.getApplicationTracking = function() {
  return this.applicationTracking;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {Boolean|Null} allowPartialAuth 
*/
PayIntent.prototype.setAllowPartialAuth = function(allowPartialAuth) {
  this.allowPartialAuth = allowPartialAuth;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {Boolean|Null} 
*/
PayIntent.prototype.getAllowPartialAuth = function() {
  return this.allowPartialAuth;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {payments.GermanInfo} germanInfo 
*/
PayIntent.prototype.setGermanInfo = function(germanInfo) {
  this.germanInfo = germanInfo;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {payments.GermanInfo} 
*/
PayIntent.prototype.getGermanInfo = function() {
  return this.germanInfo;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {payments.CashAdvanceCustomerIdentification} cashAdvanceCustomerIdentification 
*/
PayIntent.prototype.setCashAdvanceCustomerIdentification = function(cashAdvanceCustomerIdentification) {
  this.cashAdvanceCustomerIdentification = cashAdvanceCustomerIdentification;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {payments.CashAdvanceCustomerIdentification} 
*/
PayIntent.prototype.getCashAdvanceCustomerIdentification = function() {
  return this.cashAdvanceCustomerIdentification;
};

/**
* Set the field value
* @memberof remotemessage.PayIntent
* @param {payments.TransactionSettings} transactionSettings 
*/
PayIntent.prototype.setTransactionSettings = function(transactionSettings) {
  this.transactionSettings = transactionSettings;
};

/**
* Get the field value
* @memberof remotemessage.PayIntent
* @return {payments.TransactionSettings} 
*/
PayIntent.prototype.getTransactionSettings = function() {
  return this.transactionSettings;
};

/**
* @memberof remotemessage.PayIntent
* @private
*/
PayIntent.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PayIntent.prototype.toString = function() {
  return JSON.stringify(this);
};

PayIntent._meta_ =  {fields:  {}};
PayIntent._meta_._class_ =  PayIntent;
PayIntent._meta_.fields["action"] = {};
PayIntent._meta_.fields["action"].type = String;
PayIntent._meta_.fields["amount"] = {};
PayIntent._meta_.fields["amount"].type = Number;
PayIntent._meta_.fields["tippableAmount"] = {};
PayIntent._meta_.fields["tippableAmount"].type = Number;
PayIntent._meta_.fields["tipAmount"] = {};
PayIntent._meta_.fields["tipAmount"].type = Number;
PayIntent._meta_.fields["taxAmount"] = {};
PayIntent._meta_.fields["taxAmount"].type = Number;
PayIntent._meta_.fields["orderId"] = {};
PayIntent._meta_.fields["orderId"].type = String;
PayIntent._meta_.fields["paymentId"] = {};
PayIntent._meta_.fields["paymentId"].type = String;
PayIntent._meta_.fields["employeeId"] = {};
PayIntent._meta_.fields["employeeId"].type = String;
PayIntent._meta_.fields["transactionType"] = {};
PayIntent._meta_.fields["transactionType"].type = remotemessage_TransactionType;
PayIntent._meta_.fields["taxableAmountRates"] = {};
PayIntent._meta_.fields["taxableAmountRates"].type = Array;
PayIntent._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
PayIntent._meta_.fields["serviceChargeAmount"] = {};
PayIntent._meta_.fields["serviceChargeAmount"].type = Array;
PayIntent._meta_.fields["serviceChargeAmount"].elementType = payments_ServiceChargeAmount;
PayIntent._meta_.fields["isDisableCashBack"] = {};
PayIntent._meta_.fields["isDisableCashBack"].type = Boolean;
PayIntent._meta_.fields["isTesting"] = {};
PayIntent._meta_.fields["isTesting"].type = Boolean;
PayIntent._meta_.fields["cardEntryMethods"] = {};
PayIntent._meta_.fields["cardEntryMethods"].type = Number;
PayIntent._meta_.fields["voiceAuthCode"] = {};
PayIntent._meta_.fields["voiceAuthCode"].type = String;
PayIntent._meta_.fields["streetAddress"] = {};
PayIntent._meta_.fields["streetAddress"].type = String;
PayIntent._meta_.fields["postalCode"] = {};
PayIntent._meta_.fields["postalCode"].type = String;
PayIntent._meta_.fields["isCardNotPresent"] = {};
PayIntent._meta_.fields["isCardNotPresent"].type = Boolean;
PayIntent._meta_.fields["cardDataMessage"] = {};
PayIntent._meta_.fields["cardDataMessage"].type = String;
PayIntent._meta_.fields["remotePrint"] = {};
PayIntent._meta_.fields["remotePrint"].type = Boolean;
PayIntent._meta_.fields["transactionNo"] = {};
PayIntent._meta_.fields["transactionNo"].type = String;
PayIntent._meta_.fields["isForceSwipePinEntry"] = {};
PayIntent._meta_.fields["isForceSwipePinEntry"].type = Boolean;
PayIntent._meta_.fields["disableRestartTransactionWhenFailed"] = {};
PayIntent._meta_.fields["disableRestartTransactionWhenFailed"].type = Boolean;
PayIntent._meta_.fields["externalPaymentId"] = {};
PayIntent._meta_.fields["externalPaymentId"].type = String;
PayIntent._meta_.fields["vaultedCard"] = {};
PayIntent._meta_.fields["vaultedCard"].type = payments_VaultedCard;
PayIntent._meta_.fields["allowOfflinePayment"] = {};
PayIntent._meta_.fields["allowOfflinePayment"].type = Boolean;
PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
PayIntent._meta_.fields["requiresRemoteConfirmation"] = {};
PayIntent._meta_.fields["requiresRemoteConfirmation"].type = Boolean;
PayIntent._meta_.fields["applicationTracking"] = {};
PayIntent._meta_.fields["applicationTracking"].type = apps_AppTracking;
PayIntent._meta_.fields["allowPartialAuth"] = {};
PayIntent._meta_.fields["allowPartialAuth"].type = Boolean;
PayIntent._meta_.fields["germanInfo"] = {};
PayIntent._meta_.fields["germanInfo"].type = payments_GermanInfo;
PayIntent._meta_.fields["cashAdvanceCustomerIdentification"] = {};
PayIntent._meta_.fields["cashAdvanceCustomerIdentification"].type = payments_CashAdvanceCustomerIdentification;
PayIntent._meta_.fields["transactionSettings"] = {};
PayIntent._meta_.fields["transactionSettings"].type = payments_TransactionSettings;

//
// Expose the module.
//
if (true) {
module.exports = PayIntent;
}



/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
ErrorCode = {
  ORDER_NOT_FOUND : "ORDER_NOT_FOUND",
  PAYMENT_NOT_FOUND : "PAYMENT_NOT_FOUND",
  FAIL : "FAIL"
};


//
// Expose the module.
//
if (true) {
module.exports = ErrorCode;
}



/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
QueryStatus = {
  FOUND : "FOUND",
  NOT_FOUND : "NOT_FOUND",
  IN_PROGRESS : "IN_PROGRESS"
};


//
// Expose the module.
//
if (true) {
module.exports = QueryStatus;
}



/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** A message used in custom activities */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var ActivityMessage = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = ActivityMessage;
  this.action = undefined;
  this.payload = undefined;
};

ActivityMessage.prototype = Object.create(remotepay_BaseRequest.prototype);
ActivityMessage.prototype.constructor = ActivityMessage;

/**
* Set the field value
* An action name, such as ACTION_VIEW.  Application-specific actions should be prefixed with the vendor's package name.
*
* @memberof remotepay.ActivityMessage
* @param {String} action 
*/
ActivityMessage.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* An action name, such as ACTION_VIEW.  Application-specific actions should be prefixed with the vendor's package name.
* @memberof remotepay.ActivityMessage
* @return {String} 
*/
ActivityMessage.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Information that is passed to the activity.  Can be obtained from the intent using the key defined in com.clover.remote.common.RemoteConstants#EXTRA_PAYLOAD
*
* @memberof remotepay.ActivityMessage
* @param {String|Null} payload 
*/
ActivityMessage.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Information that is passed to the activity.  Can be obtained from the intent using the key defined in com.clover.remote.common.RemoteConstants#EXTRA_PAYLOAD
* @memberof remotepay.ActivityMessage
* @return {String|Null} 
*/
ActivityMessage.prototype.getPayload = function() {
  return this.payload;
};

ActivityMessage._meta_ =  {fields:  {}};
ActivityMessage._meta_._class_ =  ActivityMessage;
ActivityMessage._meta_._superMeta_ = remotepay_BaseRequest._meta_;
ActivityMessage._meta_.fields["action"] = {};
ActivityMessage._meta_.fields["action"].type = String;
ActivityMessage._meta_.fields["payload"] = {};
ActivityMessage._meta_.fields["payload"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ActivityMessage;
}



/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
ResponseCode = {
  SUCCESS : "SUCCESS",
  FAIL : "FAIL",
  UNSUPPORTED : "UNSUPPORTED",
  CANCEL : "CANCEL",
  DUPLICATE : "DUPLICATE",
  ERROR : "ERROR"
};


//
// Expose the module.
//
if (true) {
module.exports = ResponseCode;
}



/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
DeviceErrorEventCode = {
  InvalidConfig : "InvalidConfig",
  IoSyncFailed : "IoSyncFailed",
  GetString : "GetString",
  InvalidEndpoint : "InvalidEndpoint",
  AbortEndpoint : "AbortEndpoint",
  DeviceIoControl : "DeviceIoControl",
  GetOverlappedResult : "GetOverlappedResult",
  ReceiveThreadTerminated : "ReceiveThreadTerminated",
  WriteFailed : "WriteFailed",
  ReadFailed : "ReadFailed",
  IoControlMessage : "IoControlMessage",
  CancelIoFailed : "CancelIoFailed",
  IoCancelled : "IoCancelled",
  IoTimedOut : "IoTimedOut",
  IoEndpointGlobalCancelRedo : "IoEndpointGlobalCancelRedo",
  GetDeviceKeyValueFailed : "GetDeviceKeyValueFailed",
  SetDeviceKeyValueFailed : "SetDeviceKeyValueFailed",
  Win32Error : "Win32Error",
  DeviceAllreadyLocked : "DeviceAllreadyLocked",
  EndpointAllreadyLocked : "EndpointAllreadyLocked",
  DeviceNotFound : "DeviceNotFound",
  UserAborted : "UserAborted",
  InvalidParam : "InvalidParam",
  AccessDenied : "AccessDenied",
  ResourceBusy : "ResourceBusy",
  Overflow : "Overflow",
  PipeError : "PipeError",
  Interrupted : "Interrupted",
  InsufficientMemory : "InsufficientMemory",
  NotSupported : "NotSupported",
  UnknownError : "UnknownError",
  MonoApiError : "MonoApiError",
  None : "None",
  Success : "Success",
  Ok : "Ok",
  SendNotificationFailure : "SendNotificationFailure",
  NotConnected : "NotConnected"
};


//
// Expose the module.
//
if (true) {
module.exports = DeviceErrorEventCode;
}



/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
DeviceEventState = {
  START : "START",
  FAILED : "FAILED",
  FATAL : "FATAL",
  TRY_AGAIN : "TRY_AGAIN",
  INPUT_ERROR : "INPUT_ERROR",
  PIN_BYPASS_CONFIRM : "PIN_BYPASS_CONFIRM",
  CANCELED : "CANCELED",
  TIMED_OUT : "TIMED_OUT",
  DECLINED : "DECLINED",
  VOIDED : "VOIDED",
  CONFIGURING : "CONFIGURING",
  PROCESSING : "PROCESSING",
  REMOVE_CARD : "REMOVE_CARD",
  PROCESSING_GO_ONLINE : "PROCESSING_GO_ONLINE",
  PROCESSING_CREDIT : "PROCESSING_CREDIT",
  PROCESSING_SWIPE : "PROCESSING_SWIPE",
  SELECT_APPLICATION : "SELECT_APPLICATION",
  PIN_PAD : "PIN_PAD",
  MANUAL_CARD_NUMBER : "MANUAL_CARD_NUMBER",
  MANUAL_CARD_CVV : "MANUAL_CARD_CVV",
  MANUAL_CARD_CVV_UNREADABLE : "MANUAL_CARD_CVV_UNREADABLE",
  MANUAL_CARD_EXPIRATION : "MANUAL_CARD_EXPIRATION",
  SELECT_ACCOUNT : "SELECT_ACCOUNT",
  CASHBACK_CONFIRM : "CASHBACK_CONFIRM",
  CASHBACK_SELECT : "CASHBACK_SELECT",
  CONTACTLESS_TAP_REQUIRED : "CONTACTLESS_TAP_REQUIRED",
  VOICE_REFERRAL_RESULT : "VOICE_REFERRAL_RESULT",
  CONFIRM_PARTIAL_AUTH : "CONFIRM_PARTIAL_AUTH",
  PACKET_EXCEPTION : "PACKET_EXCEPTION",
  CONFIRM_DUPLICATE_CHECK : "CONFIRM_DUPLICATE_CHECK",
  VERIFY_SIGNATURE_ON_PAPER : "VERIFY_SIGNATURE_ON_PAPER",
  VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID",
  VERIFY_SIGNATURE_ON_SCREEN : "VERIFY_SIGNATURE_ON_SCREEN",
  VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID",
  ADD_SIGNATURE : "ADD_SIGNATURE",
  SIGNATURE_ON_SCREEN_FALLBACK : "SIGNATURE_ON_SCREEN_FALLBACK",
  RETURN_TO_MERCHANT : "RETURN_TO_MERCHANT",
  SIGNATURE_REJECT : "SIGNATURE_REJECT",
  ADD_SIGNATURE_CANCEL_CONFIRM : "ADD_SIGNATURE_CANCEL_CONFIRM",
  ADD_TIP : "ADD_TIP",
  RECEIPT_OPTIONS : "RECEIPT_OPTIONS",
  HANDLE_TENDER : "HANDLE_TENDER"
};


//
// Expose the module.
//
if (true) {
module.exports = DeviceEventState;
}



/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
KeyPress = {
  NONE : "NONE",
  ENTER : "ENTER",
  ESC : "ESC",
  BACKSPACE : "BACKSPACE",
  TAB : "TAB",
  STAR : "STAR",
  BUTTON_1 : "BUTTON_1",
  BUTTON_2 : "BUTTON_2",
  BUTTON_3 : "BUTTON_3",
  BUTTON_4 : "BUTTON_4",
  BUTTON_5 : "BUTTON_5",
  BUTTON_6 : "BUTTON_6",
  BUTTON_7 : "BUTTON_7",
  BUTTON_8 : "BUTTON_8",
  DIGIT_1 : "DIGIT_1",
  DIGIT_2 : "DIGIT_2",
  DIGIT_3 : "DIGIT_3",
  DIGIT_4 : "DIGIT_4",
  DIGIT_5 : "DIGIT_5",
  DIGIT_6 : "DIGIT_6",
  DIGIT_7 : "DIGIT_7",
  DIGIT_8 : "DIGIT_8",
  DIGIT_9 : "DIGIT_9",
  DIGIT_0 : "DIGIT_0"
};


//
// Expose the module.
//
if (true) {
module.exports = KeyPress;
}



/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
QueryStatus = {
  FOUND : "FOUND",
  NOT_FOUND : "NOT_FOUND",
  IN_PROGRESS : "IN_PROGRESS"
};


//
// Expose the module.
//
if (true) {
module.exports = QueryStatus;
}



/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
ResultStatus = {
  SUCCESS : "SUCCESS",
  FAIL : "FAIL",
  CANCEL : "CANCEL"
};


//
// Expose the module.
//
if (true) {
module.exports = ResultStatus;
}



/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DefaultCloverDevice_1 = __webpack_require__(165);
/**
 * The base for WebSocket device configurations.
 */
var WebSocketCloverDeviceConfiguration = (function () {
    /**
     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1
     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface
     *    that will be used when connecting.
     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
     * @param {number} [heartbeatInterval] - duration to wait for a PING before disconnecting
     * @param {number} [reconnectDelay] - duration to wait until a reconnect is attempted
     */
    function WebSocketCloverDeviceConfiguration(applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay) {
        this.heartbeatInterval = 1000;
        this.reconnectDelay = 3000;
        this.pingRetryCountBeforeReconnect = 4;
        this.maxCharInMessage = 50000;
        this.imageUtil = imageUtil;
        this.appId = applicationId;
        this.webSocketImplClass = webSocketFactoryFunction;
        if (heartbeatInterval)
            this.heartbeatInterval = Math.max(100, heartbeatInterval);
        if (reconnectDelay)
            this.reconnectDelay = Math.max(100, reconnectDelay);
    }
    WebSocketCloverDeviceConfiguration.prototype.getApplicationId = function () {
        return this.appId;
    };
    WebSocketCloverDeviceConfiguration.prototype.getHeartbeatInterval = function () {
        return this.heartbeatInterval;
    };
    WebSocketCloverDeviceConfiguration.prototype.setHeartbeatInterval = function (heartbeatInterval) {
        this.heartbeatInterval = heartbeatInterval;
    };
    WebSocketCloverDeviceConfiguration.prototype.getReconnectDelay = function () {
        return this.reconnectDelay;
    };
    WebSocketCloverDeviceConfiguration.prototype.setReconnectDelay = function (reconnectDelay) {
        this.reconnectDelay = reconnectDelay;
    };
    WebSocketCloverDeviceConfiguration.prototype.getPingRetryCountBeforeReconnect = function () {
        return this.pingRetryCountBeforeReconnect;
    };
    WebSocketCloverDeviceConfiguration.prototype.setPingRetryCountBeforeReconnect = function (pingRetryCountBeforeReconnect) {
        this.pingRetryCountBeforeReconnect = pingRetryCountBeforeReconnect;
    };
    WebSocketCloverDeviceConfiguration.prototype.getCloverDeviceType = function () {
        return DefaultCloverDevice_1.DefaultCloverDevice;
    };
    WebSocketCloverDeviceConfiguration.prototype.getName = function () {
        return 'Clover WebSocket Connector';
    };
    /**
     * @override
     */
    WebSocketCloverDeviceConfiguration.prototype.getImageUtil = function () {
        return this.imageUtil;
    };
    WebSocketCloverDeviceConfiguration.prototype.getMaxMessageCharacters = function () {
        return this.maxCharInMessage;
    };
    return WebSocketCloverDeviceConfiguration;
}());
exports.WebSocketCloverDeviceConfiguration = WebSocketCloverDeviceConfiguration;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.js.map


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var RemoteMessageParser_1 = __webpack_require__(166);
var CloverWebSocketClient_1 = __webpack_require__(382);
var CloverTransport_1 = __webpack_require__(167);
var Logger_1 = __webpack_require__(7);
/**
 * WebSocket Clover Transport
 *
 * This is a websocket implementation of the Clover Transport.
 */
var WebSocketCloverTransport = (function (_super) {
    __extends(WebSocketCloverTransport, _super);
    function WebSocketCloverTransport(heartbeatInterval, reconnectDelay, retriesUntilDisconnect, webSocketImplClass) {
        var _this = _super.call(this) || this;
        // Create a logger
        _this.logger = Logger_1.Logger.create();
        _this.reconnectDelay = 3000;
        /**
         * We do not wantto start up multiple reconnect threads.  This should alleviate that
         * @type {boolean}
         */
        _this.reconnecting = false;
        _this.messageQueue = new Array();
        _this.status = "Disconnected";
        /**
         * prevent reconnects if shutdown was requested
         */
        _this.shutdown = false;
        _this.reconnector = function () {
            if (!this.shutdown) {
                try {
                    this.initialize();
                }
                catch (e) {
                    this.reconnect();
                }
            }
        }.bind(_this);
        _this.reconnectDelay = Math.max(0, reconnectDelay);
        _this.webSocketImplClass = webSocketImplClass;
        // from WebSocketCloverDeviceConfiguration.getMessagePackageName, which needs to be changeable
        // 'com.clover.remote_protocol_broadcast.app'
        _this.messageParser = RemoteMessageParser_1.RemoteMessageParser.getDefaultInstance();
        var messageSenderId = setInterval(function () {
            if (!_this.shutdown) {
                _this.sendMessageThread();
            }
            else {
                clearInterval(messageSenderId);
            }
        }, 100);
        return _this;
    }
    /**
     * Subclasses need to set this at times.
     *
     * @param newValue
     */
    WebSocketCloverTransport.prototype.setReconnecting = function (newValue) {
        this.reconnecting = newValue;
    };
    WebSocketCloverTransport.prototype.reconnect = function () {
        // If we are already reconnecting, do not start another.
        if (!this.reconnecting) {
            this.setReconnecting(true);
            if (this.shutdown) {
                this.logger.debug("Not attempting to reconnect, shutdown...");
                return;
            }
            setTimeout(this.reconnector, this.reconnectDelay);
        }
        else {
            this.logger.debug("Already attempting to reconnect, will ignore additional request");
        }
    };
    WebSocketCloverTransport.prototype.reset = function () {
        try {
            // By sending this close, the "onClose" will be fired, which will try to reconnect.
            this.cloverWebSocketClient.close(WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.code, WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.reason);
        }
        catch (e) {
            this.logger.error('error resetting transport.', e);
        }
    };
    /**
     * Since this is javascript, this is not an actual thread, but it
     * represents threading the sending of the messages.
     *
     * This just checks the message queue for elements, then sends using
     * a FIFO pattern.
     */
    WebSocketCloverTransport.prototype.sendMessageThread = function () {
        // If we do not have any messages, then don't try to send them
        if (this.messageQueue.length > 0) {
            // let's see if we have connectivity
            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {
                // Hold the message in case we need to put it back on the queue
                var nextMsg = this.messageQueue.shift();
                try {
                    if (this.cloverWebSocketClient.getBufferedAmount() > 0) {
                        this.messageQueue.unshift(nextMsg);
                    }
                    else {
                        this.cloverWebSocketClient.send(nextMsg);
                    }
                }
                catch (e) {
                    // Failed to send, put it back
                    this.messageQueue.unshift(nextMsg);
                    this.reconnect();
                }
            }
            else {
                this.reconnect();
            }
        }
    };
    /**
     * Pushes the message to the queue for sending by the send 'thread'
     *
     * @param message - a string message to send on the websocket
     * @returns {number} negative 1 (-1)
     */
    WebSocketCloverTransport.prototype.sendMessage = function (message) {
        if (!this.shutdown) {
            this.messageQueue.push(message);
        }
        else {
            this.logger.debug('In process of shutting down, ignoring ' + message);
        }
        return -1;
    };
    WebSocketCloverTransport.prototype.clearWebsocket = function () {
        if (this.cloverWebSocketClient != null) {
            this.cloverWebSocketClient.clearListener();
        }
        this.cloverWebSocketClient = null;
    };
    /**
     * Called from subclasses at the end of the constructor.
     *
     * @param deviceEndpoint
     */
    WebSocketCloverTransport.prototype.initializeWithUri = function (deviceEndpoint) {
        // Primary end to the reconnect attempts
        this.setReconnecting(false);
        if (this.cloverWebSocketClient != null) {
            if (this.cloverWebSocketClient.isOpen() || this.cloverWebSocketClient.isConnecting()) {
                return;
            }
            else {
                this.clearWebsocket();
            }
        }
        this.cloverWebSocketClient = new CloverWebSocketClient_1.CloverWebSocketClient(deviceEndpoint, this, 5000, this.webSocketImplClass);
        this.cloverWebSocketClient.connect();
        this.logger.debug('connection attempt done.');
    };
    WebSocketCloverTransport.prototype.dispose = function () {
        this.shutdown = true;
        // Attempt to clear out messages already in the send queue
        this.drainQueue();
        if (this.cloverWebSocketClient != null) {
            this.notifyDeviceDisconnected();
            this.cloverWebSocketClient.close();
        }
        this.clearWebsocket();
    };
    WebSocketCloverTransport.prototype.drainQueue = function () {
        // Attempt to finish off the queue
        while (this.messageQueue.length > 0) {
            // let's see if we have connectivity
            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {
                var nextMsg = this.messageQueue.shift();
                try {
                    this.cloverWebSocketClient.send(nextMsg);
                }
                catch (e) {
                    this.logger.debug('In process of shutting down, an error occurred trying to drain the message queue.  The messages unsent are ' + this.messageQueue);
                    break;
                }
            }
            else {
                this.logger.debug('In process of shutting down, the websocket became disconnected.  The messages unsent are ' + this.messageQueue);
                break;
            }
        }
    };
    WebSocketCloverTransport.prototype.connectionError = function (ws, message) {
        this.logger.debug('Connection error...');
        if (this.cloverWebSocketClient == ws) {
            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                observer.onDeviceDisconnected(this, message);
                var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
                deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);
                deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.NotConnected);
                deviceErrorEvent.setCause(null);
                deviceErrorEvent.setMessage(message);
                observer.onDeviceError(deviceErrorEvent);
            }
        }
    };
    WebSocketCloverTransport.prototype.onNotResponding = function (ws) {
        this.logger.debug('Not Responding...');
        if (this.cloverWebSocketClient == ws) {
            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                this.logger.debug('onNotResponding');
                observer.onDeviceDisconnected(this);
            }
        }
    };
    WebSocketCloverTransport.prototype.onPingResponding = function (ws) {
        this.logger.debug("Ping Responding");
        if (this.cloverWebSocketClient == ws) {
            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                this.logger.debug("onPingResponding");
                observer.onDeviceReady(this);
            }
        }
    };
    WebSocketCloverTransport.prototype.onOpen = function (ws) {
        this.logger.debug("Open...");
        if (this.cloverWebSocketClient == ws) {
            // notify connected
            this.notifyDeviceConnected();
        }
    };
    WebSocketCloverTransport.prototype.onClose = function (ws, code, reason, remote) {
        this.logger.debug("onClose: " + reason + ", remote? " + remote);
        if (this.cloverWebSocketClient == ws) {
            if (!this.cloverWebSocketClient.isClosing()) {
                this.cloverWebSocketClient.clearListener();
                if (!this.cloverWebSocketClient.isClosed()) {
                    this.cloverWebSocketClient.close();
                }
            }
            this.clearWebsocket();
            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                this.logger.debug("onClose");
                observer.onDeviceDisconnected(this);
            }
            if (!this.shutdown) {
                this.reconnect();
            }
        }
    };
    WebSocketCloverTransport.prototype.onMessage = function (wsOrMessage, messageOnly) {
        if (typeof wsOrMessage == 'string') {
            _super.prototype.onMessage.call(this, wsOrMessage);
        }
        else {
            this.onMessage_cwscl(wsOrMessage, messageOnly);
        }
    };
    WebSocketCloverTransport.prototype.onMessage_cwscl = function (ws, message) {
        if (this.cloverWebSocketClient == ws) {
            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                this.logger.debug("Got message: " + message);
                observer.onMessage(message);
            }
        }
    };
    WebSocketCloverTransport.prototype.onSendError = function (payloadText) {
        this.logger.error("WebSocketCloverTransport: An error occurred sending a message.");
    };
    WebSocketCloverTransport.METHOD = "method";
    WebSocketCloverTransport.PAYLOAD = "payload";
    return WebSocketCloverTransport;
}(CloverTransport_1.CloverTransport));
exports.WebSocketCloverTransport = WebSocketCloverTransport;
(function (WebSocketCloverTransport) {
    var CloverWebSocketCloseCode = (function () {
        function CloverWebSocketCloseCode(code, reason) {
            this.code = code;
            this.reason = reason;
        }
        // Using 4000 as a reset code.
        CloverWebSocketCloseCode.RESET_CLOSE_CODE = new CloverWebSocketCloseCode(4000, "Reset requested");
        return CloverWebSocketCloseCode;
    }());
    WebSocketCloverTransport.CloverWebSocketCloseCode = CloverWebSocketCloseCode;
})(WebSocketCloverTransport = exports.WebSocketCloverTransport || (exports.WebSocketCloverTransport = {}));
exports.WebSocketCloverTransport = WebSocketCloverTransport;

//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketCloverTransport.js.map


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var Point = function() {
  this._class_ = Point;
  this.x = undefined;
  this.y = undefined;
};


/**
* Set the field value
* @memberof base.Point
* @param {Number} x must be a long integer
*/
Point.prototype.setX = function(x) {
  this.x = x;
};

/**
* Get the field value
* @memberof base.Point
* @return {Number} must be a long integer
*/
Point.prototype.getX = function() {
  return this.x;
};

/**
* Set the field value
* @memberof base.Point
* @param {Number} y must be a long integer
*/
Point.prototype.setY = function(y) {
  this.y = y;
};

/**
* Get the field value
* @memberof base.Point
* @return {Number} must be a long integer
*/
Point.prototype.getY = function() {
  return this.y;
};

/**
* @memberof base.Point
* @private
*/
Point.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Point.prototype.toString = function() {
  return JSON.stringify(this);
};

Point._meta_ =  {fields:  {}};
Point._meta_._class_ =  Point;
Point._meta_.fields["x"] = {};
Point._meta_.fields["x"].type = Number;
Point._meta_.fields["y"] = {};
Point._meta_.fields["y"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Point;
}



/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Point = __webpack_require__(77);

/**
* @constructor
* @memberof base
*/
var Points = function() {
  this._class_ = Points;
  this.points = undefined;
};


/**
* Set the field value
* @memberof base.Points
* @param {Array.<base.Point>} points An array of 
*/
Points.prototype.setPoints = function(points) {
  this.points = points;
};

/**
* Get the field value
* @memberof base.Points
* @return {Array.<base.Point>} An array of 
*/
Points.prototype.getPoints = function() {
  return this.points;
};

/**
* @memberof base.Points
* @private
*/
Points.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Points.prototype.toString = function() {
  return JSON.stringify(this);
};

Points._meta_ =  {fields:  {}};
Points._meta_._class_ =  Points;
Points._meta_.fields["points"] = {};
Points._meta_.fields["points"].type = Array;
Points._meta_.fields["points"].elementType = base_Point;

//
// Expose the module.
//
if (true) {
module.exports = Points;
}



/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof base
*/
var ServiceCharge = function() {
  this._class_ = ServiceCharge;
  this.id = undefined;
  this.orderRef = undefined;
  this.name = undefined;
  this.enabled = undefined;
  this.percentage = undefined;
  this.percentageDecimal = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof base.ServiceCharge
* @param {String} id 
*/
ServiceCharge.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof base.ServiceCharge
* @return {String} 
*/
ServiceCharge.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the service charge is associated
*
* @memberof base.ServiceCharge
* @param {base.Reference} orderRef 
*/
ServiceCharge.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the service charge is associated
* @memberof base.ServiceCharge
* @return {base.Reference} 
*/
ServiceCharge.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* Service charge name
*
* @memberof base.ServiceCharge
* @param {String} name 
*/
ServiceCharge.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Service charge name
* @memberof base.ServiceCharge
* @return {String} 
*/
ServiceCharge.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* If this service charge is enabled
*
* @memberof base.ServiceCharge
* @param {Boolean} enabled 
*/
ServiceCharge.prototype.setEnabled = function(enabled) {
  this.enabled = enabled;
};

/**
* Get the field value
* If this service charge is enabled
* @memberof base.ServiceCharge
* @return {Boolean} 
*/
ServiceCharge.prototype.getEnabled = function() {
  return this.enabled;
};

/**
* Set the field value
* DEPRECATED
*
* @memberof base.ServiceCharge
* @param {Number} percentage must be a long integer
*/
ServiceCharge.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
};

/**
* Get the field value
* DEPRECATED
* @memberof base.ServiceCharge
* @return {Number} must be a long integer
*/
ServiceCharge.prototype.getPercentage = function() {
  return this.percentage;
};

/**
* Set the field value
* Percent to charge times 10000, e.g. 12.5% will be 125000
*
* @memberof base.ServiceCharge
* @param {Number} percentageDecimal must be a long integer
*/
ServiceCharge.prototype.setPercentageDecimal = function(percentageDecimal) {
  this.percentageDecimal = percentageDecimal;
};

/**
* Get the field value
* Percent to charge times 10000, e.g. 12.5% will be 125000
* @memberof base.ServiceCharge
* @return {Number} must be a long integer
*/
ServiceCharge.prototype.getPercentageDecimal = function() {
  return this.percentageDecimal;
};

/**
* @memberof base.ServiceCharge
* @private
*/
ServiceCharge.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ServiceCharge.prototype.toString = function() {
  return JSON.stringify(this);
};

ServiceCharge._meta_ =  {fields:  {}};
ServiceCharge._meta_._class_ =  ServiceCharge;
ServiceCharge._meta_.fields["id"] = {};
ServiceCharge._meta_.fields["id"].type = String;
ServiceCharge._meta_.fields["orderRef"] = {};
ServiceCharge._meta_.fields["orderRef"].type = base_Reference;
ServiceCharge._meta_.fields["name"] = {};
ServiceCharge._meta_.fields["name"].type = String;
ServiceCharge._meta_.fields["enabled"] = {};
ServiceCharge._meta_.fields["enabled"].type = Boolean;
ServiceCharge._meta_.fields["percentage"] = {};
ServiceCharge._meta_.fields["percentage"].type = Number;
ServiceCharge._meta_.fields["percentageDecimal"] = {};
ServiceCharge._meta_.fields["percentageDecimal"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = ServiceCharge;
}



/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof customers
*/
var Address = function() {
  this._class_ = Address;
  this.id = undefined;
  this.address1 = undefined;
  this.address2 = undefined;
  this.address3 = undefined;
  this.city = undefined;
  this.country = undefined;
  this.state = undefined;
  this.zip = undefined;
  this.customer = undefined;
};


/**
* Set the field value
* @memberof customers.Address
* @param {String} id 
*/
Address.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} address1 
*/
Address.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getAddress1 = function() {
  return this.address1;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} address2 
*/
Address.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getAddress2 = function() {
  return this.address2;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} address3 
*/
Address.prototype.setAddress3 = function(address3) {
  this.address3 = address3;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getAddress3 = function() {
  return this.address3;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} city 
*/
Address.prototype.setCity = function(city) {
  this.city = city;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getCity = function() {
  return this.city;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} country 
*/
Address.prototype.setCountry = function(country) {
  this.country = country;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getCountry = function() {
  return this.country;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} state 
*/
Address.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof customers.Address
* @param {String} zip 
*/
Address.prototype.setZip = function(zip) {
  this.zip = zip;
};

/**
* Get the field value
* @memberof customers.Address
* @return {String} 
*/
Address.prototype.getZip = function() {
  return this.zip;
};

/**
* Set the field value
* Customer who this address belongs to.
*
* @memberof customers.Address
* @param {base.Reference} customer 
*/
Address.prototype.setCustomer = function(customer) {
  this.customer = customer;
};

/**
* Get the field value
* Customer who this address belongs to.
* @memberof customers.Address
* @return {base.Reference} 
*/
Address.prototype.getCustomer = function() {
  return this.customer;
};

/**
* @memberof customers.Address
* @private
*/
Address.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Address.prototype.toString = function() {
  return JSON.stringify(this);
};

Address._meta_ =  {fields:  {}};
Address._meta_._class_ =  Address;
Address._meta_.fields["id"] = {};
Address._meta_.fields["id"].type = String;
Address._meta_.fields["address1"] = {};
Address._meta_.fields["address1"].type = String;
Address._meta_.fields["address2"] = {};
Address._meta_.fields["address2"].type = String;
Address._meta_.fields["address3"] = {};
Address._meta_.fields["address3"].type = String;
Address._meta_.fields["city"] = {};
Address._meta_.fields["city"].type = String;
Address._meta_.fields["country"] = {};
Address._meta_.fields["country"].type = String;
Address._meta_.fields["state"] = {};
Address._meta_.fields["state"].type = String;
Address._meta_.fields["zip"] = {};
Address._meta_.fields["zip"].type = String;
Address._meta_.fields["customer"] = {};
Address._meta_.fields["customer"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Address;
}



/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);
var customers_TokenType = __webpack_require__(82);

/**
* @constructor
* @memberof customers
*/
var Card = function() {
  this._class_ = Card;
  this.id = undefined;
  this.first6 = undefined;
  this.last4 = undefined;
  this.firstName = undefined;
  this.lastName = undefined;
  this.expirationDate = undefined;
  this.cardType = undefined;
  this.token = undefined;
  this.tokenType = undefined;
  this.customer = undefined;
};


/**
* Set the field value
* @memberof customers.Card
* @param {String} id 
*/
Card.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} first6 
*/
Card.prototype.setFirst6 = function(first6) {
  this.first6 = first6;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getFirst6 = function() {
  return this.first6;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} last4 
*/
Card.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} firstName 
*/
Card.prototype.setFirstName = function(firstName) {
  this.firstName = firstName;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getFirstName = function() {
  return this.firstName;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} lastName 
*/
Card.prototype.setLastName = function(lastName) {
  this.lastName = lastName;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getLastName = function() {
  return this.lastName;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} expirationDate 
*/
Card.prototype.setExpirationDate = function(expirationDate) {
  this.expirationDate = expirationDate;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getExpirationDate = function() {
  return this.expirationDate;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} cardType 
*/
Card.prototype.setCardType = function(cardType) {
  this.cardType = cardType;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getCardType = function() {
  return this.cardType;
};

/**
* Set the field value
* @memberof customers.Card
* @param {String} token 
*/
Card.prototype.setToken = function(token) {
  this.token = token;
};

/**
* Get the field value
* @memberof customers.Card
* @return {String} 
*/
Card.prototype.getToken = function() {
  return this.token;
};

/**
* Set the field value
* @memberof customers.Card
* @param {customers.TokenType} tokenType 
*/
Card.prototype.setTokenType = function(tokenType) {
  this.tokenType = tokenType;
};

/**
* Get the field value
* @memberof customers.Card
* @return {customers.TokenType} 
*/
Card.prototype.getTokenType = function() {
  return this.tokenType;
};

/**
* Set the field value
* Customer who this card belongs to.
*
* @memberof customers.Card
* @param {base.Reference} customer 
*/
Card.prototype.setCustomer = function(customer) {
  this.customer = customer;
};

/**
* Get the field value
* Customer who this card belongs to.
* @memberof customers.Card
* @return {base.Reference} 
*/
Card.prototype.getCustomer = function() {
  return this.customer;
};

/**
* @memberof customers.Card
* @private
*/
Card.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Card.prototype.toString = function() {
  return JSON.stringify(this);
};

Card._meta_ =  {fields:  {}};
Card._meta_._class_ =  Card;
Card._meta_.fields["id"] = {};
Card._meta_.fields["id"].type = String;
Card._meta_.fields["first6"] = {};
Card._meta_.fields["first6"].type = String;
Card._meta_.fields["last4"] = {};
Card._meta_.fields["last4"].type = String;
Card._meta_.fields["firstName"] = {};
Card._meta_.fields["firstName"].type = String;
Card._meta_.fields["lastName"] = {};
Card._meta_.fields["lastName"].type = String;
Card._meta_.fields["expirationDate"] = {};
Card._meta_.fields["expirationDate"].type = String;
Card._meta_.fields["cardType"] = {};
Card._meta_.fields["cardType"].type = String;
Card._meta_.fields["token"] = {};
Card._meta_.fields["token"].type = String;
Card._meta_.fields["tokenType"] = {};
Card._meta_.fields["tokenType"].type = customers_TokenType;
Card._meta_.fields["customer"] = {};
Card._meta_.fields["customer"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Card;
}



/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof customers
* @enum {string}
*/
TokenType = {
  MULTIPAY : "MULTIPAY",
  FINANCIAL : "FINANCIAL"
};


//
// Expose the module.
//
if (true) {
module.exports = TokenType;
}



/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof customers
*/
var EmailAddress = function() {
  this._class_ = EmailAddress;
  this.id = undefined;
  this.emailAddress = undefined;
  this.verifiedTime = undefined;
  this.customer = undefined;
};


/**
* Set the field value
* @memberof customers.EmailAddress
* @param {String} id 
*/
EmailAddress.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof customers.EmailAddress
* @return {String} 
*/
EmailAddress.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof customers.EmailAddress
* @param {String} emailAddress 
*/
EmailAddress.prototype.setEmailAddress = function(emailAddress) {
  this.emailAddress = emailAddress;
};

/**
* Get the field value
* @memberof customers.EmailAddress
* @return {String} 
*/
EmailAddress.prototype.getEmailAddress = function() {
  return this.emailAddress;
};

/**
* Set the field value
* @memberof customers.EmailAddress
* @param {Number} verifiedTime must be a long integer
*/
EmailAddress.prototype.setVerifiedTime = function(verifiedTime) {
  this.verifiedTime = verifiedTime;
};

/**
* Get the field value
* @memberof customers.EmailAddress
* @return {Number} must be a long integer
*/
EmailAddress.prototype.getVerifiedTime = function() {
  return this.verifiedTime;
};

/**
* Set the field value
* Customer who this email address belongs to.
*
* @memberof customers.EmailAddress
* @param {base.Reference} customer 
*/
EmailAddress.prototype.setCustomer = function(customer) {
  this.customer = customer;
};

/**
* Get the field value
* Customer who this email address belongs to.
* @memberof customers.EmailAddress
* @return {base.Reference} 
*/
EmailAddress.prototype.getCustomer = function() {
  return this.customer;
};

/**
* @memberof customers.EmailAddress
* @private
*/
EmailAddress.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

EmailAddress.prototype.toString = function() {
  return JSON.stringify(this);
};

EmailAddress._meta_ =  {fields:  {}};
EmailAddress._meta_._class_ =  EmailAddress;
EmailAddress._meta_.fields["id"] = {};
EmailAddress._meta_.fields["id"].type = String;
EmailAddress._meta_.fields["emailAddress"] = {};
EmailAddress._meta_.fields["emailAddress"].type = String;
EmailAddress._meta_.fields["verifiedTime"] = {};
EmailAddress._meta_.fields["verifiedTime"].type = Number;
EmailAddress._meta_.fields["customer"] = {};
EmailAddress._meta_.fields["customer"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = EmailAddress;
}



/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof customers
*/
var PhoneNumber = function() {
  this._class_ = PhoneNumber;
  this.id = undefined;
  this.phoneNumber = undefined;
  this.customer = undefined;
};


/**
* Set the field value
* @memberof customers.PhoneNumber
* @param {String} id 
*/
PhoneNumber.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof customers.PhoneNumber
* @return {String} 
*/
PhoneNumber.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof customers.PhoneNumber
* @param {String} phoneNumber 
*/
PhoneNumber.prototype.setPhoneNumber = function(phoneNumber) {
  this.phoneNumber = phoneNumber;
};

/**
* Get the field value
* @memberof customers.PhoneNumber
* @return {String} 
*/
PhoneNumber.prototype.getPhoneNumber = function() {
  return this.phoneNumber;
};

/**
* Set the field value
* Customer who this phone number belongs to.
*
* @memberof customers.PhoneNumber
* @param {base.Reference} customer 
*/
PhoneNumber.prototype.setCustomer = function(customer) {
  this.customer = customer;
};

/**
* Get the field value
* Customer who this phone number belongs to.
* @memberof customers.PhoneNumber
* @return {base.Reference} 
*/
PhoneNumber.prototype.getCustomer = function() {
  return this.customer;
};

/**
* @memberof customers.PhoneNumber
* @private
*/
PhoneNumber.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PhoneNumber.prototype.toString = function() {
  return JSON.stringify(this);
};

PhoneNumber._meta_ =  {fields:  {}};
PhoneNumber._meta_._class_ =  PhoneNumber;
PhoneNumber._meta_.fields["id"] = {};
PhoneNumber._meta_.fields["id"].type = String;
PhoneNumber._meta_.fields["phoneNumber"] = {};
PhoneNumber._meta_.fields["phoneNumber"].type = String;
PhoneNumber._meta_.fields["customer"] = {};
PhoneNumber._meta_.fields["customer"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = PhoneNumber;
}



/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof customers
*/
var CustomerMetadata = function() {
  this._class_ = CustomerMetadata;
  this.businessName = undefined;
  this.note = undefined;
  this.dobYear = undefined;
  this.dobMonth = undefined;
  this.dobDay = undefined;
  this.modifiedTime = undefined;
  this.customer = undefined;
};


/**
* Set the field value
* The name of the business the customer is associated with.
*
* @memberof customers.CustomerMetadata
* @param {String} businessName 
*/
CustomerMetadata.prototype.setBusinessName = function(businessName) {
  this.businessName = businessName;
};

/**
* Get the field value
* The name of the business the customer is associated with.
* @memberof customers.CustomerMetadata
* @return {String} 
*/
CustomerMetadata.prototype.getBusinessName = function() {
  return this.businessName;
};

/**
* Set the field value
* A note about the customer.
*
* @memberof customers.CustomerMetadata
* @param {String} note 
*/
CustomerMetadata.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* A note about the customer.
* @memberof customers.CustomerMetadata
* @return {String} 
*/
CustomerMetadata.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* The year part of the date of birth for this customer. This part of the date of birth is optional, i.e., it's possible that only dobMonth and dobDay are populated.
*
* @memberof customers.CustomerMetadata
* @param {Number} dobYear must be an integer
*/
CustomerMetadata.prototype.setDobYear = function(dobYear) {
  this.dobYear = dobYear;
};

/**
* Get the field value
* The year part of the date of birth for this customer. This part of the date of birth is optional, i.e., it's possible that only dobMonth and dobDay are populated.
* @memberof customers.CustomerMetadata
* @return {Number} must be an integer
*/
CustomerMetadata.prototype.getDobYear = function() {
  return this.dobYear;
};

/**
* Set the field value
* The month part of the date of birth for this customer.
*
* @memberof customers.CustomerMetadata
* @param {Number} dobMonth must be an integer
*/
CustomerMetadata.prototype.setDobMonth = function(dobMonth) {
  this.dobMonth = dobMonth;
};

/**
* Get the field value
* The month part of the date of birth for this customer.
* @memberof customers.CustomerMetadata
* @return {Number} must be an integer
*/
CustomerMetadata.prototype.getDobMonth = function() {
  return this.dobMonth;
};

/**
* Set the field value
* The day part of the date of birth for this customer.
*
* @memberof customers.CustomerMetadata
* @param {Number} dobDay must be an integer
*/
CustomerMetadata.prototype.setDobDay = function(dobDay) {
  this.dobDay = dobDay;
};

/**
* Get the field value
* The day part of the date of birth for this customer.
* @memberof customers.CustomerMetadata
* @return {Number} must be an integer
*/
CustomerMetadata.prototype.getDobDay = function() {
  return this.dobDay;
};

/**
* Set the field value
* The timestamp from when this customer's data was last updated.
*
* @memberof customers.CustomerMetadata
* @param {Number} modifiedTime must be a long integer
*/
CustomerMetadata.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* The timestamp from when this customer's data was last updated.
* @memberof customers.CustomerMetadata
* @return {Number} must be a long integer
*/
CustomerMetadata.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* Set the field value
* Customer who this metadata belongs to.
*
* @memberof customers.CustomerMetadata
* @param {base.Reference} customer 
*/
CustomerMetadata.prototype.setCustomer = function(customer) {
  this.customer = customer;
};

/**
* Get the field value
* Customer who this metadata belongs to.
* @memberof customers.CustomerMetadata
* @return {base.Reference} 
*/
CustomerMetadata.prototype.getCustomer = function() {
  return this.customer;
};

/**
* @memberof customers.CustomerMetadata
* @private
*/
CustomerMetadata.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CustomerMetadata.prototype.toString = function() {
  return JSON.stringify(this);
};

CustomerMetadata._meta_ =  {fields:  {}};
CustomerMetadata._meta_._class_ =  CustomerMetadata;
CustomerMetadata._meta_.fields["businessName"] = {};
CustomerMetadata._meta_.fields["businessName"].type = String;
CustomerMetadata._meta_.fields["note"] = {};
CustomerMetadata._meta_.fields["note"].type = String;
CustomerMetadata._meta_.fields["dobYear"] = {};
CustomerMetadata._meta_.fields["dobYear"].type = Number;
CustomerMetadata._meta_.fields["dobMonth"] = {};
CustomerMetadata._meta_.fields["dobMonth"].type = Number;
CustomerMetadata._meta_.fields["dobDay"] = {};
CustomerMetadata._meta_.fields["dobDay"].type = Number;
CustomerMetadata._meta_.fields["modifiedTime"] = {};
CustomerMetadata._meta_.fields["modifiedTime"].type = Number;
CustomerMetadata._meta_.fields["customer"] = {};
CustomerMetadata._meta_.fields["customer"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = CustomerMetadata;
}



/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof device
* @enum {string}
*/
BuildType = {
  ENG : "ENG",
  USER : "USER",
  USERDEBUG : "USERDEBUG"
};


//
// Expose the module.
//
if (true) {
module.exports = BuildType;
}



/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof device
* @enum {string}
*/
DeviceAccessoryBuildType = {
  ENG : "ENG",
  USER : "USER",
  USERDEBUG : "USERDEBUG"
};


//
// Expose the module.
//
if (true) {
module.exports = DeviceAccessoryBuildType;
}



/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof device
* @enum {string}
*/
DeviceProvisionState = {
  NOT_ASSOCIATED : "NOT_ASSOCIATED",
  DISASSOCIATED : "DISASSOCIATED",
  ASSOCIATED : "ASSOCIATED"
};


//
// Expose the module.
//
if (true) {
module.exports = DeviceProvisionState;
}



/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof device
* @enum {string}
*/
RomBuildType = {
  ENG : "ENG",
  USER : "USER"
};


//
// Expose the module.
//
if (true) {
module.exports = RomBuildType;
}



/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var employees_AccountRole = __webpack_require__(44);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof employees
*/
var Employee = function() {
  this._class_ = Employee;
  this.id = undefined;
  this.name = undefined;
  this.nickname = undefined;
  this.customId = undefined;
  this.email = undefined;
  this.inviteSent = undefined;
  this.claimedTime = undefined;
  this.deletedTime = undefined;
  this.pin = undefined;
  this.unhashedPin = undefined;
  this.role = undefined;
  this.roles = undefined;
  this.isOwner = undefined;
  this.shifts = undefined;
  this.payments = undefined;
  this.orders = undefined;
  this.employeeCards = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.Employee
* @param {String} id 
*/
Employee.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.Employee
* @return {String} 
*/
Employee.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Full name of the employee
*
* @memberof employees.Employee
* @param {String} name 
*/
Employee.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Full name of the employee
* @memberof employees.Employee
* @return {String} 
*/
Employee.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Nickname of the employee (shows up on receipts)
*
* @memberof employees.Employee
* @param {Null|String} nickname 
*/
Employee.prototype.setNickname = function(nickname) {
  this.nickname = nickname;
};

/**
* Get the field value
* Nickname of the employee (shows up on receipts)
* @memberof employees.Employee
* @return {Null|String} 
*/
Employee.prototype.getNickname = function() {
  return this.nickname;
};

/**
* Set the field value
* Custom ID of the employee
*
* @memberof employees.Employee
* @param {Null|String} customId 
*/
Employee.prototype.setCustomId = function(customId) {
  this.customId = customId;
};

/**
* Get the field value
* Custom ID of the employee
* @memberof employees.Employee
* @return {Null|String} 
*/
Employee.prototype.getCustomId = function() {
  return this.customId;
};

/**
* Set the field value
* Email of the employee (optional)
*
* @memberof employees.Employee
* @param {Null|String} email 
*/
Employee.prototype.setEmail = function(email) {
  this.email = email;
};

/**
* Get the field value
* Email of the employee (optional)
* @memberof employees.Employee
* @return {Null|String} 
*/
Employee.prototype.getEmail = function() {
  return this.email;
};

/**
* Set the field value
* Returns true if this employee was sent an invite to activate their account
*
* @memberof employees.Employee
* @param {Boolean} inviteSent 
*/
Employee.prototype.setInviteSent = function(inviteSent) {
  this.inviteSent = inviteSent;
};

/**
* Get the field value
* Returns true if this employee was sent an invite to activate their account
* @memberof employees.Employee
* @return {Boolean} 
*/
Employee.prototype.getInviteSent = function() {
  return this.inviteSent;
};

/**
* Set the field value
* Timestamp of when this employee claimed their account
*
* @memberof employees.Employee
* @param {Number} claimedTime must be a long integer
*/
Employee.prototype.setClaimedTime = function(claimedTime) {
  this.claimedTime = claimedTime;
};

/**
* Get the field value
* Timestamp of when this employee claimed their account
* @memberof employees.Employee
* @return {Number} must be a long integer
*/
Employee.prototype.getClaimedTime = function() {
  return this.claimedTime;
};

/**
* Set the field value
* Timestamp of when this employee was deleted
*
* @memberof employees.Employee
* @param {Number} deletedTime must be a long integer
*/
Employee.prototype.setDeletedTime = function(deletedTime) {
  this.deletedTime = deletedTime;
};

/**
* Get the field value
* Timestamp of when this employee was deleted
* @memberof employees.Employee
* @return {Number} must be a long integer
*/
Employee.prototype.getDeletedTime = function() {
  return this.deletedTime;
};

/**
* Set the field value
* Employee PIN (hashed)
*
* @memberof employees.Employee
* @param {String} pin 
*/
Employee.prototype.setPin = function(pin) {
  this.pin = pin;
};

/**
* Get the field value
* Employee PIN (hashed)
* @memberof employees.Employee
* @return {String} 
*/
Employee.prototype.getPin = function() {
  return this.pin;
};

/**
* Set the field value
* Employee PIN
*
* @memberof employees.Employee
* @param {String} unhashedPin 
*/
Employee.prototype.setUnhashedPin = function(unhashedPin) {
  this.unhashedPin = unhashedPin;
};

/**
* Get the field value
* Employee PIN
* @memberof employees.Employee
* @return {String} 
*/
Employee.prototype.getUnhashedPin = function() {
  return this.unhashedPin;
};

/**
* Set the field value
* Employee System Role
*
* @memberof employees.Employee
* @param {employees.AccountRole} role 
*/
Employee.prototype.setRole = function(role) {
  this.role = role;
};

/**
* Get the field value
* Employee System Role
* @memberof employees.Employee
* @return {employees.AccountRole} 
*/
Employee.prototype.getRole = function() {
  return this.role;
};

/**
* Set the field value
* @memberof employees.Employee
* @param {Array.<base.Reference>} roles An array of 
*/
Employee.prototype.setRoles = function(roles) {
  this.roles = roles;
};

/**
* Get the field value
* @memberof employees.Employee
* @return {Array.<base.Reference>} An array of 
*/
Employee.prototype.getRoles = function() {
  return this.roles;
};

/**
* Set the field value
* Returns true if this employee is the owner account for this merchant
*
* @memberof employees.Employee
* @param {Boolean} isOwner 
*/
Employee.prototype.setIsOwner = function(isOwner) {
  this.isOwner = isOwner;
};

/**
* Get the field value
* Returns true if this employee is the owner account for this merchant
* @memberof employees.Employee
* @return {Boolean} 
*/
Employee.prototype.getIsOwner = function() {
  return this.isOwner;
};

/**
* Set the field value
* This employee's shifts
*
* @memberof employees.Employee
* @param {Array.<base.Reference>} shifts An array of 
*/
Employee.prototype.setShifts = function(shifts) {
  this.shifts = shifts;
};

/**
* Get the field value
* This employee's shifts
* @memberof employees.Employee
* @return {Array.<base.Reference>} An array of 
*/
Employee.prototype.getShifts = function() {
  return this.shifts;
};

/**
* Set the field value
* This employee's payments
*
* @memberof employees.Employee
* @param {Array.<base.Reference>} payments An array of 
*/
Employee.prototype.setPayments = function(payments) {
  this.payments = payments;
};

/**
* Get the field value
* This employee's payments
* @memberof employees.Employee
* @return {Array.<base.Reference>} An array of 
*/
Employee.prototype.getPayments = function() {
  return this.payments;
};

/**
* Set the field value
* This employee's orders
*
* @memberof employees.Employee
* @param {Array.<base.Reference>} orders An array of 
*/
Employee.prototype.setOrders = function(orders) {
  this.orders = orders;
};

/**
* Get the field value
* This employee's orders
* @memberof employees.Employee
* @return {Array.<base.Reference>} An array of 
*/
Employee.prototype.getOrders = function() {
  return this.orders;
};

/**
* Set the field value
* This employee's employee cards
*
* @memberof employees.Employee
* @param {Array.<base.Reference>} employeeCards An array of 
*/
Employee.prototype.setEmployeeCards = function(employeeCards) {
  this.employeeCards = employeeCards;
};

/**
* Get the field value
* This employee's employee cards
* @memberof employees.Employee
* @return {Array.<base.Reference>} An array of 
*/
Employee.prototype.getEmployeeCards = function() {
  return this.employeeCards;
};

/**
* @memberof employees.Employee
* @private
*/
Employee.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Employee.prototype.toString = function() {
  return JSON.stringify(this);
};

Employee._meta_ =  {fields:  {}};
Employee._meta_._class_ =  Employee;
Employee._meta_.fields["id"] = {};
Employee._meta_.fields["id"].type = String;
Employee._meta_.fields["name"] = {};
Employee._meta_.fields["name"].type = String;
Employee._meta_.fields["nickname"] = {};
Employee._meta_.fields["nickname"].type = String;
Employee._meta_.fields["customId"] = {};
Employee._meta_.fields["customId"].type = String;
Employee._meta_.fields["email"] = {};
Employee._meta_.fields["email"].type = String;
Employee._meta_.fields["inviteSent"] = {};
Employee._meta_.fields["inviteSent"].type = Boolean;
Employee._meta_.fields["claimedTime"] = {};
Employee._meta_.fields["claimedTime"].type = Number;
Employee._meta_.fields["deletedTime"] = {};
Employee._meta_.fields["deletedTime"].type = Number;
Employee._meta_.fields["pin"] = {};
Employee._meta_.fields["pin"].type = String;
Employee._meta_.fields["unhashedPin"] = {};
Employee._meta_.fields["unhashedPin"].type = String;
Employee._meta_.fields["role"] = {};
Employee._meta_.fields["role"].type = employees_AccountRole;
Employee._meta_.fields["roles"] = {};
Employee._meta_.fields["roles"].type = Array;
Employee._meta_.fields["roles"].elementType = base_Reference;
Employee._meta_.fields["isOwner"] = {};
Employee._meta_.fields["isOwner"].type = Boolean;
Employee._meta_.fields["shifts"] = {};
Employee._meta_.fields["shifts"].type = Array;
Employee._meta_.fields["shifts"].elementType = base_Reference;
Employee._meta_.fields["payments"] = {};
Employee._meta_.fields["payments"].type = Array;
Employee._meta_.fields["payments"].elementType = base_Reference;
Employee._meta_.fields["orders"] = {};
Employee._meta_.fields["orders"].type = Array;
Employee._meta_.fields["orders"].elementType = base_Reference;
Employee._meta_.fields["employeeCards"] = {};
Employee._meta_.fields["employeeCards"].type = Array;
Employee._meta_.fields["employeeCards"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Employee;
}



/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof employees
* @enum {string}
*/
EmployeeCardStatus = {
  ACTIVE : "ACTIVE",
  DISABLED : "DISABLED"
};


//
// Expose the module.
//
if (true) {
module.exports = EmployeeCardStatus;
}



/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof employees
* @enum {string}
*/
Permission = {
  ORDERS_R : "ORDERS_R",
  ORDERS_W : "ORDERS_W",
  INVENTORY_R : "INVENTORY_R",
  INVENTORY_W : "INVENTORY_W",
  PAYMENTS_R : "PAYMENTS_R",
  PAYMENTS_W : "PAYMENTS_W",
  CUSTOMERS_R : "CUSTOMERS_R",
  CUSTOMERS_W : "CUSTOMERS_W",
  EMPLOYEES_R : "EMPLOYEES_R",
  EMPLOYEES_W : "EMPLOYEES_W",
  MERCHANT_R : "MERCHANT_R",
  MERCHANT_W : "MERCHANT_W"
};


//
// Expose the module.
//
if (true) {
module.exports = Permission;
}



/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var employees_Permission = __webpack_require__(92);

/**
* @constructor
* @memberof employees
*/
var Permissions = function() {
  this._class_ = Permissions;
  this.id = undefined;
  this.bits = undefined;
  this.readablePermissions = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.Permissions
* @param {String} id 
*/
Permissions.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.Permissions
* @return {String} 
*/
Permissions.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* A bitmap representing the permissions
*
* @memberof employees.Permissions
* @param {Number} bits must be a long integer
*/
Permissions.prototype.setBits = function(bits) {
  this.bits = bits;
};

/**
* Get the field value
* A bitmap representing the permissions
* @memberof employees.Permissions
* @return {Number} must be a long integer
*/
Permissions.prototype.getBits = function() {
  return this.bits;
};

/**
* Set the field value
* A readable list of permissions
*
* @memberof employees.Permissions
* @param {Array.<employees.Permission>} readablePermissions An array of 
*/
Permissions.prototype.setReadablePermissions = function(readablePermissions) {
  this.readablePermissions = readablePermissions;
};

/**
* Get the field value
* A readable list of permissions
* @memberof employees.Permissions
* @return {Array.<employees.Permission>} An array of 
*/
Permissions.prototype.getReadablePermissions = function() {
  return this.readablePermissions;
};

/**
* @memberof employees.Permissions
* @private
*/
Permissions.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Permissions.prototype.toString = function() {
  return JSON.stringify(this);
};

Permissions._meta_ =  {fields:  {}};
Permissions._meta_._class_ =  Permissions;
Permissions._meta_.fields["id"] = {};
Permissions._meta_.fields["id"].type = String;
Permissions._meta_.fields["bits"] = {};
Permissions._meta_.fields["bits"].type = Number;
Permissions._meta_.fields["readablePermissions"] = {};
Permissions._meta_.fields["readablePermissions"].type = Array;
Permissions._meta_.fields["readablePermissions"].elementType = employees_Permission;

//
// Expose the module.
//
if (true) {
module.exports = Permissions;
}



/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof hours
*/
var HourRange = function() {
  this._class_ = HourRange;
  this.start = undefined;
  this.end = undefined;
};


/**
* Set the field value
* @memberof hours.HourRange
* @param {Number} start must be an integer
*/
HourRange.prototype.setStart = function(start) {
  this.start = start;
};

/**
* Get the field value
* @memberof hours.HourRange
* @return {Number} must be an integer
*/
HourRange.prototype.getStart = function() {
  return this.start;
};

/**
* Set the field value
* @memberof hours.HourRange
* @param {Number} end must be an integer
*/
HourRange.prototype.setEnd = function(end) {
  this.end = end;
};

/**
* Get the field value
* @memberof hours.HourRange
* @return {Number} must be an integer
*/
HourRange.prototype.getEnd = function() {
  return this.end;
};

/**
* @memberof hours.HourRange
* @private
*/
HourRange.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

HourRange.prototype.toString = function() {
  return JSON.stringify(this);
};

HourRange._meta_ =  {fields:  {}};
HourRange._meta_._class_ =  HourRange;
HourRange._meta_.fields["start"] = {};
HourRange._meta_.fields["start"].type = Number;
HourRange._meta_.fields["end"] = {};
HourRange._meta_.fields["end"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = HourRange;
}



/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var hours_HourRange = __webpack_require__(94);
var hours_Reference = __webpack_require__(96);

/**
* @constructor
* @memberof hours
*/
var HoursSet = function() {
  this._class_ = HoursSet;
  this.id = undefined;
  this.name = undefined;
  this.reference = undefined;
  this.sunday = undefined;
  this.monday = undefined;
  this.tuesday = undefined;
  this.wednesday = undefined;
  this.thursday = undefined;
  this.friday = undefined;
  this.saturday = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof hours.HoursSet
* @param {String} id 
*/
HoursSet.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof hours.HoursSet
* @return {String} 
*/
HoursSet.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Friendly name to describe the hours
*
* @memberof hours.HoursSet
* @param {String} name 
*/
HoursSet.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Friendly name to describe the hours
* @memberof hours.HoursSet
* @return {String} 
*/
HoursSet.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Null|hours.Reference} reference 
*/
HoursSet.prototype.setReference = function(reference) {
  this.reference = reference;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Null|hours.Reference} 
*/
HoursSet.prototype.getReference = function() {
  return this.reference;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} sunday An array of 
*/
HoursSet.prototype.setSunday = function(sunday) {
  this.sunday = sunday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getSunday = function() {
  return this.sunday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} monday An array of 
*/
HoursSet.prototype.setMonday = function(monday) {
  this.monday = monday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getMonday = function() {
  return this.monday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} tuesday An array of 
*/
HoursSet.prototype.setTuesday = function(tuesday) {
  this.tuesday = tuesday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getTuesday = function() {
  return this.tuesday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} wednesday An array of 
*/
HoursSet.prototype.setWednesday = function(wednesday) {
  this.wednesday = wednesday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getWednesday = function() {
  return this.wednesday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} thursday An array of 
*/
HoursSet.prototype.setThursday = function(thursday) {
  this.thursday = thursday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getThursday = function() {
  return this.thursday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} friday An array of 
*/
HoursSet.prototype.setFriday = function(friday) {
  this.friday = friday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getFriday = function() {
  return this.friday;
};

/**
* Set the field value
* @memberof hours.HoursSet
* @param {Array.<hours.HourRange>} saturday An array of 
*/
HoursSet.prototype.setSaturday = function(saturday) {
  this.saturday = saturday;
};

/**
* Get the field value
* @memberof hours.HoursSet
* @return {Array.<hours.HourRange>} An array of 
*/
HoursSet.prototype.getSaturday = function() {
  return this.saturday;
};

/**
* @memberof hours.HoursSet
* @private
*/
HoursSet.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

HoursSet.prototype.toString = function() {
  return JSON.stringify(this);
};

HoursSet._meta_ =  {fields:  {}};
HoursSet._meta_._class_ =  HoursSet;
HoursSet._meta_.fields["id"] = {};
HoursSet._meta_.fields["id"].type = String;
HoursSet._meta_.fields["name"] = {};
HoursSet._meta_.fields["name"].type = String;
HoursSet._meta_.fields["reference"] = {};
HoursSet._meta_.fields["reference"].type = hours_Reference;
HoursSet._meta_.fields["sunday"] = {};
HoursSet._meta_.fields["sunday"].type = Array;
HoursSet._meta_.fields["sunday"].elementType = hours_HourRange;
HoursSet._meta_.fields["monday"] = {};
HoursSet._meta_.fields["monday"].type = Array;
HoursSet._meta_.fields["monday"].elementType = hours_HourRange;
HoursSet._meta_.fields["tuesday"] = {};
HoursSet._meta_.fields["tuesday"].type = Array;
HoursSet._meta_.fields["tuesday"].elementType = hours_HourRange;
HoursSet._meta_.fields["wednesday"] = {};
HoursSet._meta_.fields["wednesday"].type = Array;
HoursSet._meta_.fields["wednesday"].elementType = hours_HourRange;
HoursSet._meta_.fields["thursday"] = {};
HoursSet._meta_.fields["thursday"].type = Array;
HoursSet._meta_.fields["thursday"].elementType = hours_HourRange;
HoursSet._meta_.fields["friday"] = {};
HoursSet._meta_.fields["friday"].type = Array;
HoursSet._meta_.fields["friday"].elementType = hours_HourRange;
HoursSet._meta_.fields["saturday"] = {};
HoursSet._meta_.fields["saturday"].type = Array;
HoursSet._meta_.fields["saturday"].elementType = hours_HourRange;

//
// Expose the module.
//
if (true) {
module.exports = HoursSet;
}



/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var hours_ReferenceType = __webpack_require__(97);

/**
* @constructor
* @memberof hours
*/
var Reference = function() {
  this._class_ = Reference;
  this.id = undefined;
  this.type = undefined;
};


/**
* Set the field value
* ID of the reference that uses this set of hours
*
* @memberof hours.Reference
* @param {String} id 
*/
Reference.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* ID of the reference that uses this set of hours
* @memberof hours.Reference
* @return {String} 
*/
Reference.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* External type that these hours reference
*
* @memberof hours.Reference
* @param {hours.ReferenceType} type 
*/
Reference.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* External type that these hours reference
* @memberof hours.Reference
* @return {hours.ReferenceType} 
*/
Reference.prototype.getType = function() {
  return this.type;
};

/**
* @memberof hours.Reference
* @private
*/
Reference.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Reference.prototype.toString = function() {
  return JSON.stringify(this);
};

Reference._meta_ =  {fields:  {}};
Reference._meta_._class_ =  Reference;
Reference._meta_.fields["id"] = {};
Reference._meta_.fields["id"].type = String;
Reference._meta_.fields["type"] = {};
Reference._meta_.fields["type"].type = hours_ReferenceType;

//
// Expose the module.
//
if (true) {
module.exports = Reference;
}



/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof hours
* @enum {string}
*/
ReferenceType = {
  ORDER_TYPE : "ORDER_TYPE",
  ITEM_GROUP : "ITEM_GROUP",
  SOFTWARE_UPDATE_EXCLUSION : "SOFTWARE_UPDATE_EXCLUSION"
};


//
// Expose the module.
//
if (true) {
module.exports = ReferenceType;
}



/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/** The class is used to update the item stock. */
/**
* @constructor
* @memberof inventory
*/
var ItemStock = function() {
  this._class_ = ItemStock;
  this.item = undefined;
  this.stockCount = undefined;
  this.quantity = undefined;
};


/**
* Set the field value
* Reference to an item
*
* @memberof inventory.ItemStock
* @param {base.Reference} item 
*/
ItemStock.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* Reference to an item
* @memberof inventory.ItemStock
* @return {base.Reference} 
*/
ItemStock.prototype.getItem = function() {
  return this.item;
};

/**
* Set the field value
* DEPRECATED: use quantity instead
*
* @memberof inventory.ItemStock
* @param {Null|Number} stockCount must be a long integer
*/
ItemStock.prototype.setStockCount = function(stockCount) {
  this.stockCount = stockCount;
};

/**
* Get the field value
* DEPRECATED: use quantity instead
* @memberof inventory.ItemStock
* @return {Null|Number} must be a long integer
*/
ItemStock.prototype.getStockCount = function() {
  return this.stockCount;
};

/**
* Set the field value
* Current count of this item in stock
*
* @memberof inventory.ItemStock
* @param {Number} quantity must be a double
*/
ItemStock.prototype.setQuantity = function(quantity) {
  this.quantity = quantity;
};

/**
* Get the field value
* Current count of this item in stock
* @memberof inventory.ItemStock
* @return {Number} must be a double
*/
ItemStock.prototype.getQuantity = function() {
  return this.quantity;
};

/**
* @memberof inventory.ItemStock
* @private
*/
ItemStock.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ItemStock.prototype.toString = function() {
  return JSON.stringify(this);
};

ItemStock._meta_ =  {fields:  {}};
ItemStock._meta_._class_ =  ItemStock;
ItemStock._meta_.fields["item"] = {};
ItemStock._meta_.fields["item"].type = base_Reference;
ItemStock._meta_.fields["stockCount"] = {};
ItemStock._meta_.fields["stockCount"].type = Number;
ItemStock._meta_.fields["quantity"] = {};
ItemStock._meta_.fields["quantity"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = ItemStock;
}



/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof inventory
* @enum {string}
*/
PriceType = {
  FIXED : "FIXED",
  VARIABLE : "VARIABLE",
  PER_UNIT : "PER_UNIT"
};


//
// Expose the module.
//
if (true) {
module.exports = PriceType;
}



/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof printer
* @enum {string}
*/
PrinterType = {
  NETWORK : "NETWORK",
  MY_LOCAL : "MY_LOCAL"
};


//
// Expose the module.
//
if (true) {
module.exports = PrinterType;
}



/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof order
* @enum {string}
*/
ClientEventType = {
  DELETED_LINE_ITEM : "DELETED_LINE_ITEM",
  MOVED_TABLE : "MOVED_TABLE",
  LEFT_TABLE : "LEFT_TABLE"
};


//
// Expose the module.
//
if (true) {
module.exports = ClientEventType;
}



/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);
var inventory_Modifier = __webpack_require__(46);

/** Snapshot of a line item modifier at the time that the order was placed. */
/**
* @constructor
* @memberof order
*/
var Modification = function() {
  this._class_ = Modification;
  this.id = undefined;
  this.lineItemRef = undefined;
  this.name = undefined;
  this.alternateName = undefined;
  this.amount = undefined;
  this.modifier = undefined;
  this.quantitySold = undefined;
};


/**
* Set the field value
* @memberof order.Modification
* @param {String} id 
*/
Modification.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof order.Modification
* @return {String} 
*/
Modification.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The line item with which the modification is associated
*
* @memberof order.Modification
* @param {base.Reference} lineItemRef 
*/
Modification.prototype.setLineItemRef = function(lineItemRef) {
  this.lineItemRef = lineItemRef;
};

/**
* Get the field value
* The line item with which the modification is associated
* @memberof order.Modification
* @return {base.Reference} 
*/
Modification.prototype.getLineItemRef = function() {
  return this.lineItemRef;
};

/**
* Set the field value
* the name of the modifier when it was applied
*
* @memberof order.Modification
* @param {String} name 
*/
Modification.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* the name of the modifier when it was applied
* @memberof order.Modification
* @return {String} 
*/
Modification.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof order.Modification
* @param {String} alternateName 
*/
Modification.prototype.setAlternateName = function(alternateName) {
  this.alternateName = alternateName;
};

/**
* Get the field value
* @memberof order.Modification
* @return {String} 
*/
Modification.prototype.getAlternateName = function() {
  return this.alternateName;
};

/**
* Set the field value
* the additional cost of the modifier when it was applied
*
* @memberof order.Modification
* @param {Number} amount must be a long integer
*/
Modification.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* the additional cost of the modifier when it was applied
* @memberof order.Modification
* @return {Number} must be a long integer
*/
Modification.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the modification is created.
*
* @memberof order.Modification
* @param {inventory.Modifier} modifier 
*/
Modification.prototype.setModifier = function(modifier) {
  this.modifier = modifier;
};

/**
* Get the field value
* The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the modification is created.
* @memberof order.Modification
* @return {inventory.Modifier} 
*/
Modification.prototype.getModifier = function() {
  return this.modifier;
};

/**
* Set the field value
* This is only used in reports. The count of how many of these modifiers that were sold.
*
* @memberof order.Modification
* @param {Number} quantitySold must be a long integer
*/
Modification.prototype.setQuantitySold = function(quantitySold) {
  this.quantitySold = quantitySold;
};

/**
* Get the field value
* This is only used in reports. The count of how many of these modifiers that were sold.
* @memberof order.Modification
* @return {Number} must be a long integer
*/
Modification.prototype.getQuantitySold = function() {
  return this.quantitySold;
};

/**
* @memberof order.Modification
* @private
*/
Modification.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Modification.prototype.toString = function() {
  return JSON.stringify(this);
};

Modification._meta_ =  {fields:  {}};
Modification._meta_._class_ =  Modification;
Modification._meta_.fields["id"] = {};
Modification._meta_.fields["id"].type = String;
Modification._meta_.fields["lineItemRef"] = {};
Modification._meta_.fields["lineItemRef"].type = base_Reference;
Modification._meta_.fields["name"] = {};
Modification._meta_.fields["name"].type = String;
Modification._meta_.fields["alternateName"] = {};
Modification._meta_.fields["alternateName"].type = String;
Modification._meta_.fields["amount"] = {};
Modification._meta_.fields["amount"].type = Number;
Modification._meta_.fields["modifier"] = {};
Modification._meta_.fields["modifier"].type = inventory_Modifier;
Modification._meta_.fields["quantitySold"] = {};
Modification._meta_.fields["quantitySold"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Modification;
}



/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof order
* @enum {string}
*/
CustomerIdMethod = {
  NAME : "NAME",
  TABLE : "TABLE",
  NAME_TABLE : "NAME_TABLE"
};


//
// Expose the module.
//
if (true) {
module.exports = CustomerIdMethod;
}



/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/** Snapshot of a line item modifier at the time that the order was placed. */
/**
* @constructor
* @memberof order
*/
var DisplayModification = function() {
  this._class_ = DisplayModification;
  this.id = undefined;
  this.name = undefined;
  this.amount = undefined;
};


/**
* Set the field value
* @memberof order.DisplayModification
* @param {String} id 
*/
DisplayModification.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof order.DisplayModification
* @return {String} 
*/
DisplayModification.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof order.DisplayModification
* @param {String} name 
*/
DisplayModification.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof order.DisplayModification
* @return {String} 
*/
DisplayModification.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof order.DisplayModification
* @param {String} amount 
*/
DisplayModification.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* @memberof order.DisplayModification
* @return {String} 
*/
DisplayModification.prototype.getAmount = function() {
  return this.amount;
};

/**
* @memberof order.DisplayModification
* @private
*/
DisplayModification.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayModification.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayModification._meta_ =  {fields:  {}};
DisplayModification._meta_._class_ =  DisplayModification;
DisplayModification._meta_.fields["id"] = {};
DisplayModification._meta_.fields["id"].type = String;
DisplayModification._meta_.fields["name"] = {};
DisplayModification._meta_.fields["name"].type = String;
DisplayModification._meta_.fields["amount"] = {};
DisplayModification._meta_.fields["amount"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DisplayModification;
}



/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_DisplayPayment = __webpack_require__(106);
var order_DisplayDiscount = __webpack_require__(30);
var order_DisplayLineItem = __webpack_require__(48);

/**
* @constructor
* @memberof order
*/
var DisplayOrder = function() {
  this._class_ = DisplayOrder;
  this.id = undefined;
  this.currency = undefined;
  this.employee = undefined;
  this.subtotal = undefined;
  this.tax = undefined;
  this.total = undefined;
  this.title = undefined;
  this.note = undefined;
  this.serviceChargeName = undefined;
  this.serviceChargeAmount = undefined;
  this.discounts = undefined;
  this.lineItems = undefined;
  this.amountRemaining = undefined;
  this.payments = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.DisplayOrder
* @param {String} id 
*/
DisplayOrder.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Currency of this order
*
* @memberof order.DisplayOrder
* @param {String} currency 
*/
DisplayOrder.prototype.setCurrency = function(currency) {
  this.currency = currency;
};

/**
* Get the field value
* Currency of this order
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getCurrency = function() {
  return this.currency;
};

/**
* Set the field value
* The employee associated with this order
*
* @memberof order.DisplayOrder
* @param {String} employee 
*/
DisplayOrder.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee associated with this order
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* Formatted subtotal of the order
*
* @memberof order.DisplayOrder
* @param {String} subtotal 
*/
DisplayOrder.prototype.setSubtotal = function(subtotal) {
  this.subtotal = subtotal;
};

/**
* Get the field value
* Formatted subtotal of the order
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getSubtotal = function() {
  return this.subtotal;
};

/**
* Set the field value
* Formatted tax of the order
*
* @memberof order.DisplayOrder
* @param {String} tax 
*/
DisplayOrder.prototype.setTax = function(tax) {
  this.tax = tax;
};

/**
* Get the field value
* Formatted tax of the order
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getTax = function() {
  return this.tax;
};

/**
* Set the field value
* Formatted total of the order
*
* @memberof order.DisplayOrder
* @param {String} total 
*/
DisplayOrder.prototype.setTotal = function(total) {
  this.total = total;
};

/**
* Get the field value
* Formatted total of the order
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getTotal = function() {
  return this.total;
};

/**
* Set the field value
* @memberof order.DisplayOrder
* @param {Null|String} title 
*/
DisplayOrder.prototype.setTitle = function(title) {
  this.title = title;
};

/**
* Get the field value
* @memberof order.DisplayOrder
* @return {Null|String} 
*/
DisplayOrder.prototype.getTitle = function() {
  return this.title;
};

/**
* Set the field value
* @memberof order.DisplayOrder
* @param {Null|String} note 
*/
DisplayOrder.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* @memberof order.DisplayOrder
* @return {Null|String} 
*/
DisplayOrder.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* Optional service charge name (gratuity) applied to this order
*
* @memberof order.DisplayOrder
* @param {Null|String} serviceChargeName 
*/
DisplayOrder.prototype.setServiceChargeName = function(serviceChargeName) {
  this.serviceChargeName = serviceChargeName;
};

/**
* Get the field value
* Optional service charge name (gratuity) applied to this order
* @memberof order.DisplayOrder
* @return {Null|String} 
*/
DisplayOrder.prototype.getServiceChargeName = function() {
  return this.serviceChargeName;
};

/**
* Set the field value
* Optional service charge amount (gratuity) applied to this order
*
* @memberof order.DisplayOrder
* @param {Null|String} serviceChargeAmount 
*/
DisplayOrder.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
  this.serviceChargeAmount = serviceChargeAmount;
};

/**
* Get the field value
* Optional service charge amount (gratuity) applied to this order
* @memberof order.DisplayOrder
* @return {Null|String} 
*/
DisplayOrder.prototype.getServiceChargeAmount = function() {
  return this.serviceChargeAmount;
};

/**
* Set the field value
* @memberof order.DisplayOrder
* @param {Array.<order.DisplayDiscount>} discounts An array of 
*/
DisplayOrder.prototype.setDiscounts = function(discounts) {
  this.discounts = discounts;
};

/**
* Get the field value
* @memberof order.DisplayOrder
* @return {Array.<order.DisplayDiscount>} An array of 
*/
DisplayOrder.prototype.getDiscounts = function() {
  return this.discounts;
};

/**
* Set the field value
* @memberof order.DisplayOrder
* @param {Array.<order.DisplayLineItem>} lineItems An array of 
*/
DisplayOrder.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* @memberof order.DisplayOrder
* @return {Array.<order.DisplayLineItem>} An array of 
*/
DisplayOrder.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* Formatted amount remaining
*
* @memberof order.DisplayOrder
* @param {String} amountRemaining 
*/
DisplayOrder.prototype.setAmountRemaining = function(amountRemaining) {
  this.amountRemaining = amountRemaining;
};

/**
* Get the field value
* Formatted amount remaining
* @memberof order.DisplayOrder
* @return {String} 
*/
DisplayOrder.prototype.getAmountRemaining = function() {
  return this.amountRemaining;
};

/**
* Set the field value
* Payments that were made for this order
*
* @memberof order.DisplayOrder
* @param {Array.<order.DisplayPayment>} payments An array of 
*/
DisplayOrder.prototype.setPayments = function(payments) {
  this.payments = payments;
};

/**
* Get the field value
* Payments that were made for this order
* @memberof order.DisplayOrder
* @return {Array.<order.DisplayPayment>} An array of 
*/
DisplayOrder.prototype.getPayments = function() {
  return this.payments;
};

/**
* @memberof order.DisplayOrder
* @private
*/
DisplayOrder.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayOrder.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayOrder._meta_ =  {fields:  {}};
DisplayOrder._meta_._class_ =  DisplayOrder;
DisplayOrder._meta_.fields["id"] = {};
DisplayOrder._meta_.fields["id"].type = String;
DisplayOrder._meta_.fields["currency"] = {};
DisplayOrder._meta_.fields["currency"].type = String;
DisplayOrder._meta_.fields["employee"] = {};
DisplayOrder._meta_.fields["employee"].type = String;
DisplayOrder._meta_.fields["subtotal"] = {};
DisplayOrder._meta_.fields["subtotal"].type = String;
DisplayOrder._meta_.fields["tax"] = {};
DisplayOrder._meta_.fields["tax"].type = String;
DisplayOrder._meta_.fields["total"] = {};
DisplayOrder._meta_.fields["total"].type = String;
DisplayOrder._meta_.fields["title"] = {};
DisplayOrder._meta_.fields["title"].type = String;
DisplayOrder._meta_.fields["note"] = {};
DisplayOrder._meta_.fields["note"].type = String;
DisplayOrder._meta_.fields["serviceChargeName"] = {};
DisplayOrder._meta_.fields["serviceChargeName"].type = String;
DisplayOrder._meta_.fields["serviceChargeAmount"] = {};
DisplayOrder._meta_.fields["serviceChargeAmount"].type = String;
DisplayOrder._meta_.fields["discounts"] = {};
DisplayOrder._meta_.fields["discounts"].type = Array;
DisplayOrder._meta_.fields["discounts"].elementType = order_DisplayDiscount;
DisplayOrder._meta_.fields["lineItems"] = {};
DisplayOrder._meta_.fields["lineItems"].type = Array;
DisplayOrder._meta_.fields["lineItems"].elementType = order_DisplayLineItem;
DisplayOrder._meta_.fields["amountRemaining"] = {};
DisplayOrder._meta_.fields["amountRemaining"].type = String;
DisplayOrder._meta_.fields["payments"] = {};
DisplayOrder._meta_.fields["payments"].type = Array;
DisplayOrder._meta_.fields["payments"].elementType = order_DisplayPayment;

//
// Expose the module.
//
if (true) {
module.exports = DisplayOrder;
}



/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var DisplayPayment = function() {
  this._class_ = DisplayPayment;
  this.id = undefined;
  this.label = undefined;
  this.amount = undefined;
  this.tipAmount = undefined;
  this.taxAmount = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.DisplayPayment
* @param {String} id 
*/
DisplayPayment.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.DisplayPayment
* @return {String} 
*/
DisplayPayment.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Formatted display string for the tender e.g. credit card, cash, etc.
*
* @memberof order.DisplayPayment
* @param {String} label 
*/
DisplayPayment.prototype.setLabel = function(label) {
  this.label = label;
};

/**
* Get the field value
* Formatted display string for the tender e.g. credit card, cash, etc.
* @memberof order.DisplayPayment
* @return {String} 
*/
DisplayPayment.prototype.getLabel = function() {
  return this.label;
};

/**
* Set the field value
* Formatted total amount paid
*
* @memberof order.DisplayPayment
* @param {String} amount 
*/
DisplayPayment.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Formatted total amount paid
* @memberof order.DisplayPayment
* @return {String} 
*/
DisplayPayment.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Formatted amount paid in tips
*
* @memberof order.DisplayPayment
* @param {String|Null} tipAmount 
*/
DisplayPayment.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Formatted amount paid in tips
* @memberof order.DisplayPayment
* @return {String|Null} 
*/
DisplayPayment.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Formatted amount paid in tax
*
* @memberof order.DisplayPayment
* @param {Number|Null} taxAmount must be a long integer, 
*/
DisplayPayment.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Formatted amount paid in tax
* @memberof order.DisplayPayment
* @return {Number|Null} must be a long integer, 
*/
DisplayPayment.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* @memberof order.DisplayPayment
* @private
*/
DisplayPayment.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayPayment.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayPayment._meta_ =  {fields:  {}};
DisplayPayment._meta_._class_ =  DisplayPayment;
DisplayPayment._meta_.fields["id"] = {};
DisplayPayment._meta_.fields["id"].type = String;
DisplayPayment._meta_.fields["label"] = {};
DisplayPayment._meta_.fields["label"].type = String;
DisplayPayment._meta_.fields["amount"] = {};
DisplayPayment._meta_.fields["amount"].type = String;
DisplayPayment._meta_.fields["tipAmount"] = {};
DisplayPayment._meta_.fields["tipAmount"].type = String;
DisplayPayment._meta_.fields["taxAmount"] = {};
DisplayPayment._meta_.fields["taxAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = DisplayPayment;
}



/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof order
* @enum {string}
*/
HoursAvailable = {
  ALL : "ALL",
  BUSINESS : "BUSINESS",
  CUSTOM : "CUSTOM"
};


//
// Expose the module.
//
if (true) {
module.exports = HoursAvailable;
}



/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CardType = __webpack_require__(19);
var payments_Payment = __webpack_require__(4);
var payments_Type = __webpack_require__(115);

/**
* @constructor
* @memberof payments
*/
var Authorization = function() {
  this._class_ = Authorization;
  this.id = undefined;
  this.payment = undefined;
  this.tabName = undefined;
  this.amount = undefined;
  this.cardType = undefined;
  this.last4 = undefined;
  this.authcode = undefined;
  this.type = undefined;
  this.note = undefined;
  this.closingPayment = undefined;
  this.createdTime = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.Authorization
* @param {String} id 
*/
Authorization.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.Authorization
* @return {String} 
*/
Authorization.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Payment that the auth was opened with
*
* @memberof payments.Authorization
* @param {payments.Payment} payment 
*/
Authorization.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* Payment that the auth was opened with
* @memberof payments.Authorization
* @return {payments.Payment} 
*/
Authorization.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* Name of tab
*
* @memberof payments.Authorization
* @param {String|Null} tabName 
*/
Authorization.prototype.setTabName = function(tabName) {
  this.tabName = tabName;
};

/**
* Get the field value
* Name of tab
* @memberof payments.Authorization
* @return {String|Null} 
*/
Authorization.prototype.getTabName = function() {
  return this.tabName;
};

/**
* Set the field value
* Amount authorized
*
* @memberof payments.Authorization
* @param {Number} amount must be a long integer
*/
Authorization.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount authorized
* @memberof payments.Authorization
* @return {Number} must be a long integer
*/
Authorization.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Type of credit card used for authorization
*
* @memberof payments.Authorization
* @param {payments.CardType} cardType 
*/
Authorization.prototype.setCardType = function(cardType) {
  this.cardType = cardType;
};

/**
* Get the field value
* Type of credit card used for authorization
* @memberof payments.Authorization
* @return {payments.CardType} 
*/
Authorization.prototype.getCardType = function() {
  return this.cardType;
};

/**
* Set the field value
* Last 4 digits of credit card used for authorization
*
* @memberof payments.Authorization
* @param {String} last4 
*/
Authorization.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* Last 4 digits of credit card used for authorization
* @memberof payments.Authorization
* @return {String} 
*/
Authorization.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* Authorization code
*
* @memberof payments.Authorization
* @param {String} authcode 
*/
Authorization.prototype.setAuthcode = function(authcode) {
  this.authcode = authcode;
};

/**
* Get the field value
* Authorization code
* @memberof payments.Authorization
* @return {String} 
*/
Authorization.prototype.getAuthcode = function() {
  return this.authcode;
};

/**
* Set the field value
* @memberof payments.Authorization
* @param {payments.Type} type 
*/
Authorization.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof payments.Authorization
* @return {payments.Type} 
*/
Authorization.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* @memberof payments.Authorization
* @param {String|Null} note 
*/
Authorization.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* @memberof payments.Authorization
* @return {String|Null} 
*/
Authorization.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* Payment that the auth was closed with
*
* @memberof payments.Authorization
* @param {payments.Payment} closingPayment 
*/
Authorization.prototype.setClosingPayment = function(closingPayment) {
  this.closingPayment = closingPayment;
};

/**
* Get the field value
* Payment that the auth was closed with
* @memberof payments.Authorization
* @return {payments.Payment} 
*/
Authorization.prototype.getClosingPayment = function() {
  return this.closingPayment;
};

/**
* Set the field value
* Time authorization was recorded on server
*
* @memberof payments.Authorization
* @param {Number} createdTime must be a long integer
*/
Authorization.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Time authorization was recorded on server
* @memberof payments.Authorization
* @return {Number} must be a long integer
*/
Authorization.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* @memberof payments.Authorization
* @private
*/
Authorization.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Authorization.prototype.toString = function() {
  return JSON.stringify(this);
};

Authorization._meta_ =  {fields:  {}};
Authorization._meta_._class_ =  Authorization;
Authorization._meta_.fields["id"] = {};
Authorization._meta_.fields["id"].type = String;
Authorization._meta_.fields["payment"] = {};
Authorization._meta_.fields["payment"].type = payments_Payment;
Authorization._meta_.fields["tabName"] = {};
Authorization._meta_.fields["tabName"].type = String;
Authorization._meta_.fields["amount"] = {};
Authorization._meta_.fields["amount"].type = Number;
Authorization._meta_.fields["cardType"] = {};
Authorization._meta_.fields["cardType"].type = payments_CardType;
Authorization._meta_.fields["last4"] = {};
Authorization._meta_.fields["last4"].type = String;
Authorization._meta_.fields["authcode"] = {};
Authorization._meta_.fields["authcode"].type = String;
Authorization._meta_.fields["type"] = {};
Authorization._meta_.fields["type"].type = payments_Type;
Authorization._meta_.fields["note"] = {};
Authorization._meta_.fields["note"].type = String;
Authorization._meta_.fields["closingPayment"] = {};
Authorization._meta_.fields["closingPayment"].type = payments_Payment;
Authorization._meta_.fields["createdTime"] = {};
Authorization._meta_.fields["createdTime"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Authorization;
}



/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var PaymentTaxRate = function() {
  this._class_ = PaymentTaxRate;
  this.id = undefined;
  this.paymentRef = undefined;
  this.name = undefined;
  this.rate = undefined;
  this.isDefault = undefined;
  this.taxableAmount = undefined;
  this.isVat = undefined;
  this.taxAmount = undefined;
};


/**
* Set the field value
* Tax rate id.
*
* @memberof payments.PaymentTaxRate
* @param {String} id 
*/
PaymentTaxRate.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Tax rate id.
* @memberof payments.PaymentTaxRate
* @return {String} 
*/
PaymentTaxRate.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The payment with which the payment tax rate is associated
*
* @memberof payments.PaymentTaxRate
* @param {base.Reference} paymentRef 
*/
PaymentTaxRate.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which the payment tax rate is associated
* @memberof payments.PaymentTaxRate
* @return {base.Reference} 
*/
PaymentTaxRate.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* Set the field value
* Tax rate name. This field is optional.
*
* @memberof payments.PaymentTaxRate
* @param {String} name 
*/
PaymentTaxRate.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Tax rate name. This field is optional.
* @memberof payments.PaymentTaxRate
* @return {String} 
*/
PaymentTaxRate.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* The tax rate. 100% = 1e7.
*
* @memberof payments.PaymentTaxRate
* @param {Number} rate must be a long integer
*/
PaymentTaxRate.prototype.setRate = function(rate) {
  this.rate = rate;
};

/**
* Get the field value
* The tax rate. 100% = 1e7.
* @memberof payments.PaymentTaxRate
* @return {Number} must be a long integer
*/
PaymentTaxRate.prototype.getRate = function() {
  return this.rate;
};

/**
* Set the field value
* Whether the tax rate was configued as a default tax rate at the time that the payment was created.
*
* @memberof payments.PaymentTaxRate
* @param {Boolean} isDefault 
*/
PaymentTaxRate.prototype.setIsDefault = function(isDefault) {
  this.isDefault = isDefault;
};

/**
* Get the field value
* Whether the tax rate was configued as a default tax rate at the time that the payment was created.
* @memberof payments.PaymentTaxRate
* @return {Boolean} 
*/
PaymentTaxRate.prototype.getIsDefault = function() {
  return this.isDefault;
};

/**
* Set the field value
* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
*
* @memberof payments.PaymentTaxRate
* @param {Number} taxableAmount must be a long integer
*/
PaymentTaxRate.prototype.setTaxableAmount = function(taxableAmount) {
  this.taxableAmount = taxableAmount;
};

/**
* Get the field value
* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
* @memberof payments.PaymentTaxRate
* @return {Number} must be a long integer
*/
PaymentTaxRate.prototype.getTaxableAmount = function() {
  return this.taxableAmount;
};

/**
* Set the field value
* Whether merchant is configured as VAT
*
* @memberof payments.PaymentTaxRate
* @param {Boolean} isVat 
*/
PaymentTaxRate.prototype.setIsVat = function(isVat) {
  this.isVat = isVat;
};

/**
* Get the field value
* Whether merchant is configured as VAT
* @memberof payments.PaymentTaxRate
* @return {Boolean} 
*/
PaymentTaxRate.prototype.getIsVat = function() {
  return this.isVat;
};

/**
* Set the field value
* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
*
* @memberof payments.PaymentTaxRate
* @param {Number} taxAmount must be a long integer
*/
PaymentTaxRate.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
* @memberof payments.PaymentTaxRate
* @return {Number} must be a long integer
*/
PaymentTaxRate.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* @memberof payments.PaymentTaxRate
* @private
*/
PaymentTaxRate.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PaymentTaxRate.prototype.toString = function() {
  return JSON.stringify(this);
};

PaymentTaxRate._meta_ =  {fields:  {}};
PaymentTaxRate._meta_._class_ =  PaymentTaxRate;
PaymentTaxRate._meta_.fields["id"] = {};
PaymentTaxRate._meta_.fields["id"].type = String;
PaymentTaxRate._meta_.fields["paymentRef"] = {};
PaymentTaxRate._meta_.fields["paymentRef"].type = base_Reference;
PaymentTaxRate._meta_.fields["name"] = {};
PaymentTaxRate._meta_.fields["name"].type = String;
PaymentTaxRate._meta_.fields["rate"] = {};
PaymentTaxRate._meta_.fields["rate"].type = Number;
PaymentTaxRate._meta_.fields["isDefault"] = {};
PaymentTaxRate._meta_.fields["isDefault"].type = Boolean;
PaymentTaxRate._meta_.fields["taxableAmount"] = {};
PaymentTaxRate._meta_.fields["taxableAmount"].type = Number;
PaymentTaxRate._meta_.fields["isVat"] = {};
PaymentTaxRate._meta_.fields["isVat"].type = Boolean;
PaymentTaxRate._meta_.fields["taxAmount"] = {};
PaymentTaxRate._meta_.fields["taxAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = PaymentTaxRate;
}



/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CashAdvanceCustomerIdentification = __webpack_require__(52);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof payments
*/
var CashAdvanceExtra = function() {
  this._class_ = CashAdvanceExtra;
  this.cashAdvanceSerialNum = undefined;
  this.cashAdvanceCustomerIdentification = undefined;
  this.paymentRef = undefined;
};


/**
* Set the field value
* @memberof payments.CashAdvanceExtra
* @param {String} cashAdvanceSerialNum 
*/
CashAdvanceExtra.prototype.setCashAdvanceSerialNum = function(cashAdvanceSerialNum) {
  this.cashAdvanceSerialNum = cashAdvanceSerialNum;
};

/**
* Get the field value
* @memberof payments.CashAdvanceExtra
* @return {String} 
*/
CashAdvanceExtra.prototype.getCashAdvanceSerialNum = function() {
  return this.cashAdvanceSerialNum;
};

/**
* Set the field value
* @memberof payments.CashAdvanceExtra
* @param {payments.CashAdvanceCustomerIdentification} cashAdvanceCustomerIdentification 
*/
CashAdvanceExtra.prototype.setCashAdvanceCustomerIdentification = function(cashAdvanceCustomerIdentification) {
  this.cashAdvanceCustomerIdentification = cashAdvanceCustomerIdentification;
};

/**
* Get the field value
* @memberof payments.CashAdvanceExtra
* @return {payments.CashAdvanceCustomerIdentification} 
*/
CashAdvanceExtra.prototype.getCashAdvanceCustomerIdentification = function() {
  return this.cashAdvanceCustomerIdentification;
};

/**
* Set the field value
* The payment with which this cash advance extra is associated
*
* @memberof payments.CashAdvanceExtra
* @param {base.Reference} paymentRef 
*/
CashAdvanceExtra.prototype.setPaymentRef = function(paymentRef) {
  this.paymentRef = paymentRef;
};

/**
* Get the field value
* The payment with which this cash advance extra is associated
* @memberof payments.CashAdvanceExtra
* @return {base.Reference} 
*/
CashAdvanceExtra.prototype.getPaymentRef = function() {
  return this.paymentRef;
};

/**
* @memberof payments.CashAdvanceExtra
* @private
*/
CashAdvanceExtra.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CashAdvanceExtra.prototype.toString = function() {
  return JSON.stringify(this);
};

CashAdvanceExtra._meta_ =  {fields:  {}};
CashAdvanceExtra._meta_._class_ =  CashAdvanceExtra;
CashAdvanceExtra._meta_.fields["cashAdvanceSerialNum"] = {};
CashAdvanceExtra._meta_.fields["cashAdvanceSerialNum"].type = String;
CashAdvanceExtra._meta_.fields["cashAdvanceCustomerIdentification"] = {};
CashAdvanceExtra._meta_.fields["cashAdvanceCustomerIdentification"].type = payments_CashAdvanceCustomerIdentification;
CashAdvanceExtra._meta_.fields["paymentRef"] = {};
CashAdvanceExtra._meta_.fields["paymentRef"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = CashAdvanceExtra;
}



/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
Identification type
* @memberof payments
* @enum {string}
*/
IdType = {
  DRIVERS_LICENSE : "DRIVERS_LICENSE",
  PASSPORT : "PASSPORT"
};


//
// Expose the module.
//
if (true) {
module.exports = IdType;
}



/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardTransactionState = {
  PENDING : "PENDING",
  CLOSED : "CLOSED"
};


//
// Expose the module.
//
if (true) {
module.exports = CardTransactionState;
}



/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardTransactionType = {
  AUTH : "AUTH",
  PREAUTH : "PREAUTH",
  PREAUTHCAPTURE : "PREAUTHCAPTURE",
  ADJUST : "ADJUST",
  VOID : "VOID",
  VOIDRETURN : "VOIDRETURN",
  RETURN : "RETURN",
  REFUND : "REFUND",
  NAKEDREFUND : "NAKEDREFUND",
  GETBALANCE : "GETBALANCE",
  BATCHCLOSE : "BATCHCLOSE",
  ACTIVATE : "ACTIVATE",
  BALANCE_LOCK : "BALANCE_LOCK",
  LOAD : "LOAD",
  CASHOUT : "CASHOUT",
  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
  REDEMPTION : "REDEMPTION",
  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
  RELOAD : "RELOAD",
  CASH_ADVANCE : "CASH_ADVANCE",
  VOID_CREDIT : "VOID_CREDIT",
  REFUND_CREDIT : "REFUND_CREDIT",
  INTERNET_ACTIVATE : "INTERNET_ACTIVATE"
};


//
// Expose the module.
//
if (true) {
module.exports = CardTransactionType;
}



/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
AVSResult = {
  SUCCESS : "SUCCESS",
  ZIP_CODE_MATCH : "ZIP_CODE_MATCH",
  ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED : "ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED",
  ADDRESS_MATCH : "ADDRESS_MATCH",
  ADDRESS_MATCH_ZIP_NOT_CHECKED : "ADDRESS_MATCH_ZIP_NOT_CHECKED",
  NEITHER_MATCH : "NEITHER_MATCH",
  SERVICE_FAILURE : "SERVICE_FAILURE",
  SERVICE_UNAVAILABLE : "SERVICE_UNAVAILABLE",
  NOT_CHECKED : "NOT_CHECKED",
  ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED : "ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED",
  ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED : "ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED"
};


//
// Expose the module.
//
if (true) {
module.exports = AVSResult;
}



/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
Type = {
  TAB : "TAB",
  AUTH : "AUTH"
};


//
// Expose the module.
//
if (true) {
module.exports = Type;
}



/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof order
* @enum {string}
*/
PayType = {
  SPLIT_GUEST : "SPLIT_GUEST",
  SPLIT_ITEM : "SPLIT_ITEM",
  SPLIT_CUSTOM : "SPLIT_CUSTOM",
  FULL : "FULL"
};


//
// Expose the module.
//
if (true) {
module.exports = PayType;
}



/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var OrderTaxRate = function() {
  this._class_ = OrderTaxRate;
  this.id = undefined;
  this.name = undefined;
  this.amount = undefined;
};


/**
* Set the field value
* @memberof order.OrderTaxRate
* @param {String} id 
*/
OrderTaxRate.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof order.OrderTaxRate
* @return {String} 
*/
OrderTaxRate.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof order.OrderTaxRate
* @param {String} name 
*/
OrderTaxRate.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof order.OrderTaxRate
* @return {String} 
*/
OrderTaxRate.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof order.OrderTaxRate
* @param {Number} amount must be a long integer
*/
OrderTaxRate.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* @memberof order.OrderTaxRate
* @return {Number} must be a long integer
*/
OrderTaxRate.prototype.getAmount = function() {
  return this.amount;
};

/**
* @memberof order.OrderTaxRate
* @private
*/
OrderTaxRate.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderTaxRate.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderTaxRate._meta_ =  {fields:  {}};
OrderTaxRate._meta_._class_ =  OrderTaxRate;
OrderTaxRate._meta_.fields["id"] = {};
OrderTaxRate._meta_.fields["id"].type = String;
OrderTaxRate._meta_.fields["name"] = {};
OrderTaxRate._meta_.fields["name"].type = String;
OrderTaxRate._meta_.fields["amount"] = {};
OrderTaxRate._meta_.fields["amount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = OrderTaxRate;
}



/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order.operation
*/
var DiscountsAddedOperation = function() {
  this._class_ = DiscountsAddedOperation;
  this.ids = undefined;
  this.orderId = undefined;
};


/**
* Set the field value
* @memberof order.operation.DiscountsAddedOperation
* @param {Array.<String>} ids An array of 
*/
DiscountsAddedOperation.prototype.setIds = function(ids) {
  this.ids = ids;
};

/**
* Get the field value
* @memberof order.operation.DiscountsAddedOperation
* @return {Array.<String>} An array of 
*/
DiscountsAddedOperation.prototype.getIds = function() {
  return this.ids;
};

/**
* Set the field value
* @memberof order.operation.DiscountsAddedOperation
* @param {String} orderId 
*/
DiscountsAddedOperation.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* @memberof order.operation.DiscountsAddedOperation
* @return {String} 
*/
DiscountsAddedOperation.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* @memberof order.operation.DiscountsAddedOperation
* @private
*/
DiscountsAddedOperation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DiscountsAddedOperation.prototype.toString = function() {
  return JSON.stringify(this);
};

DiscountsAddedOperation._meta_ =  {fields:  {}};
DiscountsAddedOperation._meta_._class_ =  DiscountsAddedOperation;
DiscountsAddedOperation._meta_.fields["ids"] = {};
DiscountsAddedOperation._meta_.fields["ids"].type = Array;
DiscountsAddedOperation._meta_.fields["orderId"] = {};
DiscountsAddedOperation._meta_.fields["orderId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DiscountsAddedOperation;
}



/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order.operation
*/
var DiscountsDeletedOperation = function() {
  this._class_ = DiscountsDeletedOperation;
  this.ids = undefined;
  this.orderId = undefined;
};


/**
* Set the field value
* @memberof order.operation.DiscountsDeletedOperation
* @param {Array.<String>} ids An array of 
*/
DiscountsDeletedOperation.prototype.setIds = function(ids) {
  this.ids = ids;
};

/**
* Get the field value
* @memberof order.operation.DiscountsDeletedOperation
* @return {Array.<String>} An array of 
*/
DiscountsDeletedOperation.prototype.getIds = function() {
  return this.ids;
};

/**
* Set the field value
* @memberof order.operation.DiscountsDeletedOperation
* @param {String} orderId 
*/
DiscountsDeletedOperation.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* @memberof order.operation.DiscountsDeletedOperation
* @return {String} 
*/
DiscountsDeletedOperation.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* @memberof order.operation.DiscountsDeletedOperation
* @private
*/
DiscountsDeletedOperation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DiscountsDeletedOperation.prototype.toString = function() {
  return JSON.stringify(this);
};

DiscountsDeletedOperation._meta_ =  {fields:  {}};
DiscountsDeletedOperation._meta_._class_ =  DiscountsDeletedOperation;
DiscountsDeletedOperation._meta_.fields["ids"] = {};
DiscountsDeletedOperation._meta_.fields["ids"].type = Array;
DiscountsDeletedOperation._meta_.fields["orderId"] = {};
DiscountsDeletedOperation._meta_.fields["orderId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DiscountsDeletedOperation;
}



/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order.operation
*/
var LineItemsAddedOperation = function() {
  this._class_ = LineItemsAddedOperation;
  this.ids = undefined;
  this.orderId = undefined;
};


/**
* Set the field value
* @memberof order.operation.LineItemsAddedOperation
* @param {Array.<String>} ids An array of 
*/
LineItemsAddedOperation.prototype.setIds = function(ids) {
  this.ids = ids;
};

/**
* Get the field value
* @memberof order.operation.LineItemsAddedOperation
* @return {Array.<String>} An array of 
*/
LineItemsAddedOperation.prototype.getIds = function() {
  return this.ids;
};

/**
* Set the field value
* @memberof order.operation.LineItemsAddedOperation
* @param {String} orderId 
*/
LineItemsAddedOperation.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* @memberof order.operation.LineItemsAddedOperation
* @return {String} 
*/
LineItemsAddedOperation.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* @memberof order.operation.LineItemsAddedOperation
* @private
*/
LineItemsAddedOperation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

LineItemsAddedOperation.prototype.toString = function() {
  return JSON.stringify(this);
};

LineItemsAddedOperation._meta_ =  {fields:  {}};
LineItemsAddedOperation._meta_._class_ =  LineItemsAddedOperation;
LineItemsAddedOperation._meta_.fields["ids"] = {};
LineItemsAddedOperation._meta_.fields["ids"].type = Array;
LineItemsAddedOperation._meta_.fields["orderId"] = {};
LineItemsAddedOperation._meta_.fields["orderId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = LineItemsAddedOperation;
}



/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order.operation
*/
var LineItemsDeletedOperation = function() {
  this._class_ = LineItemsDeletedOperation;
  this.ids = undefined;
  this.orderId = undefined;
};


/**
* Set the field value
* @memberof order.operation.LineItemsDeletedOperation
* @param {Array.<String>} ids An array of 
*/
LineItemsDeletedOperation.prototype.setIds = function(ids) {
  this.ids = ids;
};

/**
* Get the field value
* @memberof order.operation.LineItemsDeletedOperation
* @return {Array.<String>} An array of 
*/
LineItemsDeletedOperation.prototype.getIds = function() {
  return this.ids;
};

/**
* Set the field value
* @memberof order.operation.LineItemsDeletedOperation
* @param {String} orderId 
*/
LineItemsDeletedOperation.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* @memberof order.operation.LineItemsDeletedOperation
* @return {String} 
*/
LineItemsDeletedOperation.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* @memberof order.operation.LineItemsDeletedOperation
* @private
*/
LineItemsDeletedOperation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

LineItemsDeletedOperation.prototype.toString = function() {
  return JSON.stringify(this);
};

LineItemsDeletedOperation._meta_ =  {fields:  {}};
LineItemsDeletedOperation._meta_._class_ =  LineItemsDeletedOperation;
LineItemsDeletedOperation._meta_.fields["ids"] = {};
LineItemsDeletedOperation._meta_.fields["ids"].type = Array;
LineItemsDeletedOperation._meta_.fields["orderId"] = {};
LineItemsDeletedOperation._meta_.fields["orderId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = LineItemsDeletedOperation;
}



/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order.operation
*/
var OrderDeletedOperation = function() {
  this._class_ = OrderDeletedOperation;
  this.id = undefined;
};


/**
* Set the field value
* @memberof order.operation.OrderDeletedOperation
* @param {String} id 
*/
OrderDeletedOperation.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof order.operation.OrderDeletedOperation
* @return {String} 
*/
OrderDeletedOperation.prototype.getId = function() {
  return this.id;
};

/**
* @memberof order.operation.OrderDeletedOperation
* @private
*/
OrderDeletedOperation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderDeletedOperation.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderDeletedOperation._meta_ =  {fields:  {}};
OrderDeletedOperation._meta_._class_ =  OrderDeletedOperation;
OrderDeletedOperation._meta_.fields["id"] = {};
OrderDeletedOperation._meta_.fields["id"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = OrderDeletedOperation;
}



/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_BatchCardTotal = __webpack_require__(124);
var payments_BatchTotalStats = __webpack_require__(125);
var payments_ServerTotalStats = __webpack_require__(126);

/**
* @constructor
* @memberof payments
*/
var BatchDetail = function() {
  this._class_ = BatchDetail;
  this.batchTotals = undefined;
  this.serverTotals = undefined;
  this.cardTotals = undefined;
  this.openTips = undefined;
  this.openTabs = undefined;
};


/**
* Set the field value
* @memberof payments.BatchDetail
* @param {payments.BatchTotalStats} batchTotals 
*/
BatchDetail.prototype.setBatchTotals = function(batchTotals) {
  this.batchTotals = batchTotals;
};

/**
* Get the field value
* @memberof payments.BatchDetail
* @return {payments.BatchTotalStats} 
*/
BatchDetail.prototype.getBatchTotals = function() {
  return this.batchTotals;
};

/**
* Set the field value
* @memberof payments.BatchDetail
* @param {Array.<payments.ServerTotalStats>} serverTotals An array of 
*/
BatchDetail.prototype.setServerTotals = function(serverTotals) {
  this.serverTotals = serverTotals;
};

/**
* Get the field value
* @memberof payments.BatchDetail
* @return {Array.<payments.ServerTotalStats>} An array of 
*/
BatchDetail.prototype.getServerTotals = function() {
  return this.serverTotals;
};

/**
* Set the field value
* @memberof payments.BatchDetail
* @param {Array.<payments.BatchCardTotal>} cardTotals An array of 
*/
BatchDetail.prototype.setCardTotals = function(cardTotals) {
  this.cardTotals = cardTotals;
};

/**
* Get the field value
* @memberof payments.BatchDetail
* @return {Array.<payments.BatchCardTotal>} An array of 
*/
BatchDetail.prototype.getCardTotals = function() {
  return this.cardTotals;
};

/**
* Set the field value
* Number of open tips.
*
* @memberof payments.BatchDetail
* @param {Number} openTips must be a long integer
*/
BatchDetail.prototype.setOpenTips = function(openTips) {
  this.openTips = openTips;
};

/**
* Get the field value
* Number of open tips.
* @memberof payments.BatchDetail
* @return {Number} must be a long integer
*/
BatchDetail.prototype.getOpenTips = function() {
  return this.openTips;
};

/**
* Set the field value
* Number of open tabs.
*
* @memberof payments.BatchDetail
* @param {Number} openTabs must be a long integer
*/
BatchDetail.prototype.setOpenTabs = function(openTabs) {
  this.openTabs = openTabs;
};

/**
* Get the field value
* Number of open tabs.
* @memberof payments.BatchDetail
* @return {Number} must be a long integer
*/
BatchDetail.prototype.getOpenTabs = function() {
  return this.openTabs;
};

/**
* @memberof payments.BatchDetail
* @private
*/
BatchDetail.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BatchDetail.prototype.toString = function() {
  return JSON.stringify(this);
};

BatchDetail._meta_ =  {fields:  {}};
BatchDetail._meta_._class_ =  BatchDetail;
BatchDetail._meta_.fields["batchTotals"] = {};
BatchDetail._meta_.fields["batchTotals"].type = payments_BatchTotalStats;
BatchDetail._meta_.fields["serverTotals"] = {};
BatchDetail._meta_.fields["serverTotals"].type = Array;
BatchDetail._meta_.fields["serverTotals"].elementType = payments_ServerTotalStats;
BatchDetail._meta_.fields["cardTotals"] = {};
BatchDetail._meta_.fields["cardTotals"].type = Array;
BatchDetail._meta_.fields["cardTotals"].elementType = payments_BatchCardTotal;
BatchDetail._meta_.fields["openTips"] = {};
BatchDetail._meta_.fields["openTips"].type = Number;
BatchDetail._meta_.fields["openTabs"] = {};
BatchDetail._meta_.fields["openTabs"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = BatchDetail;
}



/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CardType = __webpack_require__(19);

/**
* @constructor
* @memberof payments
*/
var BatchCardTotal = function() {
  this._class_ = BatchCardTotal;
  this.cardType = undefined;
  this.count = undefined;
  this.total = undefined;
};


/**
* Set the field value
* @memberof payments.BatchCardTotal
* @param {payments.CardType} cardType 
*/
BatchCardTotal.prototype.setCardType = function(cardType) {
  this.cardType = cardType;
};

/**
* Get the field value
* @memberof payments.BatchCardTotal
* @return {payments.CardType} 
*/
BatchCardTotal.prototype.getCardType = function() {
  return this.cardType;
};

/**
* Set the field value
* Total count of types
*
* @memberof payments.BatchCardTotal
* @param {Number} count must be a long integer
*/
BatchCardTotal.prototype.setCount = function(count) {
  this.count = count;
};

/**
* Get the field value
* Total count of types
* @memberof payments.BatchCardTotal
* @return {Number} must be a long integer
*/
BatchCardTotal.prototype.getCount = function() {
  return this.count;
};

/**
* Set the field value
* Total amount for type
*
* @memberof payments.BatchCardTotal
* @param {Number} total must be a long integer
*/
BatchCardTotal.prototype.setTotal = function(total) {
  this.total = total;
};

/**
* Get the field value
* Total amount for type
* @memberof payments.BatchCardTotal
* @return {Number} must be a long integer
*/
BatchCardTotal.prototype.getTotal = function() {
  return this.total;
};

/**
* @memberof payments.BatchCardTotal
* @private
*/
BatchCardTotal.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BatchCardTotal.prototype.toString = function() {
  return JSON.stringify(this);
};

BatchCardTotal._meta_ =  {fields:  {}};
BatchCardTotal._meta_._class_ =  BatchCardTotal;
BatchCardTotal._meta_.fields["cardType"] = {};
BatchCardTotal._meta_.fields["cardType"].type = payments_CardType;
BatchCardTotal._meta_.fields["count"] = {};
BatchCardTotal._meta_.fields["count"].type = Number;
BatchCardTotal._meta_.fields["total"] = {};
BatchCardTotal._meta_.fields["total"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = BatchCardTotal;
}



/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_BatchTotalType = __webpack_require__(61);

/**
* @constructor
* @memberof payments
*/
var BatchTotalStats = function() {
  this._class_ = BatchTotalStats;
  this.sales = undefined;
  this.refunds = undefined;
  this.net = undefined;
  this.giftCardLoads = undefined;
  this.giftCardCashOuts = undefined;
  this.tax = undefined;
  this.tips = undefined;
};


/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} sales 
*/
BatchTotalStats.prototype.setSales = function(sales) {
  this.sales = sales;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getSales = function() {
  return this.sales;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} refunds 
*/
BatchTotalStats.prototype.setRefunds = function(refunds) {
  this.refunds = refunds;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getRefunds = function() {
  return this.refunds;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} net 
*/
BatchTotalStats.prototype.setNet = function(net) {
  this.net = net;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getNet = function() {
  return this.net;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} giftCardLoads 
*/
BatchTotalStats.prototype.setGiftCardLoads = function(giftCardLoads) {
  this.giftCardLoads = giftCardLoads;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getGiftCardLoads = function() {
  return this.giftCardLoads;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} giftCardCashOuts 
*/
BatchTotalStats.prototype.setGiftCardCashOuts = function(giftCardCashOuts) {
  this.giftCardCashOuts = giftCardCashOuts;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getGiftCardCashOuts = function() {
  return this.giftCardCashOuts;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} tax 
*/
BatchTotalStats.prototype.setTax = function(tax) {
  this.tax = tax;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getTax = function() {
  return this.tax;
};

/**
* Set the field value
* @memberof payments.BatchTotalStats
* @param {payments.BatchTotalType} tips 
*/
BatchTotalStats.prototype.setTips = function(tips) {
  this.tips = tips;
};

/**
* Get the field value
* @memberof payments.BatchTotalStats
* @return {payments.BatchTotalType} 
*/
BatchTotalStats.prototype.getTips = function() {
  return this.tips;
};

/**
* @memberof payments.BatchTotalStats
* @private
*/
BatchTotalStats.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BatchTotalStats.prototype.toString = function() {
  return JSON.stringify(this);
};

BatchTotalStats._meta_ =  {fields:  {}};
BatchTotalStats._meta_._class_ =  BatchTotalStats;
BatchTotalStats._meta_.fields["sales"] = {};
BatchTotalStats._meta_.fields["sales"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["refunds"] = {};
BatchTotalStats._meta_.fields["refunds"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["net"] = {};
BatchTotalStats._meta_.fields["net"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["giftCardLoads"] = {};
BatchTotalStats._meta_.fields["giftCardLoads"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["giftCardCashOuts"] = {};
BatchTotalStats._meta_.fields["giftCardCashOuts"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["tax"] = {};
BatchTotalStats._meta_.fields["tax"].type = payments_BatchTotalType;
BatchTotalStats._meta_.fields["tips"] = {};
BatchTotalStats._meta_.fields["tips"].type = payments_BatchTotalType;

//
// Expose the module.
//
if (true) {
module.exports = BatchTotalStats;
}



/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_BatchTotalType = __webpack_require__(61);

/**
* @constructor
* @memberof payments
*/
var ServerTotalStats = function() {
  this._class_ = ServerTotalStats;
  this.employeeId = undefined;
  this.employeeName = undefined;
  this.sales = undefined;
  this.refunds = undefined;
  this.net = undefined;
  this.giftCardLoads = undefined;
  this.giftCardCashOuts = undefined;
  this.tax = undefined;
  this.tips = undefined;
};


/**
* Set the field value
* Employee corresponding to these stats
*
* @memberof payments.ServerTotalStats
* @param {String} employeeId 
*/
ServerTotalStats.prototype.setEmployeeId = function(employeeId) {
  this.employeeId = employeeId;
};

/**
* Get the field value
* Employee corresponding to these stats
* @memberof payments.ServerTotalStats
* @return {String} 
*/
ServerTotalStats.prototype.getEmployeeId = function() {
  return this.employeeId;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {String} employeeName 
*/
ServerTotalStats.prototype.setEmployeeName = function(employeeName) {
  this.employeeName = employeeName;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {String} 
*/
ServerTotalStats.prototype.getEmployeeName = function() {
  return this.employeeName;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} sales 
*/
ServerTotalStats.prototype.setSales = function(sales) {
  this.sales = sales;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getSales = function() {
  return this.sales;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} refunds 
*/
ServerTotalStats.prototype.setRefunds = function(refunds) {
  this.refunds = refunds;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getRefunds = function() {
  return this.refunds;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} net 
*/
ServerTotalStats.prototype.setNet = function(net) {
  this.net = net;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getNet = function() {
  return this.net;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} giftCardLoads 
*/
ServerTotalStats.prototype.setGiftCardLoads = function(giftCardLoads) {
  this.giftCardLoads = giftCardLoads;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getGiftCardLoads = function() {
  return this.giftCardLoads;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} giftCardCashOuts 
*/
ServerTotalStats.prototype.setGiftCardCashOuts = function(giftCardCashOuts) {
  this.giftCardCashOuts = giftCardCashOuts;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getGiftCardCashOuts = function() {
  return this.giftCardCashOuts;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} tax 
*/
ServerTotalStats.prototype.setTax = function(tax) {
  this.tax = tax;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getTax = function() {
  return this.tax;
};

/**
* Set the field value
* @memberof payments.ServerTotalStats
* @param {payments.BatchTotalType} tips 
*/
ServerTotalStats.prototype.setTips = function(tips) {
  this.tips = tips;
};

/**
* Get the field value
* @memberof payments.ServerTotalStats
* @return {payments.BatchTotalType} 
*/
ServerTotalStats.prototype.getTips = function() {
  return this.tips;
};

/**
* @memberof payments.ServerTotalStats
* @private
*/
ServerTotalStats.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ServerTotalStats.prototype.toString = function() {
  return JSON.stringify(this);
};

ServerTotalStats._meta_ =  {fields:  {}};
ServerTotalStats._meta_._class_ =  ServerTotalStats;
ServerTotalStats._meta_.fields["employeeId"] = {};
ServerTotalStats._meta_.fields["employeeId"].type = String;
ServerTotalStats._meta_.fields["employeeName"] = {};
ServerTotalStats._meta_.fields["employeeName"].type = String;
ServerTotalStats._meta_.fields["sales"] = {};
ServerTotalStats._meta_.fields["sales"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["refunds"] = {};
ServerTotalStats._meta_.fields["refunds"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["net"] = {};
ServerTotalStats._meta_.fields["net"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["giftCardLoads"] = {};
ServerTotalStats._meta_.fields["giftCardLoads"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["giftCardCashOuts"] = {};
ServerTotalStats._meta_.fields["giftCardCashOuts"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["tax"] = {};
ServerTotalStats._meta_.fields["tax"].type = payments_BatchTotalType;
ServerTotalStats._meta_.fields["tips"] = {};
ServerTotalStats._meta_.fields["tips"].type = payments_BatchTotalType;

//
// Expose the module.
//
if (true) {
module.exports = ServerTotalStats;
}



/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardlessPaymentDataType = {
  QR_CODE : "QR_CODE",
  BARCODE : "BARCODE"
};


//
// Expose the module.
//
if (true) {
module.exports = CardlessPaymentDataType;
}



/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CardlessPaymentNetwork = {
  ALIPAY : "ALIPAY"
};


//
// Expose the module.
//
if (true) {
module.exports = CardlessPaymentNetwork;
}



/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
Currency = {
  USD : "USD",
  GBP : "GBP",
  EUR : "EUR"
};


//
// Expose the module.
//
if (true) {
module.exports = Currency;
}



/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
GatewayTxState = {
  INITIATED : "INITIATED",
  INITIATED_ON_AUTH : "INITIATED_ON_AUTH",
  ACKNOWLEDGED : "ACKNOWLEDGED",
  CONNECT_FAILED : "CONNECT_FAILED",
  TIMEOUT : "TIMEOUT",
  FAILED : "FAILED",
  REVERSE_INITIATED : "REVERSE_INITIATED",
  REVERSE_INITIATED_ON_AUTH : "REVERSE_INITIATED_ON_AUTH",
  REVERSED : "REVERSED",
  REVERSAL_FAILED : "REVERSAL_FAILED"
};


//
// Expose the module.
//
if (true) {
module.exports = GatewayTxState;
}



/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
GatewayTxType = {
  AUTH : "AUTH",
  PREAUTH : "PREAUTH",
  PREAUTHCAPTURE : "PREAUTHCAPTURE",
  ADJUST : "ADJUST",
  VOID : "VOID",
  VOIDRETURN : "VOIDRETURN",
  RETURN : "RETURN",
  REFUND : "REFUND",
  NAKEDREFUND : "NAKEDREFUND",
  GETBALANCE : "GETBALANCE",
  BATCHCLOSE : "BATCHCLOSE",
  ACTIVATE : "ACTIVATE",
  BALANCE_LOCK : "BALANCE_LOCK",
  LOAD : "LOAD",
  CASHOUT : "CASHOUT",
  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
  REDEMPTION : "REDEMPTION",
  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
  RELOAD : "RELOAD",
  CASH_ADVANCE : "CASH_ADVANCE",
  INTERNET_ACTIVATE : "INTERNET_ACTIVATE"
};


//
// Expose the module.
//
if (true) {
module.exports = GatewayTxType;
}



/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var GiftCard = function() {
  this._class_ = GiftCard;
  this.track2 = undefined;
  this.cardNumber = undefined;
  this.isManuallyEntered = false;
  this.deviceSerial = undefined;
  this.virtual = false;
  this.promoCode = undefined;
};


/**
* Set the field value
* Track 2 Card Data
*
* @memberof payments.GiftCard
* @param {String} track2 
*/
GiftCard.prototype.setTrack2 = function(track2) {
  this.track2 = track2;
};

/**
* Get the field value
* Track 2 Card Data
* @memberof payments.GiftCard
* @return {String} 
*/
GiftCard.prototype.getTrack2 = function() {
  return this.track2;
};

/**
* Set the field value
* Embossed Card Number
*
* @memberof payments.GiftCard
* @param {String} cardNumber 
*/
GiftCard.prototype.setCardNumber = function(cardNumber) {
  this.cardNumber = cardNumber;
};

/**
* Get the field value
* Embossed Card Number
* @memberof payments.GiftCard
* @return {String} 
*/
GiftCard.prototype.getCardNumber = function() {
  return this.cardNumber;
};

/**
* Set the field value
* Was Account Number Manually Entered
*
* @memberof payments.GiftCard
* @param {Boolean} isManuallyEntered 
*/
GiftCard.prototype.setIsManuallyEntered = function(isManuallyEntered) {
  this.isManuallyEntered = isManuallyEntered;
};

/**
* Get the field value
* Was Account Number Manually Entered
* @memberof payments.GiftCard
* @return {Boolean} 
*/
GiftCard.prototype.getIsManuallyEntered = function() {
  return this.isManuallyEntered;
};

/**
* Set the field value
* @memberof payments.GiftCard
* @param {String} deviceSerial 
*/
GiftCard.prototype.setDeviceSerial = function(deviceSerial) {
  this.deviceSerial = deviceSerial;
};

/**
* Get the field value
* @memberof payments.GiftCard
* @return {String} 
*/
GiftCard.prototype.getDeviceSerial = function() {
  return this.deviceSerial;
};

/**
* Set the field value
* Is this a virtual gift card
*
* @memberof payments.GiftCard
* @param {Boolean} virtual 
*/
GiftCard.prototype.setVirtual = function(virtual) {
  this.virtual = virtual;
};

/**
* Get the field value
* Is this a virtual gift card
* @memberof payments.GiftCard
* @return {Boolean} 
*/
GiftCard.prototype.getVirtual = function() {
  return this.virtual;
};

/**
* Set the field value
* Virtual Promo Code
*
* @memberof payments.GiftCard
* @param {String} promoCode 
*/
GiftCard.prototype.setPromoCode = function(promoCode) {
  this.promoCode = promoCode;
};

/**
* Get the field value
* Virtual Promo Code
* @memberof payments.GiftCard
* @return {String} 
*/
GiftCard.prototype.getPromoCode = function() {
  return this.promoCode;
};

/**
* @memberof payments.GiftCard
* @private
*/
GiftCard.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

GiftCard.prototype.toString = function() {
  return JSON.stringify(this);
};

GiftCard._meta_ =  {fields:  {}};
GiftCard._meta_._class_ =  GiftCard;
GiftCard._meta_.fields["track2"] = {};
GiftCard._meta_.fields["track2"].type = String;
GiftCard._meta_.fields["cardNumber"] = {};
GiftCard._meta_.fields["cardNumber"].type = String;
GiftCard._meta_.fields["isManuallyEntered"] = {};
GiftCard._meta_.fields["isManuallyEntered"].type = Boolean;
GiftCard._meta_.fields["deviceSerial"] = {};
GiftCard._meta_.fields["deviceSerial"].type = String;
GiftCard._meta_.fields["virtual"] = {};
GiftCard._meta_.fields["virtual"].type = Boolean;
GiftCard._meta_.fields["promoCode"] = {};
GiftCard._meta_.fields["promoCode"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = GiftCard;
}



/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
GiftCardState = {
  INVALID : "INVALID",
  ACTIVATED : "ACTIVATED",
  INACTIVE : "INACTIVE"
};


//
// Expose the module.
//
if (true) {
module.exports = GiftCardState;
}



/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
TxType = {
  AUTH : "AUTH",
  PREAUTH : "PREAUTH",
  PREAUTHCAPTURE : "PREAUTHCAPTURE",
  ADJUST : "ADJUST",
  VOID : "VOID",
  VOIDRETURN : "VOIDRETURN",
  RETURN : "RETURN",
  REFUND : "REFUND",
  NAKEDREFUND : "NAKEDREFUND",
  GETBALANCE : "GETBALANCE",
  BATCHCLOSE : "BATCHCLOSE",
  ACTIVATE : "ACTIVATE",
  BALANCE_LOCK : "BALANCE_LOCK",
  LOAD : "LOAD",
  CASHOUT : "CASHOUT",
  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
  REDEMPTION : "REDEMPTION",
  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
  RELOAD : "RELOAD",
  INTERNET_ACTIVATE : "INTERNET_ACTIVATE"
};


//
// Expose the module.
//
if (true) {
module.exports = TxType;
}



/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
OverrideType = {
  RESELLER : "RESELLER",
  MERCHANT_GROUP : "MERCHANT_GROUP"
};


//
// Expose the module.
//
if (true) {
module.exports = OverrideType;
}



/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
ParamType = {
  TAG_32_16 : "TAG_32_16",
  TAG_16_8 : "TAG_16_8",
  DECIMAL : "DECIMAL",
  STRING : "STRING",
  BOOLEAN : "BOOLEAN",
  DELIMITED_HEX_BINARY : "DELIMITED_HEX_BINARY",
  HEX_BINARY : "HEX_BINARY"
};


//
// Expose the module.
//
if (true) {
module.exports = ParamType;
}



/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var Tag = function() {
  this._class_ = Tag;
  this.tag = undefined;
  this.length = undefined;
  this.value = undefined;
  this.description = undefined;
  this.optional = undefined;
  this.filter = undefined;
};


/**
* Set the field value
* @memberof payments.Tag
* @param {String} tag 
*/
Tag.prototype.setTag = function(tag) {
  this.tag = tag;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getTag = function() {
  return this.tag;
};

/**
* Set the field value
* @memberof payments.Tag
* @param {String} length 
*/
Tag.prototype.setLength = function(length) {
  this.length = length;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getLength = function() {
  return this.length;
};

/**
* Set the field value
* @memberof payments.Tag
* @param {String} value 
*/
Tag.prototype.setValue = function(value) {
  this.value = value;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getValue = function() {
  return this.value;
};

/**
* Set the field value
* @memberof payments.Tag
* @param {String} description 
*/
Tag.prototype.setDescription = function(description) {
  this.description = description;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getDescription = function() {
  return this.description;
};

/**
* Set the field value
* @memberof payments.Tag
* @param {String} optional 
*/
Tag.prototype.setOptional = function(optional) {
  this.optional = optional;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getOptional = function() {
  return this.optional;
};

/**
* Set the field value
* @memberof payments.Tag
* @param {String} filter 
*/
Tag.prototype.setFilter = function(filter) {
  this.filter = filter;
};

/**
* Get the field value
* @memberof payments.Tag
* @return {String} 
*/
Tag.prototype.getFilter = function() {
  return this.filter;
};

/**
* @memberof payments.Tag
* @private
*/
Tag.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Tag.prototype.toString = function() {
  return JSON.stringify(this);
};

Tag._meta_ =  {fields:  {}};
Tag._meta_._class_ =  Tag;
Tag._meta_.fields["tag"] = {};
Tag._meta_.fields["tag"].type = String;
Tag._meta_.fields["length"] = {};
Tag._meta_.fields["length"].type = String;
Tag._meta_.fields["value"] = {};
Tag._meta_.fields["value"].type = String;
Tag._meta_.fields["description"] = {};
Tag._meta_.fields["description"].type = String;
Tag._meta_.fields["optional"] = {};
Tag._meta_.fields["optional"].type = String;
Tag._meta_.fields["filter"] = {};
Tag._meta_.fields["filter"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = Tag;
}



/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_DisplayDiscount = __webpack_require__(30);

/**
* @constructor
* @memberof remotemessage
*/
var AddDiscountAction = function() {
  this._class_ = AddDiscountAction;
  this.discount = undefined;
};


/**
* Set the field value
* @memberof remotemessage.AddDiscountAction
* @param {order.DisplayDiscount} discount 
*/
AddDiscountAction.prototype.setDiscount = function(discount) {
  this.discount = discount;
};

/**
* Get the field value
* @memberof remotemessage.AddDiscountAction
* @return {order.DisplayDiscount} 
*/
AddDiscountAction.prototype.getDiscount = function() {
  return this.discount;
};

/**
* @memberof remotemessage.AddDiscountAction
* @private
*/
AddDiscountAction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

AddDiscountAction.prototype.toString = function() {
  return JSON.stringify(this);
};

AddDiscountAction._meta_ =  {fields:  {}};
AddDiscountAction._meta_._class_ =  AddDiscountAction;
AddDiscountAction._meta_.fields["discount"] = {};
AddDiscountAction._meta_.fields["discount"].type = order_DisplayDiscount;

//
// Expose the module.
//
if (true) {
module.exports = AddDiscountAction;
}



/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_DisplayLineItem = __webpack_require__(48);

/**
* @constructor
* @memberof remotemessage
*/
var AddLineItemAction = function() {
  this._class_ = AddLineItemAction;
  this.discount = undefined;
  this.taxable = undefined;
};


/**
* Set the field value
* @memberof remotemessage.AddLineItemAction
* @param {order.DisplayLineItem} discount 
*/
AddLineItemAction.prototype.setDiscount = function(discount) {
  this.discount = discount;
};

/**
* Get the field value
* @memberof remotemessage.AddLineItemAction
* @return {order.DisplayLineItem} 
*/
AddLineItemAction.prototype.getDiscount = function() {
  return this.discount;
};

/**
* Set the field value
* @memberof remotemessage.AddLineItemAction
* @param {Boolean} taxable 
*/
AddLineItemAction.prototype.setTaxable = function(taxable) {
  this.taxable = taxable;
};

/**
* Get the field value
* @memberof remotemessage.AddLineItemAction
* @return {Boolean} 
*/
AddLineItemAction.prototype.getTaxable = function() {
  return this.taxable;
};

/**
* @memberof remotemessage.AddLineItemAction
* @private
*/
AddLineItemAction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

AddLineItemAction.prototype.toString = function() {
  return JSON.stringify(this);
};

AddLineItemAction._meta_ =  {fields:  {}};
AddLineItemAction._meta_._class_ =  AddLineItemAction;
AddLineItemAction._meta_.fields["discount"] = {};
AddLineItemAction._meta_.fields["discount"].type = order_DisplayLineItem;
AddLineItemAction._meta_.fields["taxable"] = {};
AddLineItemAction._meta_.fields["taxable"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = AddLineItemAction;
}



/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
TransactionType = {
  PAYMENT : "PAYMENT",
  CREDIT : "CREDIT",
  AUTH : "AUTH",
  DATA : "DATA",
  BALANCE_INQUIRY : "BALANCE_INQUIRY",
  PAYMENT_REVERSAL : "PAYMENT_REVERSAL",
  CREDIT_REVERSAL : "CREDIT_REVERSAL"
};


//
// Expose the module.
//
if (true) {
module.exports = TransactionType;
}



/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotemessage
*/
var ExternalDeviceStateData = function() {
  this._class_ = ExternalDeviceStateData;
  this.externalPaymentId = undefined;
  this.customActivityId = undefined;
};


/**
* Set the field value
* External Payment Id, if applicable
*
* @memberof remotemessage.ExternalDeviceStateData
* @param {String} externalPaymentId 
*/
ExternalDeviceStateData.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* External Payment Id, if applicable
* @memberof remotemessage.ExternalDeviceStateData
* @return {String} 
*/
ExternalDeviceStateData.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* Custom Activity Id, if applicable
*
* @memberof remotemessage.ExternalDeviceStateData
* @param {String} customActivityId 
*/
ExternalDeviceStateData.prototype.setCustomActivityId = function(customActivityId) {
  this.customActivityId = customActivityId;
};

/**
* Get the field value
* Custom Activity Id, if applicable
* @memberof remotemessage.ExternalDeviceStateData
* @return {String} 
*/
ExternalDeviceStateData.prototype.getCustomActivityId = function() {
  return this.customActivityId;
};

/**
* @memberof remotemessage.ExternalDeviceStateData
* @private
*/
ExternalDeviceStateData.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ExternalDeviceStateData.prototype.toString = function() {
  return JSON.stringify(this);
};

ExternalDeviceStateData._meta_ =  {fields:  {}};
ExternalDeviceStateData._meta_._class_ =  ExternalDeviceStateData;
ExternalDeviceStateData._meta_.fields["externalPaymentId"] = {};
ExternalDeviceStateData._meta_.fields["externalPaymentId"].type = String;
ExternalDeviceStateData._meta_.fields["customActivityId"] = {};
ExternalDeviceStateData._meta_.fields["customActivityId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceStateData;
}



/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
ExternalDeviceSubState = {
  CUSTOM_ACTIVITY : "CUSTOM_ACTIVITY",
  STARTING_PAYMENT_FLOW : "STARTING_PAYMENT_FLOW",
  PROCESSING_PAYMENT : "PROCESSING_PAYMENT",
  PROCESSING_CARD_DATA : "PROCESSING_CARD_DATA",
  PROCESSING_CREDIT : "PROCESSING_CREDIT",
  VERIFY_SIGNATURE : "VERIFY_SIGNATURE",
  TIP_SCREEN : "TIP_SCREEN",
  RECEIPT_SCREEN : "RECEIPT_SCREEN",
  CONFIRM_PAYMENT : "CONFIRM_PAYMENT",
  UNKNOWN : "UNKNOWN"
};


//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceSubState;
}



/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_KeyPress = __webpack_require__(33);

/**
* @constructor
* @memberof remotemessage
*/
var InputOption = function() {
  this._class_ = InputOption;
  this.keyPress = undefined;
  this.description = undefined;
};


/**
* Set the field value
* The keypress this represents
*
* @memberof remotemessage.InputOption
* @param {remotemessage.KeyPress} keyPress 
*/
InputOption.prototype.setKeyPress = function(keyPress) {
  this.keyPress = keyPress;
};

/**
* Get the field value
* The keypress this represents
* @memberof remotemessage.InputOption
* @return {remotemessage.KeyPress} 
*/
InputOption.prototype.getKeyPress = function() {
  return this.keyPress;
};

/**
* Set the field value
* A description of what this input option represents
*
* @memberof remotemessage.InputOption
* @param {String} description 
*/
InputOption.prototype.setDescription = function(description) {
  this.description = description;
};

/**
* Get the field value
* A description of what this input option represents
* @memberof remotemessage.InputOption
* @return {String} 
*/
InputOption.prototype.getDescription = function() {
  return this.description;
};

/**
* @memberof remotemessage.InputOption
* @private
*/
InputOption.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

InputOption.prototype.toString = function() {
  return JSON.stringify(this);
};

InputOption._meta_ =  {fields:  {}};
InputOption._meta_._class_ =  InputOption;
InputOption._meta_.fields["keyPress"] = {};
InputOption._meta_.fields["keyPress"].type = remotemessage_KeyPress;
InputOption._meta_.fields["description"] = {};
InputOption._meta_.fields["description"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = InputOption;
}



/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
LogLevelEnum = {
  VERBOSE : "VERBOSE",
  DEBUG : "DEBUG",
  INFO : "INFO",
  WARN : "WARN",
  ERROR : "ERROR"
};


//
// Expose the module.
//
if (true) {
module.exports = LogLevelEnum;
}



/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotemessage
*/
var RemoveDiscountAction = function() {
  this._class_ = RemoveDiscountAction;
  this.discountId = undefined;
  this.lineItemId = undefined;
};


/**
* Set the field value
* @memberof remotemessage.RemoveDiscountAction
* @param {String} discountId 
*/
RemoveDiscountAction.prototype.setDiscountId = function(discountId) {
  this.discountId = discountId;
};

/**
* Get the field value
* @memberof remotemessage.RemoveDiscountAction
* @return {String} 
*/
RemoveDiscountAction.prototype.getDiscountId = function() {
  return this.discountId;
};

/**
* Set the field value
* @memberof remotemessage.RemoveDiscountAction
* @param {String} lineItemId 
*/
RemoveDiscountAction.prototype.setLineItemId = function(lineItemId) {
  this.lineItemId = lineItemId;
};

/**
* Get the field value
* @memberof remotemessage.RemoveDiscountAction
* @return {String} 
*/
RemoveDiscountAction.prototype.getLineItemId = function() {
  return this.lineItemId;
};

/**
* @memberof remotemessage.RemoveDiscountAction
* @private
*/
RemoveDiscountAction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

RemoveDiscountAction.prototype.toString = function() {
  return JSON.stringify(this);
};

RemoveDiscountAction._meta_ =  {fields:  {}};
RemoveDiscountAction._meta_._class_ =  RemoveDiscountAction;
RemoveDiscountAction._meta_.fields["discountId"] = {};
RemoveDiscountAction._meta_.fields["discountId"].type = String;
RemoveDiscountAction._meta_.fields["lineItemId"] = {};
RemoveDiscountAction._meta_.fields["lineItemId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RemoveDiscountAction;
}



/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotemessage
*/
var RemoveLineItemAction = function() {
  this._class_ = RemoveLineItemAction;
  this.lineItemId = undefined;
};


/**
* Set the field value
* @memberof remotemessage.RemoveLineItemAction
* @param {String} lineItemId 
*/
RemoveLineItemAction.prototype.setLineItemId = function(lineItemId) {
  this.lineItemId = lineItemId;
};

/**
* Get the field value
* @memberof remotemessage.RemoveLineItemAction
* @return {String} 
*/
RemoveLineItemAction.prototype.getLineItemId = function() {
  return this.lineItemId;
};

/**
* @memberof remotemessage.RemoveLineItemAction
* @private
*/
RemoveLineItemAction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

RemoveLineItemAction.prototype.toString = function() {
  return JSON.stringify(this);
};

RemoveLineItemAction._meta_ =  {fields:  {}};
RemoveLineItemAction._meta_._class_ =  RemoveLineItemAction;
RemoveLineItemAction._meta_.fields["lineItemId"] = {};
RemoveLineItemAction._meta_.fields["lineItemId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RemoveLineItemAction;
}



/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotemessage
*/
var OrderActionResponse = function() {
  this._class_ = OrderActionResponse;
  this.accepted = undefined;
  this.id = undefined;
};


/**
* Set the field value
* @memberof remotemessage.OrderActionResponse
* @param {Boolean} accepted 
*/
OrderActionResponse.prototype.setAccepted = function(accepted) {
  this.accepted = accepted;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionResponse
* @return {Boolean} 
*/
OrderActionResponse.prototype.getAccepted = function() {
  return this.accepted;
};

/**
* Set the field value
* @memberof remotemessage.OrderActionResponse
* @param {String} id 
*/
OrderActionResponse.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionResponse
* @return {String} 
*/
OrderActionResponse.prototype.getId = function() {
  return this.id;
};

/**
* @memberof remotemessage.OrderActionResponse
* @private
*/
OrderActionResponse.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderActionResponse.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderActionResponse._meta_ =  {fields:  {}};
OrderActionResponse._meta_._class_ =  OrderActionResponse;
OrderActionResponse._meta_.fields["accepted"] = {};
OrderActionResponse._meta_.fields["accepted"].type = Boolean;
OrderActionResponse._meta_.fields["id"] = {};
OrderActionResponse._meta_.fields["id"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionResponse;
}



/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PairingRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PairingRequestMessage;
  this.setMethod(remotemessage_Method["PAIRING_REQUEST"]);
  this.name = undefined;
  this.serialNumber = undefined;
  this.applicationName = undefined;
  this.authenticationToken = undefined;
};

PairingRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
PairingRequestMessage.prototype.constructor = PairingRequestMessage;

/**
* Set the field value
* The peripheral sends a pairing request containing the peripheral name
*
* @memberof remotemessage.PairingRequestMessage
* @param {String} name 
*/
PairingRequestMessage.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* The peripheral sends a pairing request containing the peripheral name
* @memberof remotemessage.PairingRequestMessage
* @return {String} 
*/
PairingRequestMessage.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* The peripheral serial number
*
* @memberof remotemessage.PairingRequestMessage
* @param {String} serialNumber 
*/
PairingRequestMessage.prototype.setSerialNumber = function(serialNumber) {
  this.serialNumber = serialNumber;
};

/**
* Get the field value
* The peripheral serial number
* @memberof remotemessage.PairingRequestMessage
* @return {String} 
*/
PairingRequestMessage.prototype.getSerialNumber = function() {
  return this.serialNumber;
};

/**
* Set the field value
* The name of the application the peripheral is associated with. This is the "resourceDescriptor" in the handshake
*
* @memberof remotemessage.PairingRequestMessage
* @param {String} applicationName 
*/
PairingRequestMessage.prototype.setApplicationName = function(applicationName) {
  this.applicationName = applicationName;
};

/**
* Get the field value
* The name of the application the peripheral is associated with. This is the "resourceDescriptor" in the handshake
* @memberof remotemessage.PairingRequestMessage
* @return {String} 
*/
PairingRequestMessage.prototype.getApplicationName = function() {
  return this.applicationName;
};

/**
* Set the field value
* The token, recognized by the specific device.
*
* @memberof remotemessage.PairingRequestMessage
* @param {String|Null} authenticationToken 
*/
PairingRequestMessage.prototype.setAuthenticationToken = function(authenticationToken) {
  this.authenticationToken = authenticationToken;
};

/**
* Get the field value
* The token, recognized by the specific device.
* @memberof remotemessage.PairingRequestMessage
* @return {String|Null} 
*/
PairingRequestMessage.prototype.getAuthenticationToken = function() {
  return this.authenticationToken;
};

PairingRequestMessage._meta_ =  {fields:  {}};
PairingRequestMessage._meta_._class_ =  PairingRequestMessage;
PairingRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PairingRequestMessage._meta_.fields["name"] = {};
PairingRequestMessage._meta_.fields["name"].type = String;
PairingRequestMessage._meta_.fields["serialNumber"] = {};
PairingRequestMessage._meta_.fields["serialNumber"].type = String;
PairingRequestMessage._meta_.fields["applicationName"] = {};
PairingRequestMessage._meta_.fields["applicationName"].type = String;
PairingRequestMessage._meta_.fields["authenticationToken"] = {};
PairingRequestMessage._meta_.fields["authenticationToken"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PairingRequestMessage;
}



/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
PairingState = {
  UNINITIALIZED : "UNINITIALIZED",
  PAIRED : "PAIRED",
  FAILED : "FAILED",
  INITIAL : "INITIAL"
};


//
// Expose the module.
//
if (true) {
module.exports = PairingState;
}



/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
RemoteMessageType = {
  COMMAND : "COMMAND",
  QUERY : "QUERY",
  EVENT : "EVENT",
  PING : "PING",
  PONG : "PONG"
};


//
// Expose the module.
//
if (true) {
module.exports = RemoteMessageType;
}



/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
TxStartResponseResult = {
  SUCCESS : "SUCCESS",
  ORDER_MODIFIED : "ORDER_MODIFIED",
  ORDER_LOAD : "ORDER_LOAD",
  DUPLICATE : "DUPLICATE",
  FAIL : "FAIL"
};


//
// Expose the module.
//
if (true) {
module.exports = TxStartResponseResult;
}



/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
UiDirection = {
  ENTER : "ENTER",
  EXIT : "EXIT"
};


//
// Expose the module.
//
if (true) {
module.exports = UiDirection;
}



/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotemessage
* @enum {string}
*/
UiState = {
  START : "START",
  FAILED : "FAILED",
  FATAL : "FATAL",
  TRY_AGAIN : "TRY_AGAIN",
  INPUT_ERROR : "INPUT_ERROR",
  PIN_BYPASS_CONFIRM : "PIN_BYPASS_CONFIRM",
  CANCELED : "CANCELED",
  TIMED_OUT : "TIMED_OUT",
  DECLINED : "DECLINED",
  VOIDED : "VOIDED",
  CONFIGURING : "CONFIGURING",
  PROCESSING : "PROCESSING",
  REMOVE_CARD : "REMOVE_CARD",
  PROCESSING_GO_ONLINE : "PROCESSING_GO_ONLINE",
  PROCESSING_CREDIT : "PROCESSING_CREDIT",
  PROCESSING_SWIPE : "PROCESSING_SWIPE",
  SELECT_APPLICATION : "SELECT_APPLICATION",
  PIN_PAD : "PIN_PAD",
  MANUAL_CARD_NUMBER : "MANUAL_CARD_NUMBER",
  MANUAL_CARD_CVV : "MANUAL_CARD_CVV",
  MANUAL_CARD_CVV_UNREADABLE : "MANUAL_CARD_CVV_UNREADABLE",
  MANUAL_CARD_EXPIRATION : "MANUAL_CARD_EXPIRATION",
  SELECT_ACCOUNT : "SELECT_ACCOUNT",
  CASHBACK_CONFIRM : "CASHBACK_CONFIRM",
  CASHBACK_SELECT : "CASHBACK_SELECT",
  CONTACTLESS_TAP_REQUIRED : "CONTACTLESS_TAP_REQUIRED",
  VOICE_REFERRAL_RESULT : "VOICE_REFERRAL_RESULT",
  CONFIRM_PARTIAL_AUTH : "CONFIRM_PARTIAL_AUTH",
  PACKET_EXCEPTION : "PACKET_EXCEPTION",
  CONFIRM_DUPLICATE_CHECK : "CONFIRM_DUPLICATE_CHECK",
  FORCE_ACCEPTANCE : "FORCE_ACCEPTANCE",
  VERIFY_SIGNATURE_ON_PAPER : "VERIFY_SIGNATURE_ON_PAPER",
  VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID",
  VERIFY_SIGNATURE_ON_SCREEN : "VERIFY_SIGNATURE_ON_SCREEN",
  VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID",
  ADD_SIGNATURE : "ADD_SIGNATURE",
  SIGNATURE_ON_SCREEN_FALLBACK : "SIGNATURE_ON_SCREEN_FALLBACK",
  RETURN_TO_MERCHANT : "RETURN_TO_MERCHANT",
  SIGNATURE_REJECT : "SIGNATURE_REJECT",
  ADD_SIGNATURE_CANCEL_CONFIRM : "ADD_SIGNATURE_CANCEL_CONFIRM",
  ADD_TIP : "ADD_TIP",
  RECEIPT_OPTIONS : "RECEIPT_OPTIONS",
  HANDLE_TENDER : "HANDLE_TENDER",
  SELECT_LANGUAGE : "SELECT_LANGUAGE",
  APPROVED : "APPROVED",
  OFFLINE_PAYMENT_CONFIRM : "OFFLINE_PAYMENT_CONFIRM",
  CUSTOM_ACTIVITY : "CUSTOM_ACTIVITY",
  STARTING_CUSTOM_ACTIVITY : "STARTING_CUSTOM_ACTIVITY"
};


//
// Expose the module.
//
if (true) {
module.exports = UiState;
}



/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var PlatformError = function() {
  this._class_ = PlatformError;
  this.message = undefined;
};


/**
* Set the field value
* Description of the error.
*
* @memberof remotepay.PlatformError
* @param {String} message 
*/
PlatformError.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* Description of the error.
* @memberof remotepay.PlatformError
* @return {String} 
*/
PlatformError.prototype.getMessage = function() {
  return this.message;
};

/**
* @memberof remotepay.PlatformError
* @private
*/
PlatformError.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PlatformError.prototype.toString = function() {
  return JSON.stringify(this);
};

PlatformError._meta_ =  {fields:  {}};
PlatformError._meta_._class_ =  PlatformError;
PlatformError._meta_.fields["message"] = {};
PlatformError._meta_.fields["message"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PlatformError;
}



/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof remotepay
* @enum {string}
*/
ErrorType = {
  COMMUNICATION : "COMMUNICATION",
  VALIDATION : "VALIDATION",
  EXCEPTION : "EXCEPTION"
};


//
// Expose the module.
//
if (true) {
module.exports = ErrorType;
}



/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_KeyPress = __webpack_require__(72);

/**
* @constructor
* @memberof remotepay
*/
var InputOption = function() {
  this._class_ = InputOption;
  this.keyPress = undefined;
  this.description = undefined;
};


/**
* Set the field value
* The keypress this represents
*
* @memberof remotepay.InputOption
* @param {remotepay.KeyPress} keyPress 
*/
InputOption.prototype.setKeyPress = function(keyPress) {
  this.keyPress = keyPress;
};

/**
* Get the field value
* The keypress this represents
* @memberof remotepay.InputOption
* @return {remotepay.KeyPress} 
*/
InputOption.prototype.getKeyPress = function() {
  return this.keyPress;
};

/**
* Set the field value
* A description of what this input option represents
*
* @memberof remotepay.InputOption
* @param {String} description 
*/
InputOption.prototype.setDescription = function(description) {
  this.description = description;
};

/**
* Get the field value
* A description of what this input option represents
* @memberof remotepay.InputOption
* @return {String} 
*/
InputOption.prototype.getDescription = function() {
  return this.description;
};

/**
* @memberof remotepay.InputOption
* @private
*/
InputOption.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

InputOption.prototype.toString = function() {
  return JSON.stringify(this);
};

InputOption._meta_ =  {fields:  {}};
InputOption._meta_._class_ =  InputOption;
InputOption._meta_.fields["keyPress"] = {};
InputOption._meta_.fields["keyPress"].type = remotepay_KeyPress;
InputOption._meta_.fields["description"] = {};
InputOption._meta_.fields["description"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = InputOption;
}



/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var DeviceInfo = function() {
  this._class_ = DeviceInfo;
  this.name = undefined;
  this.model = undefined;
  this.serial = undefined;
  this.supportsAcks = undefined;
};


/**
* Set the field value
* Name of the device (if entered)
*
* @memberof remotepay.DeviceInfo
* @param {String} name 
*/
DeviceInfo.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the device (if entered)
* @memberof remotepay.DeviceInfo
* @return {String} 
*/
DeviceInfo.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof remotepay.DeviceInfo
* @param {String} model 
*/
DeviceInfo.prototype.setModel = function(model) {
  this.model = model;
};

/**
* Get the field value
* @memberof remotepay.DeviceInfo
* @return {String} 
*/
DeviceInfo.prototype.getModel = function() {
  return this.model;
};

/**
* Set the field value
* @memberof remotepay.DeviceInfo
* @param {String} serial 
*/
DeviceInfo.prototype.setSerial = function(serial) {
  this.serial = serial;
};

/**
* Get the field value
* @memberof remotepay.DeviceInfo
* @return {String} 
*/
DeviceInfo.prototype.getSerial = function() {
  return this.serial;
};

/**
* Set the field value
* If true, then the device supports acknowledgements.
*
* @memberof remotepay.DeviceInfo
* @param {Boolean} supportsAcks 
*/
DeviceInfo.prototype.setSupportsAcks = function(supportsAcks) {
  this.supportsAcks = supportsAcks;
};

/**
* Get the field value
* If true, then the device supports acknowledgements.
* @memberof remotepay.DeviceInfo
* @return {Boolean} 
*/
DeviceInfo.prototype.getSupportsAcks = function() {
  return this.supportsAcks;
};

/**
* @memberof remotepay.DeviceInfo
* @private
*/
DeviceInfo.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DeviceInfo.prototype.toString = function() {
  return JSON.stringify(this);
};

DeviceInfo._meta_ =  {fields:  {}};
DeviceInfo._meta_._class_ =  DeviceInfo;
DeviceInfo._meta_.fields["name"] = {};
DeviceInfo._meta_.fields["name"].type = String;
DeviceInfo._meta_.fields["model"] = {};
DeviceInfo._meta_.fields["model"].type = String;
DeviceInfo._meta_.fields["serial"] = {};
DeviceInfo._meta_.fields["serial"].type = String;
DeviceInfo._meta_.fields["supportsAcks"] = {};
DeviceInfo._meta_.fields["supportsAcks"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = DeviceInfo;
}



/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var ExternalDeviceStateData = function() {
  this._class_ = ExternalDeviceStateData;
  this.externalPaymentId = undefined;
  this.customActivityId = undefined;
};


/**
* Set the field value
* External Payment Id, if applicable
*
* @memberof remotepay.ExternalDeviceStateData
* @param {String} externalPaymentId 
*/
ExternalDeviceStateData.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* External Payment Id, if applicable
* @memberof remotepay.ExternalDeviceStateData
* @return {String} 
*/
ExternalDeviceStateData.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* Custom Activity Id, if applicable
*
* @memberof remotepay.ExternalDeviceStateData
* @param {String} customActivityId 
*/
ExternalDeviceStateData.prototype.setCustomActivityId = function(customActivityId) {
  this.customActivityId = customActivityId;
};

/**
* Get the field value
* Custom Activity Id, if applicable
* @memberof remotepay.ExternalDeviceStateData
* @return {String} 
*/
ExternalDeviceStateData.prototype.getCustomActivityId = function() {
  return this.customActivityId;
};

/**
* @memberof remotepay.ExternalDeviceStateData
* @private
*/
ExternalDeviceStateData.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ExternalDeviceStateData.prototype.toString = function() {
  return JSON.stringify(this);
};

ExternalDeviceStateData._meta_ =  {fields:  {}};
ExternalDeviceStateData._meta_._class_ =  ExternalDeviceStateData;
ExternalDeviceStateData._meta_.fields["externalPaymentId"] = {};
ExternalDeviceStateData._meta_.fields["externalPaymentId"].type = String;
ExternalDeviceStateData._meta_.fields["customActivityId"] = {};
ExternalDeviceStateData._meta_.fields["customActivityId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceStateData;
}



/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var Img = function() {
  this._class_ = Img;
  this.src = undefined;
  this.width = undefined;
  this.height = undefined;
};


/**
* Set the field value
* The url to the image if available
*
* @memberof remotepay.Img
* @param {String} src 
*/
Img.prototype.setSrc = function(src) {
  this.src = src;
};

/**
* Get the field value
* The url to the image if available
* @memberof remotepay.Img
* @return {String} 
*/
Img.prototype.getSrc = function() {
  return this.src;
};

/**
* Set the field value
* The width of the image if available
*
* @memberof remotepay.Img
* @param {Number} width must be a long integer
*/
Img.prototype.setWidth = function(width) {
  this.width = width;
};

/**
* Get the field value
* The width of the image if available
* @memberof remotepay.Img
* @return {Number} must be a long integer
*/
Img.prototype.getWidth = function() {
  return this.width;
};

/**
* Set the field value
* The height of the image if available
*
* @memberof remotepay.Img
* @param {Number} height must be a long integer
*/
Img.prototype.setHeight = function(height) {
  this.height = height;
};

/**
* Get the field value
* The height of the image if available
* @memberof remotepay.Img
* @return {Number} must be a long integer
*/
Img.prototype.getHeight = function() {
  return this.height;
};

/**
* @memberof remotepay.Img
* @private
*/
Img.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Img.prototype.toString = function() {
  return JSON.stringify(this);
};

Img._meta_ =  {fields:  {}};
Img._meta_._class_ =  Img;
Img._meta_.fields["src"] = {};
Img._meta_.fields["src"].type = String;
Img._meta_.fields["width"] = {};
Img._meta_.fields["width"].type = Number;
Img._meta_.fields["height"] = {};
Img._meta_.fields["height"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Img;
}



/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines card entry method constants used in device communication.
 *
 */
var CardEntryMethods = (function () {
    function CardEntryMethods() {
    }
    CardEntryMethods.KIOSK_CARD_ENTRY_METHODS = 1 << 15;
    CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE = 1 | 256 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33026
    CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT = 2 | 512 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33282
    CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS = 4 | 1024 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33796
    CardEntryMethods.CARD_ENTRY_METHOD_MANUAL = 8 | 2048 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 34824
    CardEntryMethods.DEFAULT = CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE |
        CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT |
        CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS; // | CARD_ENTRY_METHOD_MANUAL;
    CardEntryMethods.ALL = CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE |
        CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT |
        CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS |
        CardEntryMethods.CARD_ENTRY_METHOD_MANUAL;
    return CardEntryMethods;
}());
exports.CardEntryMethods = CardEntryMethods;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CardEntryMethods.js.map


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A simple central location for debugging configurations.
 */
var DebugConfig = (function () {
    function DebugConfig() {
    }
    DebugConfig.loggingEnabled = false;
    return DebugConfig;
}());
exports.DebugConfig = DebugConfig;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/util/DebugConfig.js.map


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = __webpack_require__(7);
/**
 * Clover Device Factory
 *
 * The clover device factory returns new clover devices.
 */
var CloverDeviceFactory = (function () {
    function CloverDeviceFactory() {
    }
    /**
     * Returns a new clover device based on the configuration
     *
     * @param {CloverDeviceConfiguration} configuration
     * @returns CloverDevice
     */
    CloverDeviceFactory.get = function (configuration) {
        var cloverDevice = configuration.getCloverDeviceType();
        // Try to get the requested clover device.
        var cd = null;
        try {
            cd = new cloverDevice(configuration);
        }
        catch (e) {
            Logger_1.Logger.create().error(e);
        }
        // Return the clover device or null.
        return cd;
    };
    return CloverDeviceFactory;
}());
exports.CloverDeviceFactory = CloverDeviceFactory;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/CloverDeviceFactory.js.map


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = __webpack_require__(7);
/**
 * Interface used to abstract implementation details to allow for NodeJS and
 * Browser usage of the library.
 *
 */
var HttpSupport = (function () {
    function HttpSupport(xmlHttpImplClass) {
        // Create a logger - when we need it
        this.logger = Logger_1.Logger.create();
        this.xmlHttpImplClass = xmlHttpImplClass;
    }
    HttpSupport.prototype.setXmlHttpCallback = function (xmlHttpInst, endpoint, onDataLoaded, onError) {
        xmlHttpInst.onreadystatechange = function () {
            if (xmlHttpInst.readyState == 4) {
                if (xmlHttpInst.status == 200) {
                    try {
                        if (onDataLoaded) {
                            var data = null;
                            if (xmlHttpInst.responseText && xmlHttpInst.responseText != "") {
                                data = JSON.parse(xmlHttpInst.responseText);
                            }
                            onDataLoaded(data, xmlHttpInst);
                        }
                    }
                    catch (e) {
                        this.logger.error(endpoint, e);
                        if (onDataLoaded) {
                            onDataLoaded({});
                        }
                    }
                }
                else {
                    if (onError) {
                        onError({
                            message: "status returned was not 200",
                            endpoint: endpoint,
                            status: xmlHttpInst.status
                        });
                    }
                }
            }
            else {
            }
        }.bind(this);
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.doXmlHttp = function (method, endpoint, onDataLoaded, onError) {
        var xmlHttp = new this.xmlHttpImplClass();
        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);
        xmlHttp.open(method, endpoint, true);
        // Handle the following Firefox bug - https://bugzilla.mozilla.org/show_bug.cgi?id=433859#c4
        // This check can only be performed in a browser environment so make sure navigator is defined first.
        if (typeof (navigator) !== "undefined" && navigator.userAgent.search("Firefox")) {
            xmlHttp.setRequestHeader("Accept", "*/*");
        }
        xmlHttp.send();
    };
    HttpSupport.prototype.doXmlHttpSendJson = function (method, sendData, endpoint, onDataLoaded, onError, additionalHeaders) {
        var xmlHttp = new this.xmlHttpImplClass();
        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);
        xmlHttp.open(method, endpoint, true);
        if (additionalHeaders) {
            for (var key in additionalHeaders) {
                if (additionalHeaders.hasOwnProperty(key)) {
                    xmlHttp.setRequestHeader(key, additionalHeaders[key]);
                }
            }
        }
        if (sendData) {
            xmlHttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            var sendDataStr = JSON.stringify(sendData);
            xmlHttp.send(sendDataStr);
        }
        else {
            xmlHttp.send();
        }
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.postData = function (endpoint, onDataLoaded, onError, sendData, additionalHeaders) {
        this.doXmlHttpSendJson("POST", sendData, endpoint, onDataLoaded, onError, additionalHeaders);
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.getData = function (endpoint, onDataLoaded, onError) {
        this.doXmlHttp("GET", endpoint, onDataLoaded, onError);
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.options = function (endpoint, onDataLoaded, onError) {
        this.doXmlHttp("OPTIONS", endpoint, onDataLoaded, onError);
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.putData = function (endpoint, onDataLoaded, onError, sendData) {
        this.doXmlHttpSendJson("PUT", sendData, endpoint, onDataLoaded, onError);
    };
    /**
     * Make the REST call to get the data
     */
    HttpSupport.prototype.deleteData = function (endpoint, onDataLoaded, onError) {
        this.doXmlHttp("DELETE", endpoint, onDataLoaded, onError);
    };
    return HttpSupport;
}());
exports.HttpSupport = HttpSupport;

//# sourceMappingURL=../../../maps/com/clover/util/HttpSupport.js.map


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ImageUtil = (function () {
    function ImageUtil() {
    }
    /**
     * Appropriate for browsers. Uses a canvas element to base64
     * encode the image.
     *
     * @param {HTMLImageElement} img
     * @param {(response: any) => void} onEncode
     */
    ImageUtil.prototype.getBase64Image = function (img, onEncode) {
        // Create an empty canvas element
        var canvas = document.createElement("canvas");
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        // Copy the image contents to the canvas
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        // Get the data-URL formatted image
        // Firefox supports PNG and JPEG. You could check img.src to
        // guess the original format, but be aware the using "image/jpg"
        // will re-encode the image.
        var dataURL = canvas.toDataURL("image/png");
        onEncode(dataURL.replace(/^data:image\/(png|jpg);base64,/, ""));
    };
    /**
     * Appropriate for browsers.  Uses an image tag and the load event to load an image from a url.
     *
     * @param {string} url
     * @param {(image: any) => void} onLoad
     * @param {(errorMessage: string) => void} onError
     */
    ImageUtil.prototype.loadImageFromURL = function (url, onLoad, onError) {
        var image = new Image();
        var imageLoadHandler = function () {
            if (onLoad) {
                onLoad(image);
            }
            clearEventListeners();
        };
        var imageErrorHandler = function () {
            if (onError) {
                onError("An Image could not be loaded. Please check that the URL (" + url + ") is accessible.");
            }
            clearEventListeners();
        };
        var clearEventListeners = function () {
            image.removeEventListener("load", imageLoadHandler);
            image.removeEventListener("error", imageErrorHandler);
        };
        image.addEventListener("load", imageLoadHandler);
        image.addEventListener("error", imageErrorHandler);
        image.crossOrigin = "Anonymous";
        image.src = url;
    };
    return ImageUtil;
}());
exports.ImageUtil = ImageUtil;

//# sourceMappingURL=../../../maps/com/clover/util/ImageUtil.js.map


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var RemoteMessageParser_1 = __webpack_require__(166);
var CloverDevice_1 = __webpack_require__(378);
var CloverConnector_1 = __webpack_require__(37);
var Logger_1 = __webpack_require__(7);
var Version_1 = __webpack_require__(379);
/**
 * Default Clover Device
 *
 * This is a default implementation of the clover device.
 */
var DefaultCloverDevice = (function (_super) {
    __extends(DefaultCloverDevice, _super);
    function DefaultCloverDevice(configuration) {
        var _this = _super.call(this, configuration.getMessagePackageName(), configuration.getCloverTransport(), configuration.getApplicationId()) || this;
        _this.logger = Logger_1.Logger.create();
        _this.messageParser = RemoteMessageParser_1.RemoteMessageParser.getDefaultInstance();
        _this.remoteMessageVersion = DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;
        _this.msgIdToTask = {};
        _this.imageUtil = configuration.getImageUtil();
        _this.maxMessageSizeInChars = Math.max(1000, configuration.getMaxMessageCharacters());
        _this.transport.subscribe(_this);
        _this.transport.setObjectMessageSender(_this);
        return _this;
    }
    /**
     * Device is there but not yet ready for use
     *
     * @param {CloverTransport} transport - the transport holding the notifications
     */
    DefaultCloverDevice.prototype.onDeviceConnected = function (transport) {
        this.notifyObserversConnected(transport);
    };
    /**
     * Device is there and ready for use
     *
     * @param {CloverTransport} transport - the transport holding the notifications
     */
    DefaultCloverDevice.prototype.onDeviceReady = function (transport) {
        this.doDiscoveryRequest();
    };
    /**
     * Device is not there anymore
     *
     * @param {CloverTransport} transport - the transport holding the notifications
     */
    DefaultCloverDevice.prototype.onDeviceDisconnected = function (transport, message) {
        this.notifyObserversDisconnected(transport, message);
    };
    DefaultCloverDevice.prototype.onDeviceError = function (deviceError) {
        this.notifyObserversDeviceError(deviceError);
    };
    DefaultCloverDevice.prototype.getApplicationId = function () {
        return this.applicationId;
    };
    DefaultCloverDevice.prototype.handleRemoteMessagePING = function (rMessage) {
        this.sendPong(rMessage);
    };
    DefaultCloverDevice.prototype.handleRemoteMessagePONG = function (rMessage) {
        // no-op
    };
    DefaultCloverDevice.prototype.handleRemoteMessageCOMMAND = function (rMessage) {
        this.remoteMessageVersion = Math.max(this.remoteMessageVersion, typeof rMessage["getVersion"] === "function" ? rMessage.getVersion() : DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION);
        var method = sdk.remotemessage.Method[rMessage.getMethod()];
        if (method == null) {
            this.logger.error('Unsupported method type: ' + rMessage.getMethod());
        }
        else {
            var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);
            if (sdkMessage == null) {
                this.logger.error('Error parsing message: ' + JSON.stringify(rMessage));
            }
            switch (method) {
                case sdk.remotemessage.Method.BREAK:
                    break;
                case sdk.remotemessage.Method.CASHBACK_SELECTED:
                    this.notifyObserversCashbackSelected(sdkMessage);
                    break;
                case sdk.remotemessage.Method.ACK:
                    this.notifyObserverAck(sdkMessage);
                    break;
                case sdk.remotemessage.Method.DISCOVERY_RESPONSE:
                    this.logger.debug('Got a Discovery Response');
                    this.notifyObserversReady(this.transport, sdkMessage);
                    break;
                case sdk.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE:
                    this.notifyObserversConfirmPayment(sdkMessage);
                    break;
                case sdk.remotemessage.Method.FINISH_CANCEL:
                    this.notifyObserversFinishCancel(sdkMessage);
                    break;
                case sdk.remotemessage.Method.FINISH_OK:
                    this.notifyObserversFinishOk(sdkMessage);
                    break;
                case sdk.remotemessage.Method.KEY_PRESS:
                    this.notifyObserversKeyPressed(sdkMessage);
                    break;
                case sdk.remotemessage.Method.ORDER_ACTION_RESPONSE:
                    break;
                case sdk.remotemessage.Method.PARTIAL_AUTH:
                    this.notifyObserversPartialAuth(sdkMessage);
                    break;
                case sdk.remotemessage.Method.PAYMENT_VOIDED:
                    // currently this only gets called during a TX, so falls outside our current process flow
                    //PaymentVoidedMessage vpMessage = (PaymentVoidedMessage) Message.fromJsonString(rMessage.payload);
                    //this.notifyObserversPaymentVoided(vpMessage.payment, vpMessage.voidReason, ResultStatus.SUCCESS, null, null);
                    break;
                case sdk.remotemessage.Method.TIP_ADDED:
                    this.notifyObserversTipAdded(sdkMessage);
                    break;
                case sdk.remotemessage.Method.TX_START_RESPONSE:
                    this.notifyObserverTxStart(sdkMessage);
                    break;
                case sdk.remotemessage.Method.TX_STATE:
                    this.notifyObserversTxState(sdkMessage);
                    break;
                case sdk.remotemessage.Method.UI_STATE:
                    this.notifyObserversUiState(sdkMessage);
                    break;
                case sdk.remotemessage.Method.VERIFY_SIGNATURE:
                    this.notifyObserversVerifySignature(sdkMessage);
                    break;
                case sdk.remotemessage.Method.REFUND_RESPONSE:
                    this.notifyObserversPaymentRefundResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.REFUND_REQUEST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.TIP_ADJUST_RESPONSE:
                    this.notifyObserversTipAdjusted(sdkMessage);
                    break;
                case sdk.remotemessage.Method.VAULT_CARD_RESPONSE:
                    this.notifyObserverVaultCardResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE:
                    this.notifyObserversCapturePreAuth(sdkMessage);
                    break;
                case sdk.remotemessage.Method.CLOSEOUT_RESPONSE:
                    this.notifyObserversCloseout(sdkMessage);
                    break;
                case sdk.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE:
                    this.notifyObserversPendingPaymentsResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.CARD_DATA_RESPONSE:
                    this.notifyObserversReadCardData(sdkMessage);
                    break;
                case sdk.remotemessage.Method.ACTIVITY_MESSAGE_FROM_ACTIVITY:
                    this.notifyObserverActivityMessage(sdkMessage);
                    break;
                case sdk.remotemessage.Method.DISCOVERY_REQUEST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.PRINT_IMAGE:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.PRINT_TEXT:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ACTIVITY_RESPONSE:
                    this.notifyObserversActivityResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.REMOTE_ERROR:
                    this.notifyObserversRemoteError(sdkMessage);
                    break;
                case sdk.remotemessage.Method.RETRIEVE_DEVICE_STATUS_RESPONSE:
                    this.notifyObserversRetrieveDeviceStatusResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.RESET_DEVICE_RESPONSE:
                    this.notifyObserversResetDeviceResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_RESPONSE:
                    this.notifyObserversRetrievePaymentResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.GET_PRINTERS_RESPONSE:
                    this.notifyObserversRetrievePrintersResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.PRINT_JOB_STATUS_RESPONSE:
                    this.notifyObserversPrintJobStatusResponse(sdkMessage);
                    break;
                case sdk.remotemessage.Method.SHOW_ORDER_SCREEN:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.SHOW_THANK_YOU_SCREEN:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.SHOW_WELCOME_SCREEN:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.SIGNATURE_VERIFIED:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.TERMINAL_MESSAGE:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.TX_START:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.VOID_PAYMENT:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.CAPTURE_PREAUTH:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.LAST_MSG_REQUEST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.LAST_MSG_RESPONSE:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.TIP_ADJUST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.OPEN_CASH_DRAWER:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.VAULT_CARD:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.CLOSEOUT_REQUEST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.ACTIVITY_REQUEST:
                    //Outbound no-op
                    break;
                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_REQUEST:
                    //Outbound no-op
                    break;
                default:
                    this.logger.error('COMMAND not supported with method: ' + rMessage.getMethod());
                    break;
            }
        }
    };
    DefaultCloverDevice.prototype.handleRemoteMessageQUERY = function (rMessage) {
        // no-op
    };
    DefaultCloverDevice.prototype.handleRemoteMessageEVENT = function (rMessage) {
        // no-op
    };
    DefaultCloverDevice.prototype.handleRemoteMessage = function (rMessage) {
        try {
            var msgType = rMessage.getType();
            if (msgType == sdk.remotemessage.RemoteMessageType.PING) {
                this.handleRemoteMessagePING(rMessage);
            }
            else if (msgType == sdk.remotemessage.RemoteMessageType.PONG) {
                this.handleRemoteMessagePONG(rMessage);
            }
            else if (msgType == sdk.remotemessage.RemoteMessageType.COMMAND) {
                this.handleRemoteMessageCOMMAND(rMessage);
            }
            else if (msgType == sdk.remotemessage.RemoteMessageType.QUERY) {
                this.handleRemoteMessageQUERY(rMessage);
            }
            else if (msgType == sdk.remotemessage.RemoteMessageType.EVENT) {
                this.handleRemoteMessageEVENT(rMessage);
            }
            else {
                this.logger.error('Unsupported message type: ' + rMessage.getType().toString());
            }
        }
        catch (eM) {
            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);
        }
    };
    /**
     * Called when a raw message is received from the device
     *
     * @param {string} message - the raw message from the device
     */
    DefaultCloverDevice.prototype.onMessage = function (message) {
        this.logger.debug('onMessage: ' + message);
        try {
            // Parse the message
            var rMessage = this.messageParser.parseToRemoteMessage(message);
            this.handleRemoteMessage(rMessage);
        }
        catch (e) {
            this.logger.error(e);
        }
    };
    /**
     * Send a PONG response
     *
     * @param pingMessage
     */
    DefaultCloverDevice.prototype.sendPong = function (pingMessage) {
        var remoteMessage = new sdk.remotemessage.RemoteMessage();
        remoteMessage.setType(sdk.remotemessage.RemoteMessageType.PONG);
        remoteMessage.setPackageName(this.packageName);
        remoteMessage.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);
        remoteMessage.setRemoteApplicationID(this.applicationId);
        this.logger.debug('Sending PONG...');
        this.sendRemoteMessage(remoteMessage);
    };
    /**
     * Notify the observers that the device is connected
     *
     * @param transport
     */
    DefaultCloverDevice.prototype.notifyObserversConnected = function (transport) {
        var _this = this;
        this.deviceObservers.forEach(function (obs) {
            obs.onDeviceConnected(_this);
        });
    };
    /**
     * Notify the observers that the device has disconnected
     *
     * @param transport
     */
    DefaultCloverDevice.prototype.notifyObserversDisconnected = function (transport, message) {
        var _this = this;
        this.deviceObservers.forEach(function (obs) {
            obs.onDeviceDisconnected(_this, message);
        });
    };
    /**
     * Notify the observers that the transport failed.
     *
     * @param transport
     */
    DefaultCloverDevice.prototype.notifyObserversDeviceError = function (errorEvent) {
        this.deviceObservers.forEach(function (obs) {
            obs.onDeviceError(errorEvent);
        });
    };
    /**
     * Notify the observers that the device is ready
     *
     * @param transport
     * @param drm
     */
    DefaultCloverDevice.prototype.notifyObserversReady = function (transport, drm) {
        var _this = this;
        this.deviceObservers.forEach(function (obs) {
            obs.onDeviceReady(_this, drm);
        });
    };
    DefaultCloverDevice.prototype.notifyObserverAck = function (ackMessage) {
        var ackTask = this.msgIdToTask[ackMessage.getSourceMessageId()];
        if (ackTask) {
            delete this.msgIdToTask[ackMessage.getSourceMessageId()];
            ackTask.call(null);
        }
        // go ahead and notify listeners of the ACK
        this.deviceObservers.forEach(function (obs) {
            obs.onMessageAck(ackMessage.getSourceMessageId());
        });
    };
    DefaultCloverDevice.prototype.notifyObserverActivityMessage = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onMessageFromActivity(message.getAction(), message.getPayload());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversActivityResponse = function (arm) {
        this.deviceObservers.forEach(function (obs) {
            var status = arm.getResultCode() == -1 ?
                sdk.remotemessage.ResultStatus.SUCCESS :
                sdk.remotemessage.ResultStatus.CANCEL;
            obs.onActivityResponse(status, arm.getPayload(), arm.getFailReason(), arm.getAction());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversReadCardData = function (rcdrm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onReadCardResponse(rcdrm.getStatus(), rcdrm.getReason(), rcdrm.getCardData());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversRetrieveDeviceStatusResponse = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onDeviceStatusResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getState(), message.getData());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversRetrievePaymentResponse = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onRetrievePaymentResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getExternalPaymentId(), message.getQueryStatus(), message.getPayment());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversRetrievePrintersResponse = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onRetrievePrintersResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getPrinters());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversPrintJobStatusResponse = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onPrintJobStatusResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getExternalPrintJobId(), message.getStatus());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversResetDeviceResponse = function (message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onResetDeviceResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getState());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversRemoteError = function (message) {
        this.deviceObservers.forEach(function (obs) {
            // todo:  Add remote error
            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);
            deviceErrorEvent.setMessage(JSON.stringify(message));
            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);
            obs.onDeviceError(deviceErrorEvent);
        });
    };
    DefaultCloverDevice.prototype.notifyObserversPaymentRefundResponse = function (rrm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onPaymentRefundResponse(rrm.getOrderId(), rrm.getPaymentId(), rrm.getRefund(), rrm.getCode(), rrm.getReason(), rrm.getMessage());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversKeyPressed = function (keyPress) {
        this.deviceObservers.forEach(function (obs) {
            obs.onKeyPressed(keyPress.getKeyPress());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversCashbackSelected = function (cbSelected) {
        this.deviceObservers.forEach(function (obs) {
            obs.onCashbackSelected(cbSelected.getCashbackAmount());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversTipAdded = function (tipAdded) {
        this.deviceObservers.forEach(function (obs) {
            obs.onTipAdded(tipAdded.getTipAmount());
        });
    };
    DefaultCloverDevice.prototype.notifyObserverTxStart = function (txsrm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onTxStartResponse(txsrm.getResult(), txsrm.getExternalPaymentId(), txsrm.getRequestInfo());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversTipAdjusted = function (tarm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onAuthTipAdjusted(tarm.getPaymentId(), tarm.getAmount(), tarm.getSuccess);
        });
    };
    DefaultCloverDevice.prototype.notifyObserversPartialAuth = function (partialAuth) {
        this.deviceObservers.forEach(function (obs) {
            obs.onPartialAuth(partialAuth.getPartialAuthAmount());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversPaymentVoided = function (payment, voidReason, result, reason, message) {
        this.deviceObservers.forEach(function (obs) {
            obs.onPaymentVoided(payment, voidReason, result, reason, message);
        });
    };
    DefaultCloverDevice.prototype.notifyObserversVerifySignature = function (verifySigMsg) {
        this.deviceObservers.forEach(function (obs) {
            obs.onVerifySignature(verifySigMsg.getPayment(), verifySigMsg.getSignature());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversConfirmPayment = function (confirmPaymentMessage) {
        this.deviceObservers.forEach(function (obs) {
            obs.onConfirmPayment(confirmPaymentMessage.getPayment(), confirmPaymentMessage.getChallenges());
        });
    };
    DefaultCloverDevice.prototype.notifyObserverVaultCardResponse = function (vaultCardResponseMessage) {
        this.deviceObservers.forEach(function (obs) {
            obs.onVaultCardResponse(vaultCardResponseMessage.getCard(), vaultCardResponseMessage.getStatus().toString(), vaultCardResponseMessage.getReason());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversUiState = function (uiStateMsg) {
        this.deviceObservers.forEach(function (obs) {
            obs.onUiState(uiStateMsg.getUiState(), uiStateMsg.getUiText(), uiStateMsg.getUiDirection(), uiStateMsg.getInputOptions());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversCapturePreAuth = function (cparm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onCapturePreAuth(cparm.getStatus(), cparm.getReason(), cparm.getPaymentId(), cparm.getAmount(), cparm.getTipAmount());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversCloseout = function (crm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onCloseoutResponse(crm.getStatus(), crm.getReason(), crm.getBatch());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversPendingPaymentsResponse = function (rpprm) {
        this.deviceObservers.forEach(function (obs) {
            obs.onPendingPaymentsResponse(rpprm.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS, rpprm.getPendingPaymentEntries());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversTxState = function (txStateMsg) {
        this.deviceObservers.forEach(function (obs) {
            obs.onTxState(txStateMsg.getTxState());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversFinishCancel = function (msg) {
        this.deviceObservers.forEach(function (obs) {
            obs.onFinishCancel(msg.getRequestInfo());
        });
    };
    DefaultCloverDevice.prototype.notifyObserversFinishOk = function (msg) {
        this.deviceObservers.forEach(function (obs) {
            if (msg.getPayment()) {
                obs.onFinishOk(msg.getPayment(), msg.getSignature(), msg.getRequestInfo());
            }
            else if (msg.getCredit()) {
                obs.onFinishOk(msg.getCredit());
            }
            else if (msg.getRefund()) {
                obs.onFinishOk(msg.getRefund());
            }
        });
    };
    /**
     * Show Payment Receipt Screen
     *
     * @param {string} orderId
     * @param {string} paymentId
     */
    DefaultCloverDevice.prototype.doShowPaymentReceiptScreen = function (orderId, paymentId) {
        var message = new sdk.remotemessage.ShowPaymentReceiptOptionsMessage();
        message.setOrderId(orderId);
        message.setPaymentId(paymentId);
        message.setVersion(2);
        this.sendObjectMessage(message);
    };
    /**
     * Key Press
     *
     * @param {sdk.remotemessage.KeyPress} keyPress
     */
    DefaultCloverDevice.prototype.doKeyPress = function (keyPress) {
        var message = new sdk.remotemessage.KeyPressMessage();
        message.setKeyPress(keyPress);
        this.sendObjectMessage(message);
    };
    /**
     * Show Thank You Screen
     */
    DefaultCloverDevice.prototype.doShowThankYouScreen = function () {
        var message = new sdk.remotemessage.ThankYouMessage();
        this.sendObjectMessage(message);
    };
    /**
     * Show Welcome Screen
     */
    DefaultCloverDevice.prototype.doShowWelcomeScreen = function () {
        var message = new sdk.remotemessage.WelcomeMessage();
        this.sendObjectMessage(message);
    };
    /**
     * Signature Verified
     *
     * @param {sdk.payments.Payment} payment
     * @param {boolean} verified
     */
    DefaultCloverDevice.prototype.doSignatureVerified = function (payment, verified) {
        var message = new sdk.remotemessage.SignatureVerifiedMessage();
        message.setPayment(payment);
        message.setVerified(verified);
        this.sendObjectMessage(message);
    };
    /**
     * Retrieve Pending Payments
     */
    DefaultCloverDevice.prototype.doRetrievePendingPayments = function () {
        var message = new sdk.remotemessage.RetrievePendingPaymentsMessage();
        this.sendObjectMessage(message);
    };
    /**
     * Terminal Message
     *
     * @param {string} text
     */
    DefaultCloverDevice.prototype.doTerminalMessage = function (text) {
        var message = new sdk.remotemessage.TerminalMessage();
        message.setText(text);
        this.sendObjectMessage(message);
    };
    /**
     * Open Cash Drawer
     *
     * @param {string} reason
     * @param {string} deviceId (optional)
     */
    DefaultCloverDevice.prototype.doOpenCashDrawer = function (reason, deviceId) {
        var message = new sdk.remotemessage.OpenCashDrawerMessage();
        message.setReason(reason);
        if (deviceId) {
            var ptr = new sdk.printer.Printer();
            ptr.setId(deviceId);
            message.setPrinter(ptr);
        }
        this.sendObjectMessage(message);
    };
    /**
     * Closeout
     *
     * @param {boolean} allowOpenTabs
     * @param {string} batchId
     */
    DefaultCloverDevice.prototype.doCloseout = function (allowOpenTabs, batchId) {
        var message = new sdk.remotemessage.CloseoutRequestMessage();
        message.setAllowOpenTabs(allowOpenTabs);
        message.setBatchId(batchId);
        this.sendObjectMessage(message);
    };
    /**
     * Transaction Start
     *
     * @param {sdk.remotemessage.PayIntent} payIntent
     * @param {sdk.remotemessage.Order} order
     * @param {string} requestInfo - request type.
     */
    DefaultCloverDevice.prototype.doTxStart = function (payIntent, order, requestInfo) {
        var message = new sdk.remotemessage.TxStartRequestMessage();
        message.setPayIntent(payIntent);
        message.setOrder(order);
        message.setRequestInfo(requestInfo);
        message.setVersion(2);
        this.sendObjectMessage_opt_version(message);
    };
    /**
     * Tip Adjust Auth
     *
     * @param {string} orderId
     * @param {string} paymentId
     * @param {number} amount
     */
    DefaultCloverDevice.prototype.doTipAdjustAuth = function (orderId, paymentId, amount) {
        var message = new sdk.remotemessage.TipAdjustMessage();
        message.setOrderId(orderId);
        message.setPaymentId(paymentId);
        message.setTipAmount(amount);
        this.sendObjectMessage(message);
    };
    /**
     * Read Cart Data
     *
     * @param {PayIntent} payIntent
     */
    DefaultCloverDevice.prototype.doReadCardData = function (payIntent) {
        var message = new sdk.remotemessage.CardDataRequestMessage();
        message.setPayIntent(payIntent);
        this.sendObjectMessage(message);
    };
    /**
     * Send a message to a running custom activity
     *
     * @param {string} actionId - the id used when the custom action was started
     * @param {string} payload - the message content, unrestricted format
     */
    DefaultCloverDevice.prototype.doSendMessageToActivity = function (actionId, payload) {
        var message = new sdk.remotemessage.ActivityMessageToActivity();
        message.setAction(actionId);
        message.setPayload(payload);
        this.sendObjectMessage(message);
    };
    /**
     * Print Text
     *
     * @param {Array<string>} textLines
     */
    DefaultCloverDevice.prototype.doPrintText = function (textLines, printRequestId, printDeviceId) {
        var message = new sdk.remotemessage.TextPrintMessage();
        message.setTextLines(textLines);
        if (printRequestId) {
            message.setExternalPrintJobId(printRequestId);
        }
        if (printDeviceId) {
            var ptr = new sdk.printer.Printer();
            ptr.setId(printDeviceId);
            message.setPrinter(ptr);
        }
        this.sendObjectMessage(message);
    };
    /**
     * Print Image (Bitmap)
     *
     * @param {any} bitmap
     */
    DefaultCloverDevice.prototype.doPrintImageObject = function (bitmap, printRequestId, printDeviceId) {
        var _this = this;
        var message = new sdk.remotemessage.ImagePrintMessage();
        // bitmap - HTMLImageElement
        this.imageUtil.getBase64Image(bitmap, function (imageString) {
            message.setPng(imageString);
            if (printRequestId) {
                message.setExternalPrintJobId(printRequestId);
            }
            if (printDeviceId) {
                var ptr = new sdk.printer.Printer();
                ptr.setId(printDeviceId);
                message.setPrinter(ptr);
            }
            if (_this.isFragmentationSupported(_this.remoteMessageVersion)) {
                // We need to be putting this in the attachment instead of the payload (for the remoteMessage)
                var base64Png = message.getPng();
                message.setPng(null);
                _this.sendObjectMessage_opt_version(message, _this.remoteMessageVersion, base64Png, DefaultCloverDevice.BASE64);
            }
            else {
                _this.sendObjectMessage(message);
            }
        });
    };
    /**
     * Printing images from a url from the device is problematic.
     * See - https://jira.dev.clover.com/browse/SEMI-1352
     * and - https://jira.dev.clover.com/browse/SEMI-1377
     *
     * Instead of relying on the device, we can retrieve the image from the URL
     * and call doPrintImageObject instead of doPrintImageUrl. The doPrintImageObject
     * method is more robust (can handle large images via chunking, etc.).
     *
     * @param {string} url
     */
    DefaultCloverDevice.prototype.doPrintImageUrl = function (url, printRequestId, printDeviceId) {
        var _this = this;
        this.imageUtil.loadImageFromURL(url, function (image) {
            _this.doPrintImageObject(image, printRequestId, printDeviceId);
        }, function (errorMessage) {
            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);
            deviceErrorEvent.setMessage(errorMessage);
            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);
            _this.notifyObserversDeviceError(deviceErrorEvent);
        });
    };
    DefaultCloverDevice.prototype.doStartActivity = function (action, payload, nonBlocking) {
        var request = new sdk.remotemessage.ActivityRequest();
        request.setAction(action);
        request.setPayload(payload);
        request.setNonBlocking(nonBlocking);
        request.setForceLaunch(false);
        this.sendObjectMessage(request);
    };
    /**
     * Void Payment
     *
     * @param {sdk.payments.Payment} payment
     * @param {sdk.order.VoidReason} reason
     */
    DefaultCloverDevice.prototype.doVoidPayment = function (payment, reason) {
        var _this = this;
        var message = new sdk.remotemessage.VoidPaymentMessage();
        message.setPayment(payment);
        message.setVoidReason(reason);
        var remoteMessage = this.buildRemoteMessageToSend(message);
        var msgId = remoteMessage.getId();
        if (!this.supportsAcks()) {
            this.sendRemoteMessage(remoteMessage);
            this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);
        }
        else {
            // we will send back response after we get an ack
            this.addTaskForAck(msgId, function () {
                _this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);
            });
            //this.msgIdToTask[msgId] = () => {
            //    this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);
            //};
            this.sendRemoteMessage(remoteMessage);
        }
    };
    DefaultCloverDevice.prototype.addTaskForAck = function (msgId, task) {
        this.msgIdToTask[msgId] = task;
    };
    /**
     * Payment Refund
     *
     * @param {string} orderId
     * @param {string} paymentId
     * @param {number} amount
     * @param {boolean} fullRefund
     */
    DefaultCloverDevice.prototype.doPaymentRefund = function (orderId, paymentId, amount, fullRefund) {
        var message = new sdk.remotemessage.RefundRequestMessage();
        message.setOrderId(orderId);
        message.setPaymentId(paymentId);
        message.setAmount(amount);
        message.setFullRefund(fullRefund);
        this.sendObjectMessage_opt_version(message, 2);
    };
    /**
     * Vault Card
     *
     * @param {number} cardEntryMethods
     */
    DefaultCloverDevice.prototype.doVaultCard = function (cardEntryMethods) {
        var message = new sdk.remotemessage.VaultCardMessage();
        message.setCardEntryMethods(cardEntryMethods);
        this.sendObjectMessage(message);
    };
    /**
     * Capture Auth
     *
     * @param {string} paymentId
     * @param {number} amount
     * @param {number} tipAmount
     */
    DefaultCloverDevice.prototype.doCaptureAuth = function (paymentId, amount, tipAmount) {
        var message = new sdk.remotemessage.CapturePreAuthMessage();
        message.setPaymentId(paymentId);
        message.setAmount(amount);
        message.setTipAmount(tipAmount);
        this.sendObjectMessage(message);
    };
    /**
     * Accept Payment
     *
     * @param {Payment} payment
     */
    DefaultCloverDevice.prototype.doAcceptPayment = function (payment) {
        var message = new sdk.remotemessage.PaymentConfirmedMessage();
        message.setPayment(payment);
        this.sendObjectMessage(message);
    };
    /**
     * Reject Payment
     *
     * @param {Payment} payment
     * @param {Challenge} challenge
     */
    DefaultCloverDevice.prototype.doRejectPayment = function (payment, challenge) {
        var message = new sdk.remotemessage.PaymentRejectedMessage();
        message.setPayment(payment);
        message.setReason(challenge.getReason());
        this.sendObjectMessage(message);
    };
    /**
     * Discovery request
     */
    DefaultCloverDevice.prototype.doDiscoveryRequest = function () {
        var drm = new sdk.remotemessage.DiscoveryRequestMessage();
        drm.setSupportsOrderModification(false);
        this.sendObjectMessage(drm);
    };
    /**
     * Order Update
     *
     * @param {DisplayOrder} order
     * @param {any} orderOperation
     */
    DefaultCloverDevice.prototype.doOrderUpdate = function (order, orderOperation) {
        var message = new sdk.remotemessage.OrderUpdateMessage();
        message.setOrder(order);
        if (orderOperation) {
            if (orderOperation instanceof sdk.order.operation.DiscountsAddedOperation) {
                message.setDiscountsAddedOperation(orderOperation);
            }
            else if (orderOperation instanceof sdk.order.operation.DiscountsDeletedOperation) {
                message.setDiscountsDeletedOperation(orderOperation);
            }
            else if (orderOperation instanceof sdk.order.operation.LineItemsAddedOperation) {
                message.setLineItemsAddedOperation(orderOperation);
            }
            else if (orderOperation instanceof sdk.order.operation.LineItemsDeletedOperation) {
                message.setLineItemsDeletedOperation(orderOperation);
            }
            else if (orderOperation instanceof sdk.order.operation.OrderDeletedOperation) {
                message.setOrderDeletedOperation(orderOperation);
            }
        }
        this.sendObjectMessage(message);
    };
    /**
     * Reset Device
     */
    DefaultCloverDevice.prototype.doResetDevice = function () {
        var message = new sdk.remotemessage.BreakMessage();
        this.sendObjectMessage(message);
    };
    DefaultCloverDevice.prototype.doRetrieveDeviceStatus = function (request) {
        var message = new sdk.remotemessage.RetrieveDeviceStatusRequestMessage();
        message.setSendLastMessage(request.getSendLastMessage());
        this.sendObjectMessage(message);
    };
    DefaultCloverDevice.prototype.doRetrievePayment = function (externalPaymentId) {
        var message = new sdk.remotemessage.RetrievePaymentRequestMessage();
        message.setExternalPaymentId(externalPaymentId);
        this.sendObjectMessage(message);
    };
    DefaultCloverDevice.prototype.doRetrievePrinters = function (category) {
        var message = new sdk.remotemessage.GetPrintersRequestMessage();
        if (category) {
            message.setCategory(category);
        }
        this.sendObjectMessage(message);
    };
    DefaultCloverDevice.prototype.doRetrievePrintJobStatus = function (printRequestId) {
        var message = new sdk.remotemessage.PrintJobStatusRequestMessage();
        message.setExternalPrintJobId(printRequestId);
        this.sendObjectMessage(message);
    };
    /**
     * Dispose
     */
    DefaultCloverDevice.prototype.dispose = function () {
        this.deviceObservers.splice(0, this.deviceObservers.length);
        if (this.transport) {
            this.transport.dispose();
            this.transport = null;
        }
    };
    /**
     * Send the message to the device using the transport
     *
     * @param {sdk.remotemessage.Message} message
     */
    DefaultCloverDevice.prototype.sendObjectMessage = function (remoteMessage) {
        return this.sendObjectMessage_opt_version(remoteMessage);
    };
    DefaultCloverDevice.prototype.sendObjectMessage_opt_version = function (remoteMessage, remoteMessageVersion, attachment, attachmentEncoding) {
        return this.buildRemoteMessages(remoteMessage, remoteMessageVersion, attachment, attachmentEncoding); // this now sends the messages and returns the ID
    };
    DefaultCloverDevice.prototype.buildBaseRemoteMessage = function (remoteMessage, remoteMessageVersion) {
        remoteMessageVersion = this.getRemoteMessageVersion(remoteMessage, remoteMessageVersion);
        // Make sure the message is not null
        if (remoteMessage == null) {
            this.logger.debug('Message is null');
            return null;
        }
        // Check the message method
        this.logger.info(remoteMessage.toString());
        if (remoteMessage.getMethod() == null) {
            this.logger.error('Invalid Message', new Error('Invalid Message: ' + remoteMessage.toString()));
            return null;
        }
        // Check the application id
        if (this.applicationId == null) {
            this.logger.error('Invalid ApplicationID: ' + this.applicationId);
            throw new Error('Invalid applicationId');
        }
        var messageId = (++DefaultCloverDevice.id) + '';
        var remoteMessageToReturn = new sdk.remotemessage.RemoteMessage();
        remoteMessageToReturn.setId(messageId);
        remoteMessageToReturn.setType(sdk.remotemessage.RemoteMessageType.COMMAND);
        remoteMessageToReturn.setPackageName(this.packageName);
        remoteMessageToReturn.setMethod(remoteMessage.getMethod().toString());
        remoteMessageToReturn.setVersion(remoteMessageVersion);
        remoteMessageToReturn.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);
        remoteMessageToReturn.setRemoteApplicationID(this.applicationId);
        return remoteMessageToReturn;
    };
    DefaultCloverDevice.prototype.getRemoteMessageVersion = function (remoteMessage, remoteMessageVersion) {
        return remoteMessageVersion || remoteMessage.getVersion() || DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;
    };
    /**
     * Special serialization handling
     * The top level elements should not have the "elements" wrapper on collections (arrays).
     * sdk.remotemessage.Message instances are the only ones this needs to happen for.  This
     * is the result of the manner in which the serialization/deserialization happens in the
     * Android code.  The top level objects are not (de)serialized by a
     * com.clover.sdk.GenericClient#extractListOther
     * (in the Clover common repo).  The GenericClient is the tool that adds the elements
     * wrapper.  The top level objects are (de)serialized by themselves
     * com.clover.remote.message.Message#fromJsonString
     */
    DefaultCloverDevice.prototype.addSuppressElementsWrapper = function (message) {
        for (var fieldKey in message) {
            var metaInfo = message.getMetaInfo(fieldKey);
            if (metaInfo && (metaInfo.type == Array)) {
                message[fieldKey].suppressElementsWrapper = true;
            }
        }
        return message;
    };
    DefaultCloverDevice.prototype.buildRemoteMessageToSend = function (message, remoteMessageVersion) {
        var remoteMessage = this.buildBaseRemoteMessage(message, remoteMessageVersion);
        message = this.addSuppressElementsWrapper(message);
        remoteMessage.setPayload(JSON.stringify(message, DefaultCloverDevice.stringifyClover));
        return remoteMessage;
    };
    DefaultCloverDevice.prototype.buildRemoteMessages = function (message, remoteMessageVersion, attachment, attachmentEncoding) {
        var remoteMessage = this.buildBaseRemoteMessage(message, remoteMessageVersion);
        message = this.addSuppressElementsWrapper(message);
        if (attachmentEncoding) {
            remoteMessage.setAttachmentEncoding(attachmentEncoding);
        }
        var messagePayload = JSON.stringify(message, DefaultCloverDevice.stringifyClover);
        if (this.isFragmentationSupported(remoteMessageVersion)) {
            // fragmenting is possible
            var payloadTooLarge = (messagePayload ? messagePayload.length : 0) > this.maxMessageSizeInChars;
            if (payloadTooLarge || attachment) {
                if (attachment && attachment.length > CloverConnector_1.CloverConnector.MAX_PAYLOAD_SIZE) {
                    this.logger.error('Error sending message - payload size is greater than the maximum allowed.');
                    return null;
                }
                var fragmentIndex = 0;
                // fragmenting loop for payload
                while (messagePayload.length > 0) {
                    remoteMessage.setLastFragment(false);
                    if (messagePayload.length <= this.maxMessageSizeInChars) {
                        remoteMessage.setPayload(messagePayload);
                        messagePayload = "";
                        // If the attachment is null at this point, then this is the last fragment
                        remoteMessage.setLastFragment(attachment == null);
                    }
                    else {
                        remoteMessage.setPayload(messagePayload.substr(0, this.maxMessageSizeInChars));
                        messagePayload = messagePayload.substr(this.maxMessageSizeInChars);
                    }
                    remoteMessage.setFragmentIndex(fragmentIndex++);
                    this.sendRemoteMessage(remoteMessage);
                } //end fragment payload loop
                remoteMessage.setPayload(null);
                if (attachment) {
                    //fragmenting loop for attachment
                    if (attachmentEncoding == DefaultCloverDevice.BASE64) {
                        remoteMessage.setAttachmentEncoding(DefaultCloverDevice.BASE64_ATTACHMENT);
                        while (attachment.length > 0) {
                            remoteMessage.setLastFragment(false);
                            if (attachment.length <= this.maxMessageSizeInChars) {
                                remoteMessage.setAttachment(attachment);
                                attachment = "";
                                remoteMessage.setLastFragment(true);
                            }
                            else {
                                remoteMessage.setAttachment(attachment.substr(0, this.maxMessageSizeInChars));
                                attachment = attachment.substr(this.maxMessageSizeInChars);
                            }
                            remoteMessage.setFragmentIndex(fragmentIndex++);
                            this.sendRemoteMessage(remoteMessage);
                        } //end fragment attachment loop
                    }
                    else {
                        // We got an attachment, but no encoding, complain.
                        this.logger.error('Attachment on message, but no encoding specified.  No idea how to send it.');
                        // TODO:  Probably a good idea to throw here, but  then we need to handle that in the top level.  Leave for later.
                    }
                }
            }
            else {
                remoteMessage.setPayload(messagePayload);
                if (attachment) {
                    remoteMessage.setAttachment(attachment);
                }
                this.sendRemoteMessage(remoteMessage);
            }
        }
        else {
            // fragmenting is not possible, just send as is
            remoteMessage.setPayload(messagePayload);
            this.sendRemoteMessage(remoteMessage);
        }
        return remoteMessage.getId();
    };
    DefaultCloverDevice.stringifyClover = function (key, value) {
        // If the element is an array, and it does NOT have the suppressElementsWrapper property,
        // and the key is NOT "elements", then add the elements wrapper object
        if (Array.isArray(value) &&
            !value.hasOwnProperty("suppressElementsWrapper") &&
            (key != "elements")) {
            //converts array into the format that clover devices expect
            //from) foo : []
            //to) foo : {elements : []}
            return { elements: value };
        }
        return value;
    };
    DefaultCloverDevice.prototype.sendRemoteMessage = function (remoteMessage) {
        var message = JSON.stringify(remoteMessage);
        if (this.transport) {
            this.logger.debug("Sending: " + message);
            this.transport.sendMessage(message);
        }
        else {
            this.logger.error("Cannot send message, transport is null: " + message);
        }
    };
    /**
     * If the remote message version is 2, fragmentation is supported.
     *
     * @param {number} version
     * @returns {boolean}
     */
    DefaultCloverDevice.prototype.isFragmentationSupported = function (remoteMessageVersion) {
        return remoteMessageVersion > 1;
    };
    // Remote message version and message version are not the same.  Remote message version is used for high-level
    // feature detection - e.g. is message fragmentation supported or not?
    DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION = 1;
    DefaultCloverDevice.REMOTE_SDK = Version_1.Version.CLOVER_CLOUD_SDK + ":" + Version_1.Version.CLOVER_CLOUD_SDK_VERSION;
    DefaultCloverDevice.BASE64 = "BASE64";
    DefaultCloverDevice.BASE64_ATTACHMENT = DefaultCloverDevice.BASE64 + ".ATTACHMENT";
    DefaultCloverDevice.id = 0;
    return DefaultCloverDevice;
}(CloverDevice_1.CloverDevice));
exports.DefaultCloverDevice = DefaultCloverDevice;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/DefaultCloverDevice.js.map


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var MethodToMessage_1 = __webpack_require__(376);
var JSONToCustomObject_1 = __webpack_require__(377);
/**
 * Parses remote messages from raw json, and extracts messages from the
 * remote message payload object.
 *
 */
var RemoteMessageParser = (function (_super) {
    __extends(RemoteMessageParser, _super);
    function RemoteMessageParser() {
        return _super.call(this) || this;
    }
    RemoteMessageParser.getDefaultInstance = function () {
        return RemoteMessageParser.INSTANCE;
    };
    /**
     *
     * @param remoteMessageObj - the sdk.remotemessage.RemoteMessage that has a payload that will be parsed to a
     * sdk.remotemessage.Message
     * @returns {sdk.remotemessage.Message}
     */
    RemoteMessageParser.prototype.parseMessageFromRemoteMessageObj = function (remoteMessageObj, attachUnknownProperties) {
        if (attachUnknownProperties === void 0) { attachUnknownProperties = false; }
        var responseMessageType = MethodToMessage_1.MethodToMessage.getType(remoteMessageObj.getMethod());
        if (responseMessageType) {
            var messageToPopulate = new responseMessageType;
            if (remoteMessageObj.getPayload()) {
                // Older versions of the remote-pay lib did not return a body here
                var payload = JSON.parse(remoteMessageObj.getPayload());
                var copied = this.transfertoObject(payload, messageToPopulate, attachUnknownProperties);
                if (copied) {
                    return copied;
                }
            }
        }
        return messageToPopulate;
    };
    /**
     * @param remoteMessage - a json object that is a serialized RemoteMessage
     * @returns {sdk.remotemessage.RemoteMessage} - object populated from the input json object.
     */
    RemoteMessageParser.prototype.parseToRemoteMessage = function (remoteMessage) {
        var remoteMessageObj = new sdk.remotemessage.RemoteMessage();
        this.transfertoObject(remoteMessage, remoteMessageObj, false);
        return remoteMessageObj;
    };
    // packageName:string;
    RemoteMessageParser.INSTANCE = new RemoteMessageParser();
    return RemoteMessageParser;
}(JSONToCustomObject_1.JSONToCustomObject));
exports.RemoteMessageParser = RemoteMessageParser;

//# sourceMappingURL=../../../maps/com/clover/json/RemoteMessageParser.js.map


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Clover Transport
 *
 * The clover transport facilitates notification distribution
 * from the device to a list of observers.
 */
var CloverTransport = (function () {
    function CloverTransport() {
        // List of observers to notify
        this.observers = [];
        // Flag to determine if the device is ready
        this.ready = false;
    }
    /**
     * Notify observers that the device is connected
     */
    CloverTransport.prototype.notifyDeviceConnected = function () {
        var _this = this;
        this.observers.forEach(function (obs) {
            obs.onDeviceConnected(_this);
        });
    };
    /**
     * Notify observers that the device is ready
     */
    CloverTransport.prototype.notifyDeviceReady = function () {
        var _this = this;
        this.ready = true;
        this.observers.forEach(function (obs) {
            obs.onDeviceReady(_this);
        });
    };
    /**
     * Notify observers that the device has disconnected
     */
    CloverTransport.prototype.notifyDeviceDisconnected = function () {
        var _this = this;
        this.ready = false;
        this.observers.forEach(function (obs) {
            obs.onDeviceDisconnected(_this);
        });
    };
    /**
     * Should be called by subclasses (_super.onMessage) when a message is received
     * in order to forward to all observers
     *
     * @param {string} message - The message we received
     */
    CloverTransport.prototype.onMessage = function (message) {
        this.observers.forEach(function (obs) {
            obs.onMessage(message);
        });
    };
    /**
     * Add new observer to receive notifications from the device
     *
     * @param {CloverTransportObserver} observer - the observer to notify
     */
    CloverTransport.prototype.subscribe = function (observer) {
        var _this = this;
        if (this.ready) {
            this.observers.forEach(function (obs) {
                obs.onDeviceReady(_this);
            });
        }
        this.observers.push(observer);
    };
    /**
     * Remove an observer from the list of observers
     *
     * @param {CloverTransportObserver} observer - the observer to remove
     */
    CloverTransport.prototype.unsubscribe = function (observer) {
        var indexOfObserver = this.observers.indexOf(observer);
        if (indexOfObserver !== -1) {
            this.observers.splice(indexOfObserver, 1);
        }
    };
    /**
     * Clear the observers list
     */
    CloverTransport.prototype.clearListeners = function () {
        this.observers.splice(0, this.observers.length);
    };
    CloverTransport.prototype.setObjectMessageSender = function (objectMessageSender) {
        this.objectMessageSender = objectMessageSender;
    };
    return CloverTransport;
}());
exports.CloverTransport = CloverTransport;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/transport/CloverTransport.js.map


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketCloudCloverTransport_1 = __webpack_require__(383);
var WebsocketCloudCloverDevice_1 = __webpack_require__(385);
var WebSocketCloverDeviceConfiguration_1 = __webpack_require__(75);
/**
 * Configuration used to create a connection to a device via the Clover cloud.
 */
var WebSocketCloudCloverDeviceConfiguration = (function (_super) {
    __extends(WebSocketCloudCloverDeviceConfiguration, _super);
    /**
     *
     * @param {string} applicationId - the applicationId that uniquely identifies the POS.
     *    e.g. com.company.MyPOS:2.3.1 for the first connection
     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the
     *  CloverWebSocketInterface that will be used when connecting.  For Browser implementations, this can be
     *  BrowserWebSocketImpl.createInstance.  For NodeJS implementations, this will be defined differently.
     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
     * @param {string} cloverServer the base url for the clover server used in the cloud connection.
     *    EX:  https://www.clover.com, http://localhost:9000
     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server
     * @param {HttpSupport} httpSupport - the helper object used when making http requests.
     * @param {string} merchantId - the merchant the device belongs to.
     * @param {string} deviceId - the id (not uuid) of the device to connect to
     * @param {string} friendlyId - an identifier for the specific terminal connected to this device.  This id is used
     *  in debugging and may be sent to other clients if they attempt to connect to the same device.  It will also be
     *  sent to other clients that are currently connected if this device does a forceConnect.
     * @param {boolean} forceConnect - if true, overtake any existing connection.
     * @param {number} heartbeatInterval - duration to wait for a PING before disconnecting
     * @param {number} reconnectDelay - duration to wait until a reconnect is attempted
     */
    function WebSocketCloudCloverDeviceConfiguration(applicationId, webSocketFactoryFunction, imageUtil, cloverServer, accessToken, httpSupport, merchantId, deviceId, friendlyId, forceConnect, heartbeatInterval, reconnectDelay) {
        if (forceConnect === void 0) { forceConnect = false; }
        var _this = _super.call(this, applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay) || this;
        _this.cloverServer = cloverServer;
        _this.accessToken = accessToken;
        _this.httpSupport = httpSupport;
        _this.merchantId = merchantId;
        _this.deviceId = deviceId;
        _this.friendlyId = friendlyId;
        _this.forceConnect = forceConnect;
        return _this;
    }
    WebSocketCloudCloverDeviceConfiguration.prototype.getMessagePackageName = function () {
        return 'com.clover.remote.protocol.websocket';
    };
    WebSocketCloudCloverDeviceConfiguration.prototype.getName = function () {
        return 'Clover Cloud WebSocket Connector';
    };
    WebSocketCloudCloverDeviceConfiguration.prototype.getCloverDeviceType = function () {
        return WebsocketCloudCloverDevice_1.WebsocketCloudCloverDevice;
    };
    WebSocketCloudCloverDeviceConfiguration.prototype.getCloverTransport = function () {
        // this is where we determine more about the transport...
        // The connection is paired:
        var transport = new WebSocketCloudCloverTransport_1.WebSocketCloudCloverTransport(this.heartbeatInterval, this.reconnectDelay, this.pingRetryCountBeforeReconnect, this.webSocketImplClass, this.cloverServer, this.merchantId, this.accessToken, this.deviceId, this.friendlyId, this.forceConnect, this.httpSupport);
        return transport;
    };
    return WebSocketCloudCloverDeviceConfiguration;
}(WebSocketCloverDeviceConfiguration_1.WebSocketCloverDeviceConfiguration));
exports.WebSocketCloudCloverDeviceConfiguration = WebSocketCloudCloverDeviceConfiguration;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketCloudCloverDeviceConfiguration.js.map


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utility to centralize endpoints.
 *
 * This simplifies building urls to contact services.  If there is a need to add
 * a call to a service on the server, it should be added here.
 *
 */
var Endpoints = (function () {
    function Endpoints() {
    }
    /**
     * Builds the OAuth url to get an OAuth token.
     *
     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
     * @param {string} clientId - the clover application uuid
     * @param {string} [merchantId] - the clover merchant id
     * @param {string} [redirectUri] - the url to redirect to after authentication
     * @returns {string}
     */
    Endpoints.getOAuthURL = function (domain, clientId, merchantId, redirectUri) {
        var variables = {};
        variables[Endpoints.DOMAIN_KEY] = domain;
        variables[Endpoints.OAUTH_CLIENT_ID_KEY] = clientId;
        var oauthEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.OAUTH_PATH + Endpoints.OAUTH_CLIENT_ID_SUFFIX;
        if (merchantId) {
            variables[Endpoints.OAUTH_MERCHANT_ID_KEY] = merchantId;
            oauthEndpointPath += Endpoints.OAUTH_MERCHANT_ID_SUFFIX;
        }
        if (redirectUri) {
            variables[Endpoints.OAUTH_REDIRECT_URI_KEY] = encodeURIComponent(redirectUri);
            oauthEndpointPath += Endpoints.OAUTH_REDIRECT_URI_SUFFIX;
        }
        return Endpoints.setVariables(oauthEndpointPath, variables);
    };
    /**
     * The endpoint used to connect to a websocket on the server that will proxy to a device.  Used by
     * remote-pay cloud connectors.
     *
     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
     * @param {string} wsToken - the token used to contact the device.
     * @param {string} friendlyId - an id used to identify the POS.
     * @param {boolean} forceConnect - if true, then the attempt will overtake any existing connection
     * @returns {string} The endpoint used to connect to a websocket on the server that will proxy to a device
     */
    Endpoints.getDeviceWebSocketEndpoint = function (domain, wsToken, friendlyId, forceConnect) {
        var variables = {};
        variables[Endpoints.WEBSOCKET_TOKEN_KEY] = wsToken;
        variables[Endpoints.DOMAIN_KEY] = domain;
        variables[Endpoints.WEBSOCKET_FRIENDLY_ID_KEY] = friendlyId;
        variables[Endpoints.WEBSOCKET_FORCE_CONNECT_ID_KEY] = forceConnect;
        var merchantEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.WEBSOCKET_PATH +
            Endpoints.WEBSOCKET_TOKEN_SUFFIX +
            Endpoints.WEBSOCKET_FRIENDLY_ID_SUFFIX +
            Endpoints.WEBSOCKET_FORCE_CONNECT_ID_SUFFIX;
        return Endpoints.setVariables(merchantEndpointPath, variables);
    };
    /**
     * The endpoint used to obtain a merchant
     *
     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
     * @param {string} accessToken - the OAuth token used when accessing the server
     * @returns {string} endpoint - the url to use to retrieve the merchant
     */
    Endpoints.getMerchantEndpoint = function (domain, merchantId, accessToken) {
        var variables = {};
        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;
        variables[Endpoints.DOMAIN_KEY] = domain;
        var merchantEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.MERCHANT_V3_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;
        return Endpoints.setVariables(merchantEndpointPath, variables);
    };
    /**
     * The endpoint used to obtain a list of devices
     *
     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
     * @param {string} accessToken - the OAuth token used when accessing the server
     * @returns {string}
     */
    Endpoints.getDevicesEndpoint = function (domain, merchantId, accessToken) {
        var variables = {};
        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;
        variables[Endpoints.DOMAIN_KEY] = domain;
        var devicesEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.DEVICE_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;
        return Endpoints.setVariables(devicesEndpointPath, variables);
    };
    /**
     * Builds the endpoint to send the message to the server to let the device know we want to talk to it.
     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
     * @param {string} accessToken - the OAuth token used when accessing the server
     * @returns {string} endpoint - the url to use alert a device that we want to communicate with it
     */
    Endpoints.getAlertDeviceEndpoint = function (domain, merchantId, accessToken) {
        var variables = {};
        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;
        variables[Endpoints.DOMAIN_KEY] = domain;
        var alertDeviceEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.REMOTE_PAY_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;
        return Endpoints.setVariables(alertDeviceEndpointPath, variables);
    };
    /**
     * Does variable replacement on a template
     *
     * @private
     * @param {string} template - a template string that will have tags replaced
     * @param {map} variableMap - a named map of tag to value for the replacement process
     * @returns {string}
     */
    Endpoints.setVariables = function (template, variableMap) {
        for (var key in variableMap) {
            if (variableMap.hasOwnProperty(key)) {
                var bracedKey = new RegExp(this.escapeRegExp("{" + key + "}"), "g");
                // If the value of DOMAIN_KEY does not have a trailing slash, add one.
                if (key === Endpoints.DOMAIN_KEY) {
                    variableMap[key] = Endpoints.appendTrailingSlashToDomain(variableMap[key]);
                }
                template = template.replace(bracedKey, variableMap[key]);
            }
        }
        return template;
    };
    ;
    Endpoints.appendTrailingSlashToDomain = function (domain) {
        if (domain && domain.charAt(domain.length - 1) !== '/') {
            return domain + "/";
        }
        return domain;
    };
    /**
     *
     * Does simple escaping to facilitate string replacement in a url
     * @param {string} stringToGoIntoTheRegex - the unescaped regex
     * @returns {XML|string|void} - the escaped regex
     * @private
     */
    Endpoints.escapeRegExp = function (stringToGoIntoTheRegex) {
        return stringToGoIntoTheRegex.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
    Endpoints.ACCESS_TOKEN_KEY = "axsTkn";
    Endpoints.ACCESS_TOKEN_SUFFIX = "?access_token={" + Endpoints.ACCESS_TOKEN_KEY + "}";
    Endpoints.ACCOUNT_V3_KEY = "acntId";
    Endpoints.ACCOUNT_V3_PATH = "v3/accounts/{" + Endpoints.ACCOUNT_V3_KEY + "}";
    Endpoints.DEVELOPER_V3_KEY = "dId";
    Endpoints.DEVELOPER_V3_PATH = "v3/developers/{" + Endpoints.DEVELOPER_V3_KEY + "}";
    Endpoints.RESELLER_V3_KEY = "rId";
    Endpoints.RESELLER_V3_PATH = "v3/resellers/{" + Endpoints.RESELLER_V3_KEY + "}";
    Endpoints.MERCHANT_V2_KEY = "mId";
    Endpoints.MERCHANT_V2_PATH = "v2/merchant/{" + Endpoints.MERCHANT_V2_KEY + "}";
    Endpoints.MERCHANT_V3_KEY = "mId";
    Endpoints.MERCHANT_V3_PATH = "v3/merchants/{" + Endpoints.MERCHANT_V3_KEY + "}";
    Endpoints.APPS_V3_KEY = "appId";
    Endpoints.APPS_V3_PATH = "v3/apps/{" + Endpoints.APPS_V3_KEY + "}";
    Endpoints.ORDER_PATH = Endpoints.MERCHANT_V3_PATH + "/orders";
    Endpoints.ORDER_ID_KEY = "appId";
    Endpoints.ORDER_ID_PATH = Endpoints.ORDER_PATH + "/{" + Endpoints.ORDER_ID_KEY + "}";
    Endpoints.LINE_ITEM_PATH = Endpoints.ORDER_ID_PATH + "/line_items";
    Endpoints.LINE_ITEM_ID_KEY = "lniId";
    Endpoints.LINE_ITEM_ID_PATH = Endpoints.LINE_ITEM_PATH + "/{" + Endpoints.LINE_ITEM_ID_KEY + "}";
    Endpoints.DEVICE_PATH = Endpoints.MERCHANT_V3_PATH + "/devices";
    Endpoints.DEVICE_ID_KEY = "devId";
    Endpoints.DEVICE_ID_PATH = Endpoints.DEVICE_PATH + "/{" + Endpoints.DEVICE_ID_KEY + "}";
    Endpoints.REMOTE_PAY_PATH = Endpoints.MERCHANT_V2_PATH + "/remote_pay";
    Endpoints.WEBSOCKET_PATH = "support/remote_pay/cs";
    Endpoints.WEBSOCKET_TOKEN_KEY = "wsTkn";
    Endpoints.WEBSOCKET_TOKEN_SUFFIX = "?token={" + Endpoints.WEBSOCKET_TOKEN_KEY + "}";
    Endpoints.WEBSOCKET_FRIENDLY_ID_KEY = "wsFriendlyId";
    Endpoints.WEBSOCKET_FRIENDLY_ID_SUFFIX = "&friendlyId={" + Endpoints.WEBSOCKET_FRIENDLY_ID_KEY + "}";
    Endpoints.WEBSOCKET_FORCE_CONNECT_ID_KEY = "wsForceConnect";
    Endpoints.WEBSOCKET_FORCE_CONNECT_ID_SUFFIX = "&forceConnect={" + Endpoints.WEBSOCKET_FORCE_CONNECT_ID_KEY + "}";
    Endpoints.OAUTH_PATH = "oauth/authorize?response_type=token";
    Endpoints.OAUTH_CLIENT_ID_KEY = "client_id";
    Endpoints.OAUTH_CLIENT_ID_SUFFIX = "&client_id={" + Endpoints.OAUTH_CLIENT_ID_KEY + "}";
    Endpoints.OAUTH_MERCHANT_ID_KEY = "merchant_id";
    Endpoints.OAUTH_MERCHANT_ID_SUFFIX = "&merchant_id={" + Endpoints.OAUTH_MERCHANT_ID_KEY + "}";
    Endpoints.OAUTH_REDIRECT_URI_KEY = "redirect_uri";
    Endpoints.OAUTH_REDIRECT_URI_SUFFIX = "&redirect_uri={" + Endpoints.OAUTH_REDIRECT_URI_KEY + "}";
    Endpoints.DOMAIN_KEY = "server_url";
    Endpoints.DOMAIN_PATH = "{server_url}";
    return Endpoints;
}());
exports.Endpoints = Endpoints;

//# sourceMappingURL=../../../maps/com/clover/util/Endpoints.js.map


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketState_1 = __webpack_require__(38);
var Logger_1 = __webpack_require__(7);
/**
 * Used to abstract implementation details to allow for NodeJS and
 * Browser usage of the library.
 *
 * WebSocket Clover Interface.  Abstracts the WebSocket implementation so that the library is not tied to a
 * Browser implementation.
 *
 * Interface to connect a websocket implementation to.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 * or https://html.spec.whatwg.org/multipage/web-sockets.html
 */
var CloverWebSocketInterface = (function () {
    function CloverWebSocketInterface(endpoint) {
        // Create a logger
        this.logger = Logger_1.Logger.create();
        this.endpoint = endpoint;
        this.listeners = new Array();
    }
    CloverWebSocketInterface.prototype.connect = function () {
        var _this = this;
        this.webSocket = this.createWebSocket(this.endpoint);
        if (typeof this.webSocket["addEventListener"] !== "function") {
            this.logger.error("FATAL: The websocket implementation being used must have an 'addEventListener' function.  Either use a supported websocket implementation (https://www.npmjs.com/package/ws) or override the connect method on CloverWebSocketInterface.");
        }
        else {
            this.webSocket.addEventListener("open", function (event) { return _this.notifyOnOpen(event); });
            this.webSocket.addEventListener("message", function (event) { return _this.notifyOnMessage(event); });
            this.webSocket.addEventListener("close", function (event) { return _this.notifyOnClose(event); });
            this.webSocket.addEventListener("error", function (event) { return _this.notifyOnError(event); });
        }
        return this;
    };
    CloverWebSocketInterface.prototype.notifyOnOpen = function (event) {
        var _this = this;
        this.listeners.forEach(function (listener) {
            try {
                // check event here for any additional data we can see - headers?
                listener.onConnected(_this);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverWebSocketInterface.prototype.notifyOnMessage = function (event) {
        var _this = this;
        this.listeners.forEach(function (listener) {
            try {
                listener.onTextMessage(_this, event.data);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    /**
     * A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail
     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.
     *
     * @param {any} event - simple event passed per websocket spec.
     */
    CloverWebSocketInterface.prototype.notifyOnError = function (event) {
        var _this = this;
        this.listeners.forEach(function (listener) {
            try {
                // According to the spec, only CLOSING or OPEN should occur. This is a 'simple' event.
                // check event here for any additional data we can see - headers?
                if (_this.getReadyState() == WebSocketState_1.WebSocketState.CONNECTING) {
                    listener.onConnectError(_this, event);
                }
                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.CLOSING) {
                    listener.onUnexpectedError(_this, event);
                }
                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.CLOSED) {
                    listener.onDisconnected(_this, event);
                }
                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.OPEN) {
                    listener.onSendError(_this, event);
                }
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverWebSocketInterface.prototype.notifyOnClose = function (event) {
        var _this = this;
        this.listeners.forEach(function (listener) {
            try {
                listener.onCloseFrame(_this, event.code, event.reason);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverWebSocketInterface.prototype.sendClose = function (code, reason) {
        this.logger.debug("Close sent code ", code, " reason ", reason);
        try {
            /** 1000 indicates normal closure.  To avoid InvalidAccessErrors if no code is available default to 1000.
             *  Per the websocket spec:
             *    "If the method's first argument is present but is not an integer equal to 1000 or in the range 3000 to 4999,
             *     throw an InvalidAccessError exception and abort these steps."
             */
            this.webSocket.close(code || 1000, reason || "NORMAL_CLOSURE");
        }
        catch (e) {
            this.logger.error('error disposing of transport.', e);
        }
        return this;
    };
    CloverWebSocketInterface.prototype.sendText = function (data) {
        /*
         Exceptions thrown

         INVALID_STATE_ERR
         The connection is not currently OPEN.
         SYNTAX_ERR
         The data is a string that has unpaired surrogates. (???)
         */
        this.webSocket.send(data);
        return this;
    };
    CloverWebSocketInterface.prototype.getState = function () {
        return this.getReadyState();
    };
    CloverWebSocketInterface.prototype.isOpen = function () {
        return this.getReadyState() == WebSocketState_1.WebSocketState.OPEN;
    };
    CloverWebSocketInterface.prototype.addListener = function (listener) {
        this.listeners.push(listener);
    };
    CloverWebSocketInterface.prototype.removeListener = function (listener) {
        var indexOfListener = this.listeners.indexOf(listener);
        if (indexOfListener !== -1) {
            this.listeners.splice(indexOfListener, 1);
            return true;
        }
        return false;
    };
    CloverWebSocketInterface.prototype.getListeners = function () {
        return this.listeners.slice();
    };
    // Wrapped functionality below
    CloverWebSocketInterface.prototype.getUrl = function () {
        return this.webSocket.url;
    };
    CloverWebSocketInterface.prototype.getReadyState = function () {
        return this.webSocket.readyState;
    };
    CloverWebSocketInterface.prototype.getBufferedAmount = function () {
        return this.webSocket.hasOwnProperty("bufferedAmount") ? this.webSocket.bufferedAmount : 0;
    };
    CloverWebSocketInterface.prototype.getProtocol = function () {
        return this.webSocket.protocol;
    };
    return CloverWebSocketInterface;
}());
exports.CloverWebSocketInterface = CloverWebSocketInterface;

//# sourceMappingURL=../../../maps/com/clover/websocket/CloverWebSocketInterface.js.map


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CloverWebSocketInterface_1 = __webpack_require__(170);
/**
 * Uses a browser Websocket.
 *
 *
 */
var BrowserWebSocketImpl = (function (_super) {
    __extends(BrowserWebSocketImpl, _super);
    function BrowserWebSocketImpl(endpoint) {
        return _super.call(this, endpoint) || this;
    }
    /**
     *
     * @override
     * @param endpoint - the url that will connected to
     * @returns {WebSocket} - the specific implementation of a websocket
     */
    BrowserWebSocketImpl.prototype.createWebSocket = function (endpoint) {
        return new WebSocket(endpoint);
    };
    /**
     * Browser implementations do not do pong frames
     */
    BrowserWebSocketImpl.prototype.sendPong = function () {
        return this;
    };
    /**
     * Browser implementations do not do ping frames
     */
    BrowserWebSocketImpl.prototype.sendPing = function () {
        return this;
    };
    /**
     * Create an instance of this class
     *
     * @param endpoint
     * @returns {BrowserWebSocketImpl}
     */
    BrowserWebSocketImpl.createInstance = function (endpoint) {
        return new BrowserWebSocketImpl(endpoint);
    };
    return BrowserWebSocketImpl;
}(CloverWebSocketInterface_1.CloverWebSocketInterface));
exports.BrowserWebSocketImpl = BrowserWebSocketImpl;

//# sourceMappingURL=../../../maps/com/clover/websocket/BrowserWebSocketImpl.js.map


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var WebSocketCloudCloverDeviceConfiguration_1 = __webpack_require__(168);
var Endpoints_1 = __webpack_require__(169);
var HttpSupport_1 = __webpack_require__(163);
var CloverConnector_1 = __webpack_require__(37);
var BrowserWebSocketImpl_1 = __webpack_require__(171);
var ImageUtil_1 = __webpack_require__(164);
/**
 * This is for backwards compatibility.  It will not work for non-browser!!!
 *
 * This is the equivalent of the old way we created and ran the cloud.
 */
var CloverConnectorFactory = (function () {
    function CloverConnectorFactory() {
    }
    CloverConnectorFactory.prototype.createICloverConnector = function (configuration) {
        return new LegacyCloverConnector(configuration);
    };
    return CloverConnectorFactory;
}());
exports.CloverConnectorFactory = CloverConnectorFactory;
/**
 * This connector uses Browser specific objects to work in a manner compatible with the
 * 1.1.0 implementation of the ICloverConnector.
 *
 * It uses the domain && clientId to get the oauthtoken, then gets the merchantId,
 * and the deviceId.  This process may involve redirection of the page, and XHR requests,
 * all of which are performed using default Browser objects.
 *
 * Once these values have been obtained, a new WebSocketCloudCloverDeviceConfiguration is
 * generated using the default Browser WebSocket implementation, and the connector is initialized.
 *
 */
var LegacyCloverConnector = (function (_super) {
    __extends(LegacyCloverConnector, _super);
    function LegacyCloverConnector(legacyConfiguration) {
        var _this = _super.call(this, null) || this;
        _this.urlParamsInfo = null;
        _this.httpSupport = new HttpSupport_1.HttpSupport(XMLHttpRequest);
        _this.imageUtil = new ImageUtil_1.ImageUtil();
        _this.legacyConfiguration = legacyConfiguration;
        return _this;
    }
    LegacyCloverConnector.prototype.initializeConnection = function () {
        if (this.device == null) {
            this.initializeLegacyConnection(this.legacyConfiguration);
        }
    };
    /**
     * Generates a WebSocketCloudCloverDeviceConfiguration with a "raw" configuration
     * @param rawConfiguration - a Json object that has values that can be used to construct the
     *  object configuration.
     */
    LegacyCloverConnector.prototype.generateNewConfigurationAndInitialize = function (rawConfiguration) {
        var newConfig = new WebSocketCloudCloverDeviceConfiguration_1.WebSocketCloudCloverDeviceConfiguration(rawConfiguration.remoteApplicationId, BrowserWebSocketImpl_1.BrowserWebSocketImpl.createInstance, this.imageUtil, rawConfiguration.domain, rawConfiguration.oauthToken, this.httpSupport, rawConfiguration.merchantId, rawConfiguration.deviceId, rawConfiguration.friendlyId, rawConfiguration.forceConnect);
        if (this.device == null) {
            this.initialize(newConfig);
        }
    };
    /**
     * Checks for a oauth token, does a redirect based on the configuration domain and
     * clientid if necessary, then moves on to #onceWeHaveTheAccessToken(...)
     *
     * @param configuration - the raw configuration object
     */
    LegacyCloverConnector.prototype.initializeLegacyConnection = function (configuration) {
        if (configuration.oauthToken) {
            this.onceWeHaveTheAccessToken(configuration);
        }
        else {
            // We MUST have the domain and clientId, or we are unable to go on.
            if (configuration.domain && configuration.clientId) {
                // The following will return the token, or else the page will redirect.
                configuration.oauthToken = this.getAccessToken(configuration);
                this.onceWeHaveTheAccessToken(configuration);
            }
            else {
                var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
                errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
                errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
                errorResponse.setMessage("Both 'clientId' and 'domain' are unset.  Cannot initialize.");
                this.broadcaster.notifyOnDeviceError(errorResponse);
            }
        }
    };
    /**
     * Gets the merchantId, redirecting if necessary, then moves on to #getDeviceId(...)
     *
     * @param configuration - the raw configuration object
     */
    LegacyCloverConnector.prototype.onceWeHaveTheAccessToken = function (configuration) {
        // If we had the oauth token, but we do not have the merchantId, this will redirect
        configuration.merchantId = this.getMerchantId(configuration);
        // We need the deviceId in order to send the notification.
        if (configuration.deviceId) {
            this.generateNewConfigurationAndInitialize(configuration);
        }
        else {
            this.getDeviceId(configuration);
        }
    };
    /**
     * Gets the deviceId, calling the webservice to get the device list if necessary.
     * If the deviceId is not set, and the deviceSerialId is not set, then this will call
     * notify of an error. If the deviceId is not set, and the deviceSerialId is set then
     * the call to get the devices is made the result is used to build a mapping that is
     * passed to handleDeviceResult.
     *
     * @param configuration - the raw configuration object
     */
    LegacyCloverConnector.prototype.getDeviceId = function (configuration) {
        if (configuration.deviceSerialId || configuration.deviceId) {
            if (configuration.deviceId) {
                this.generateNewConfigurationAndInitialize(configuration);
            }
            else {
                var devicesEndpoint = Endpoints_1.Endpoints.getDevicesEndpoint(configuration.domain, configuration.merchantId, configuration.oauthToken);
                this.httpSupport.getData(devicesEndpoint, function (devices) {
                    this.handleDeviceResult(LegacyCloverConnector.buildMapOfSerialToDevice(devices), configuration);
                }.bind(this), function (error) {
                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
                    errorResponse.setMessage(JSON.stringify({ "Error retreiving devices:": error }, null, '\t'));
                    this.broadcaster.notifyOnDeviceError(errorResponse);
                }.bind(this));
            }
        }
        else {
            var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
            errorResponse.setMessage("Neither 'deviceId' or 'deviceSerialId' passed, one must be set.  Cannot initialize.");
            this.broadcaster.notifyOnDeviceError(errorResponse);
        }
    };
    /**
     * Builds a mapping of the passed set of devices, from the device serial number to the device.
     *
     * @param devicesVX
     * @returns {{}} the mapping from the device serial number to the device
     */
    LegacyCloverConnector.buildMapOfSerialToDevice = function (devicesVX) {
        var devices = null;
        var deviceBySerial = {};
        // depending on the version of the call, the devices might be in a slightly different format.
        // We would need to determine what devices were capable of doing what we want.  This means we
        // need to know if the device has the websocket connection enabled.  The best way to do this is
        // to make a different REST call, but we could filter the devices here.
        if (devicesVX['devices']) {
            devices = devicesVX.devices;
        }
        else if (devicesVX['elements']) {
            devices = devicesVX.elements;
        }
        if (devices) {
            var i;
            for (i = 0; i < devices.length; i++) {
                deviceBySerial[devices[i].serial] = devices[i];
            }
        }
        return deviceBySerial;
    };
    /**
     * Uses the mapping of devices to find the correct deviceId to use in the configuration.
     * This then moves on to generateNewConfigurationAndInitialize.
     *
     * @param devices
     * @param configuration
     */
    LegacyCloverConnector.prototype.handleDeviceResult = function (devices, configuration) {
        var myDevice = devices[configuration.deviceSerialId];
        if (null == myDevice) {
            var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
            errorResponse.setMessage("Cannot determine device to use.  " +
                "Device " + configuration.deviceSerialId + " not in set returned.");
            this.broadcaster.notifyOnDeviceError(errorResponse);
        }
        else {
            // Stations do not support the kiosk/pay display.
            // If the user has selected one, then print out a (loud) warning
            if (myDevice.model == "Clover_C100") {
                this.logger.warn("Warning - Selected device model (" +
                    devices[configuration.deviceSerialId].model +
                    ") does not support pay display." +
                    "  Will attempt to send notification to device, but no response" +
                    " should be expected.");
            }
            configuration.deviceId = myDevice.id;
            this.generateNewConfigurationAndInitialize(configuration);
        }
    };
    /**
     * Get the merchantId or redirect.
     *
     * @param configuration
     * @returns {string|any}
     */
    LegacyCloverConnector.prototype.getMerchantId = function (configuration) {
        if (!configuration.merchantId) {
            if (!this.urlParamsInfo) {
                if (configuration.domain && configuration.clientId) {
                    // We must have the merchant id.  This will make the merchant log in again.
                    this.getAccessToken(configuration);
                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
                    errorResponse.setMessage("Neither 'merchantId' or '" +
                        LegacyCloverConnector.URL_MERCHANT_ID_KEY + "' specified. Cannot initialize.");
                    this.broadcaster.notifyOnDeviceError(errorResponse);
                }
                else {
                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
                    errorResponse.setMessage("Both 'clientId' and 'domain' are unset.  Cannot initialize.");
                    this.broadcaster.notifyOnDeviceError(errorResponse);
                }
            }
            else {
                configuration.merchantId = this.urlParamsInfo[LegacyCloverConnector.URL_MERCHANT_ID_KEY];
            }
        }
        return configuration.merchantId;
    };
    /**
     * Get the access token, either from the configuration or from the window URL, or redirect.
     *
     * @param configuration
     * @returns {null}
     */
    LegacyCloverConnector.prototype.getAccessToken = function (configuration) {
        this.parseWindowURL();
        var token = null;
        if (this.urlParamsInfo) {
            token = this.urlParamsInfo[LegacyCloverConnector.accessTokenKey];
        }
        if (token == null) {
            // There is no token attempt to redirect
            LegacyCloverConnector.redirect(configuration);
        }
        return token;
    };
    LegacyCloverConnector.redirect = function (configuration) {
        var finalRedirect = window.location.href.replace(window.location.hash, '');
        var oAuthRedirectUrl = Endpoints_1.Endpoints.getOAuthURL(configuration.domain, configuration.clientId, null, finalRedirect);
        window.location.href = oAuthRedirectUrl;
    };
    LegacyCloverConnector.prototype.parseWindowURL = function () {
        if (!this.urlParamsInfo) {
            this.parseURL(window.location);
        }
    };
    LegacyCloverConnector.prototype.parseURL = function (windowLocationObject) {
        this.urlParamsInfo = {};
        var params = windowLocationObject.hash.split('&');
        this.parseStuff(params);
        var params2 = windowLocationObject.search.substr(1).split('&');
        this.parseStuff(params2);
    };
    LegacyCloverConnector.prototype.parseStuff = function (params) {
        var i = 0;
        var param = null;
        while (param = params[i++]) {
            var multiParam = param.split("=");
            this.urlParamsInfo[multiParam[0]] = multiParam[1];
            // Make sure the access_token is mapped with the hash infront,
            // and without.
            if (multiParam[0] === LegacyCloverConnector._accessTokenKey) {
                this.urlParamsInfo[LegacyCloverConnector.accessTokenKey] = multiParam[1];
            }
        }
    };
    LegacyCloverConnector._accessTokenKey = 'access_token';
    LegacyCloverConnector.accessTokenKey = '#' + LegacyCloverConnector._accessTokenKey;
    LegacyCloverConnector.URL_MERCHANT_ID_KEY = "merchant_id";
    return LegacyCloverConnector;
}(CloverConnector_1.CloverConnector));
exports.LegacyCloverConnector = LegacyCloverConnector;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactory.js.map


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var clover = __webpack_require__(174);
var sdk = __webpack_require__(6);

var cloudConfig = {
  remoteId: "com.greg.cloudtest",
  cloverServer: "https://sandbox.dev.clover.com",
  accessToken: "290b8ef0-0e35-5f12-7eb8-504f026c0007",
  merchantId: "RADM5HD23A8RM",
  deviceId: "02d8e2ad-1ec1-286f-e814-123d12b2ea97"
}

CloudTest = function () {
}

CloudTest.prototype.run = function () {

  // instantiate a configuration object
  var connectorConfiguration = new clover.WebSocketCloudCloverDeviceConfiguration(
    cloudConfig.remoteId,
    clover.BrowserWebSocketImpl.createInstance,
    new clover.ImageUtil(),
    cloudConfig.cloverServer,
    cloudConfig.accessToken,
    new clover.HttpSupport(XMLHttpRequest),
    cloudConfig.merchantId,
    cloudConfig.deviceId,
    "Cloud Test",
    true,
    1000,
    3000
  )

  // create a clover connector
  var builderConfiguration = {}; // we will define a builder configuration object here
  builderConfiguration[clover.CloverConnectorFactoryBuilder.FACTORY_VERSION] = clover.CloverConnectorFactoryBuilder.VERSION_12;
  var cloverConnectorFactory = clover.CloverConnectorFactoryBuilder.createICloverConnectorFactory(builderConfiguration);

  var cloverConnector = cloverConnectorFactory.createICloverConnector(connectorConfiguration); // create connector

  // add the listeners
  cloverConnector.addCloverConnectorListener(defaultCloverConnectorListener);
  cloverConnector.initializeConnection();

  setCloverConnector(cloverConnector);
}

// show a message on the device
CloudTest.prototype.showMessage = function() {
  getCloverConnector().showMessage("Welcome to Clover Connector!");

  cleanup();
}

// perform a sale
CloudTest.prototype.performSale = function () {

  // create a sale listener (appended to default listener object)
  var saleListener = Object.assign({}, defaultCloverConnectorListener, {
    onSaleResponse: function (response) {
      console.log({message: "Sale complete!", response: response});
      if (!response.getIsSale()) {
        console.log({error: "Response is not a sale!"});
        updateStatus("Sale failed.")
      } else {
        updateStatus("Sale complete!");
      }

      cleanup();
    },

    onConfirmPaymentRequest: function (request) {
      console.log({message: "Processing payment...", request: request});
      updateStatus("Processing payment...");
      var challenges = request.getChallenges();
      if (challenges) {
        sign = window.confirm(challenges[0].message);
        if (sign) {
          cloverConnector.acceptPayment(request.getPayment());
        } else {
          cloverConnector.rejectPayment(request.getPayment(), challenges[0]);
        }
      } else {
        console.log({message: "Accepted Payment!"});
        cloverConnector.acceptPayment(request.getPayment());
      }
    },

    onVerifySignatureRequest: function (request) {
      console.log({message: "Automatically accepting signature", request: request});
      // updateStatus("Automatically accepting signature");
      cloverConnector.acceptSignature(request);
    }
  });
  // add the listener
  cloverConnector.addCloverConnectorListener(saleListener);

  // create a sale request
  var saleRequest = new sdk.remotepay.SaleRequest();
  saleRequest.setExternalId(clover.CloverID.getNewId());
  saleRequest.setAmount(10);
  saleRequest.setAutoAcceptSignature(false);

  // send the sale request
  console.log({message: "Sending sale", request: saleRequest});
  getCloverConnector().sale(saleRequest);
}

// create a listener for the default device connection
var defaultCloverConnectorListener = Object.assign({}, clover.remotepay.ICloverConnectorListener.prototype, {
  onDeviceReady: function (merchantInfo) {
    updateStatus("Pairing successfully completed, your Clover device is ready to process requests.");
    console.log({message: "Device ready to process requests!", merchantInfo: merchantInfo});
    toggleActions(true);
  },

  onDeviceDisconnected: function () {
    console.log({message: "Disconnected"});
    toggleActions(false);
  },

  onDeviceConnected: function () {
    console.log({message: "Connected, but not available to process requests"});
    toggleActions(false);
  }
});

var getCloverConnector = function () {
  return this.cloverConnector;
}

var setCloverConnector = function (cloverConnector) {
  this.cloverConnector = cloverConnector;
};

var updateStatus = function (newStatus) {
  var currentStatus = document.querySelector('.status');
  currentStatus.innerHTML = newStatus;
}

var cleanup = function() {
  getCloverConnector().dispose();
  toggleActions(false);
  updateStatus("Not connected to your Clover device. Please connect to perform an action.")
}

var toggleActions = function(show) {
  var actions = document.querySelector('.actions');
  if (show) {
    actions.style.display = "block";
  } else {
    actions.style.display = "none";
  }
}

module.exports = CloudTest;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// These exports expose the v1 interface and objects.
var sdk = __webpack_require__(6);

var base = sdk.base;
var customers = sdk.customers;
var device = sdk.device;
var hours = sdk.hours;
var inventory = sdk.inventory;
var order = sdk.order;
var payments = sdk.payments;
var printer = sdk.printer;
var remotepay = sdk.remotepay;
var remotemessage = sdk.remotemessage;

// These exports expose the beta method of using the Clover device
var CloverID = __webpack_require__(372);

// These exports expose the v1.2 CloverConnector and supporting objects
var version = '1.2.0';
var CloverConnector = __webpack_require__(37).CloverConnector;
var CloverDeviceFactory = __webpack_require__(162).CloverDeviceFactory;

var Logger = __webpack_require__(7).Logger;
var DebugConfig = __webpack_require__(161).DebugConfig;
var HttpSupport = __webpack_require__(163).HttpSupport;
var ImageUtil = __webpack_require__(164).ImageUtil;

var WebSocketCloverDeviceConfiguration = __webpack_require__(75).WebSocketCloverDeviceConfiguration;
var WebSocketPairedCloverDeviceConfiguration = __webpack_require__(380).WebSocketPairedCloverDeviceConfiguration;
var WebSocketCloudCloverDeviceConfiguration = __webpack_require__(168).WebSocketCloudCloverDeviceConfiguration;

var CloverTransport = __webpack_require__(167).CloverTransport;
var CloverTransportObserver = __webpack_require__(386).CloverTransportObserver;
var WebSocketCloverTransport = __webpack_require__(76).WebSocketCloverTransport;
var WebSocketState = __webpack_require__(38).WebSocketState;
var CloverWebSocketInterface = __webpack_require__(170).CloverWebSocketInterface;
var BrowserWebSocketImpl = __webpack_require__(171).BrowserWebSocketImpl;


var CloverConnectorFactoryBuilder = __webpack_require__(387).CloverConnectorFactoryBuilder;
var ICloverConnectorFactory = __webpack_require__(389).ICloverConnectorFactory;
// Following is exported explicitly because of backwards compatibility
var CloverConnectorFactory = __webpack_require__(172).CloverConnectorFactory;
var CardEntryMethods = __webpack_require__(160).CardEntryMethods;

// Export all of the pieces.
module.exports = {
    sdk: sdk,
    base: base,
    customers: customers,
    device: device,
    hours: hours,
    inventory: inventory,
    order: order,
    payments: payments,
    printer: printer,
    remotepay: remotepay,
    remotemessage: remotemessage,
    CloverID: CloverID,
    DebugConfig: DebugConfig,
    version: version,
    CloverConnector: CloverConnector,
    CloverDeviceFactory: CloverDeviceFactory,
    CloverTransport: CloverTransport,
    CloverTransportObserver: CloverTransportObserver,
    WebSocketCloverTransport: WebSocketCloverTransport,
    CloverWebSocketInterface: CloverWebSocketInterface,
    BrowserWebSocketImpl: BrowserWebSocketImpl,
    ImageUtil: ImageUtil,
    Logger: Logger,
    HttpSupport: HttpSupport,
    WebSocketCloverDeviceConfiguration: WebSocketCloverDeviceConfiguration,
    WebSocketPairedCloverDeviceConfiguration: WebSocketPairedCloverDeviceConfiguration,
    WebSocketCloudCloverDeviceConfiguration: WebSocketCloudCloverDeviceConfiguration,
    WebSocketState: WebSocketState,
    CloverConnectorFactoryBuilder: CloverConnectorFactoryBuilder,
    ICloverConnectorFactory: ICloverConnectorFactory,
    CloverConnectorFactory: CloverConnectorFactory,
    CardEntryMethods: CardEntryMethods
};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.apps = apps;
/**
* @namespace apps
*/
function apps() {}


apps.AppTracking = __webpack_require__(13);

//
// Expose the module.
//
if (true) {
  module.exports = apps;
}
    

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.base = base;
/**
* @namespace base
*/
function base() {}


base.Address = __webpack_require__(177);
base.ApprovalStatus = __webpack_require__(178);
base.BusinessTypeCode = __webpack_require__(179);
base.CardData = __webpack_require__(39);
base.Challenge = __webpack_require__(40);
base.ChallengeType = __webpack_require__(41);
base.ChallengeTypeEnum = __webpack_require__(180);
base.CountryInfo = __webpack_require__(181);
base.PendingPaymentEntry = __webpack_require__(42);
base.Point = __webpack_require__(77);
base.Points = __webpack_require__(78);
base.Reference = __webpack_require__(2);
base.ServiceCharge = __webpack_require__(79);
base.Signature = __webpack_require__(17);
base.Tender = __webpack_require__(23);

//
// Expose the module.
//
if (true) {
  module.exports = base;
}
    

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var Address = function() {
  this._class_ = Address;
  this.address1 = undefined;
  this.address2 = undefined;
  this.address3 = undefined;
  this.city = undefined;
  this.country = undefined;
  this.phoneNumber = undefined;
  this.state = undefined;
  this.zip = undefined;
};


/**
* Set the field value
* @memberof base.Address
* @param {String} address1 
*/
Address.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getAddress1 = function() {
  return this.address1;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} address2 
*/
Address.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getAddress2 = function() {
  return this.address2;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} address3 
*/
Address.prototype.setAddress3 = function(address3) {
  this.address3 = address3;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getAddress3 = function() {
  return this.address3;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} city 
*/
Address.prototype.setCity = function(city) {
  this.city = city;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getCity = function() {
  return this.city;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} country 
*/
Address.prototype.setCountry = function(country) {
  this.country = country;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getCountry = function() {
  return this.country;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} phoneNumber 
*/
Address.prototype.setPhoneNumber = function(phoneNumber) {
  this.phoneNumber = phoneNumber;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getPhoneNumber = function() {
  return this.phoneNumber;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} state 
*/
Address.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof base.Address
* @param {String} zip 
*/
Address.prototype.setZip = function(zip) {
  this.zip = zip;
};

/**
* Get the field value
* @memberof base.Address
* @return {String} 
*/
Address.prototype.getZip = function() {
  return this.zip;
};

/**
* @memberof base.Address
* @private
*/
Address.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Address.prototype.toString = function() {
  return JSON.stringify(this);
};

Address._meta_ =  {fields:  {}};
Address._meta_._class_ =  Address;
Address._meta_.fields["address1"] = {};
Address._meta_.fields["address1"].type = String;
Address._meta_.fields["address2"] = {};
Address._meta_.fields["address2"].type = String;
Address._meta_.fields["address3"] = {};
Address._meta_.fields["address3"].type = String;
Address._meta_.fields["city"] = {};
Address._meta_.fields["city"].type = String;
Address._meta_.fields["country"] = {};
Address._meta_.fields["country"].type = String;
Address._meta_.fields["phoneNumber"] = {};
Address._meta_.fields["phoneNumber"].type = String;
Address._meta_.fields["state"] = {};
Address._meta_.fields["state"].type = String;
Address._meta_.fields["zip"] = {};
Address._meta_.fields["zip"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = Address;
}



/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof base
* @enum {string}
*/
ApprovalStatus = {
  NEW : "NEW",
  PENDING : "PENDING",
  APPROVED_PENDING_SIGNING : "APPROVED_PENDING_SIGNING",
  APPROVED : "APPROVED",
  DENIED : "DENIED",
  PUBLISHED : "PUBLISHED"
};


//
// Expose the module.
//
if (true) {
module.exports = ApprovalStatus;
}



/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof base
* @enum {string}
*/
BusinessTypeCode = {
  FULL_SERVICE_RESTAURANT : "FULL_SERVICE_RESTAURANT",
  QUICK_SERVICE_RESTAURANT : "QUICK_SERVICE_RESTAURANT",
  COFFEE_SHOP : "COFFEE_SHOP",
  BAKERY : "BAKERY",
  BAR : "BAR",
  FOOD_TRUCK : "FOOD_TRUCK",
  FROZEN_YOGURT : "FROZEN_YOGURT",
  PIZZA : "PIZZA",
  DELI : "DELI",
  OTHER_RESTAURANT : "OTHER_RESTAURANT",
  BOUTIQUE : "BOUTIQUE",
  CONVENIENCE_STORE : "CONVENIENCE_STORE",
  GROCERY : "GROCERY",
  LIQUOR_STORE : "LIQUOR_STORE",
  VAPE_SHOP : "VAPE_SHOP",
  JEWELRY : "JEWELRY",
  FLORIST : "FLORIST",
  OTHER_RETAIL : "OTHER_RETAIL",
  FITNESS : "FITNESS",
  SPA : "SPA",
  HAIR_SALON : "HAIR_SALON",
  HOME_AND_REPAIR : "HOME_AND_REPAIR",
  PROFESSIONAL_SERVICES : "PROFESSIONAL_SERVICES",
  CATERING : "CATERING",
  OTHER_SERVICE : "OTHER_SERVICE"
};


//
// Expose the module.
//
if (true) {
module.exports = BusinessTypeCode;
}



/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_ChallengeType = __webpack_require__(41);

/**
* @constructor
* @memberof base
*/
var ChallengeTypeEnum = function() {
  this._class_ = ChallengeTypeEnum;
  this.challengeType = undefined;
};


/**
* Set the field value
* @memberof base.ChallengeTypeEnum
* @param {base.ChallengeType} challengeType 
*/
ChallengeTypeEnum.prototype.setChallengeType = function(challengeType) {
  this.challengeType = challengeType;
};

/**
* Get the field value
* @memberof base.ChallengeTypeEnum
* @return {base.ChallengeType} 
*/
ChallengeTypeEnum.prototype.getChallengeType = function() {
  return this.challengeType;
};

/**
* @memberof base.ChallengeTypeEnum
* @private
*/
ChallengeTypeEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ChallengeTypeEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ChallengeTypeEnum._meta_ =  {fields:  {}};
ChallengeTypeEnum._meta_._class_ =  ChallengeTypeEnum;
ChallengeTypeEnum._meta_.fields["challengeType"] = {};
ChallengeTypeEnum._meta_.fields["challengeType"].type = base_ChallengeType;

//
// Expose the module.
//
if (true) {
module.exports = ChallengeTypeEnum;
}



/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof base
*/
var CountryInfo = function() {
  this._class_ = CountryInfo;
  this.countryCode = undefined;
  this.displayName = undefined;
  this.localDisplayName = undefined;
  this.defaultCurrency = undefined;
  this.defaultTimezone = undefined;
  this.stateProvinceRequired = undefined;
  this.zipPostalRequired = undefined;
  this.countyRequired = undefined;
  this.defaultLocale = undefined;
  this.appMarketBillingEnabled = undefined;
};


/**
* Set the field value
* ISO 3166-1-alpha-2 code
*
* @memberof base.CountryInfo
* @param {String} countryCode 
*/
CountryInfo.prototype.setCountryCode = function(countryCode) {
  this.countryCode = countryCode;
};

/**
* Get the field value
* ISO 3166-1-alpha-2 code
* @memberof base.CountryInfo
* @return {String} 
*/
CountryInfo.prototype.getCountryCode = function() {
  return this.countryCode;
};

/**
* Set the field value
* @memberof base.CountryInfo
* @param {String} displayName 
*/
CountryInfo.prototype.setDisplayName = function(displayName) {
  this.displayName = displayName;
};

/**
* Get the field value
* @memberof base.CountryInfo
* @return {String} 
*/
CountryInfo.prototype.getDisplayName = function() {
  return this.displayName;
};

/**
* Set the field value
* @memberof base.CountryInfo
* @param {Null|String} localDisplayName 
*/
CountryInfo.prototype.setLocalDisplayName = function(localDisplayName) {
  this.localDisplayName = localDisplayName;
};

/**
* Get the field value
* @memberof base.CountryInfo
* @return {Null|String} 
*/
CountryInfo.prototype.getLocalDisplayName = function() {
  return this.localDisplayName;
};

/**
* Set the field value
* @memberof base.CountryInfo
* @param {String} defaultCurrency 
*/
CountryInfo.prototype.setDefaultCurrency = function(defaultCurrency) {
  this.defaultCurrency = defaultCurrency;
};

/**
* Get the field value
* @memberof base.CountryInfo
* @return {String} 
*/
CountryInfo.prototype.getDefaultCurrency = function() {
  return this.defaultCurrency;
};

/**
* Set the field value
* @memberof base.CountryInfo
* @param {String} defaultTimezone 
*/
CountryInfo.prototype.setDefaultTimezone = function(defaultTimezone) {
  this.defaultTimezone = defaultTimezone;
};

/**
* Get the field value
* @memberof base.CountryInfo
* @return {String} 
*/
CountryInfo.prototype.getDefaultTimezone = function() {
  return this.defaultTimezone;
};

/**
* Set the field value
* Indicates whether the state/province field is required when creating the address
*
* @memberof base.CountryInfo
* @param {Boolean} stateProvinceRequired 
*/
CountryInfo.prototype.setStateProvinceRequired = function(stateProvinceRequired) {
  this.stateProvinceRequired = stateProvinceRequired;
};

/**
* Get the field value
* Indicates whether the state/province field is required when creating the address
* @memberof base.CountryInfo
* @return {Boolean} 
*/
CountryInfo.prototype.getStateProvinceRequired = function() {
  return this.stateProvinceRequired;
};

/**
* Set the field value
* Indicates whether the ZIP/Postal code field is required when creating the address
*
* @memberof base.CountryInfo
* @param {Boolean} zipPostalRequired 
*/
CountryInfo.prototype.setZipPostalRequired = function(zipPostalRequired) {
  this.zipPostalRequired = zipPostalRequired;
};

/**
* Get the field value
* Indicates whether the ZIP/Postal code field is required when creating the address
* @memberof base.CountryInfo
* @return {Boolean} 
*/
CountryInfo.prototype.getZipPostalRequired = function() {
  return this.zipPostalRequired;
};

/**
* Set the field value
* Indicates whether the county field is required when creating the address
*
* @memberof base.CountryInfo
* @param {Boolean} countyRequired 
*/
CountryInfo.prototype.setCountyRequired = function(countyRequired) {
  this.countyRequired = countyRequired;
};

/**
* Get the field value
* Indicates whether the county field is required when creating the address
* @memberof base.CountryInfo
* @return {Boolean} 
*/
CountryInfo.prototype.getCountyRequired = function() {
  return this.countyRequired;
};

/**
* Set the field value
* @memberof base.CountryInfo
* @param {String} defaultLocale 
*/
CountryInfo.prototype.setDefaultLocale = function(defaultLocale) {
  this.defaultLocale = defaultLocale;
};

/**
* Get the field value
* @memberof base.CountryInfo
* @return {String} 
*/
CountryInfo.prototype.getDefaultLocale = function() {
  return this.defaultLocale;
};

/**
* Set the field value
* Indicates whether the country is enabled for app market billing
*
* @memberof base.CountryInfo
* @param {Boolean} appMarketBillingEnabled 
*/
CountryInfo.prototype.setAppMarketBillingEnabled = function(appMarketBillingEnabled) {
  this.appMarketBillingEnabled = appMarketBillingEnabled;
};

/**
* Get the field value
* Indicates whether the country is enabled for app market billing
* @memberof base.CountryInfo
* @return {Boolean} 
*/
CountryInfo.prototype.getAppMarketBillingEnabled = function() {
  return this.appMarketBillingEnabled;
};

/**
* @memberof base.CountryInfo
* @private
*/
CountryInfo.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CountryInfo.prototype.toString = function() {
  return JSON.stringify(this);
};

CountryInfo._meta_ =  {fields:  {}};
CountryInfo._meta_._class_ =  CountryInfo;
CountryInfo._meta_.fields["countryCode"] = {};
CountryInfo._meta_.fields["countryCode"].type = String;
CountryInfo._meta_.fields["displayName"] = {};
CountryInfo._meta_.fields["displayName"].type = String;
CountryInfo._meta_.fields["localDisplayName"] = {};
CountryInfo._meta_.fields["localDisplayName"].type = String;
CountryInfo._meta_.fields["defaultCurrency"] = {};
CountryInfo._meta_.fields["defaultCurrency"].type = String;
CountryInfo._meta_.fields["defaultTimezone"] = {};
CountryInfo._meta_.fields["defaultTimezone"].type = String;
CountryInfo._meta_.fields["stateProvinceRequired"] = {};
CountryInfo._meta_.fields["stateProvinceRequired"].type = Boolean;
CountryInfo._meta_.fields["zipPostalRequired"] = {};
CountryInfo._meta_.fields["zipPostalRequired"].type = Boolean;
CountryInfo._meta_.fields["countyRequired"] = {};
CountryInfo._meta_.fields["countyRequired"].type = Boolean;
CountryInfo._meta_.fields["defaultLocale"] = {};
CountryInfo._meta_.fields["defaultLocale"].type = String;
CountryInfo._meta_.fields["appMarketBillingEnabled"] = {};
CountryInfo._meta_.fields["appMarketBillingEnabled"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = CountryInfo;
}



/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.customers = customers;
/**
* @namespace customers
*/
function customers() {}


customers.Address = __webpack_require__(80);
customers.Card = __webpack_require__(81);
customers.Customer = __webpack_require__(43);
customers.CustomerMetadata = __webpack_require__(85);
customers.EmailAddress = __webpack_require__(83);
customers.PhoneNumber = __webpack_require__(84);
customers.TokenType = __webpack_require__(82);

//
// Expose the module.
//
if (true) {
  module.exports = customers;
}
    

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.device = device;
/**
* @namespace device
*/
function device() {}


device.AccessoryRomMetadataUpdateRequest = __webpack_require__(184);
device.BuildType = __webpack_require__(86);
device.Device = __webpack_require__(185);
device.DeviceAccessory = __webpack_require__(186);
device.DeviceAccessoryBuildType = __webpack_require__(87);
device.DeviceProvision = __webpack_require__(187);
device.DeviceProvisionState = __webpack_require__(88);
device.DeviceRequests = __webpack_require__(188);
device.LimitedDevice = __webpack_require__(189);
device.Rom = __webpack_require__(190);
device.RomBuildType = __webpack_require__(89);
device.SwapRequestEvent = __webpack_require__(191);

//
// Expose the module.
//
if (true) {
  module.exports = device;
}
    

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/** Request to update the ROM metadata for a device accessory. */
/**
* @constructor
* @memberof device
*/
var AccessoryRomMetadataUpdateRequest = function() {
  this._class_ = AccessoryRomMetadataUpdateRequest;
  this.cpuId = undefined;
  this.version = undefined;
  this.buildType = undefined;
};


/**
* Set the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @param {String} cpuId 
*/
AccessoryRomMetadataUpdateRequest.prototype.setCpuId = function(cpuId) {
  this.cpuId = cpuId;
};

/**
* Get the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @return {String} 
*/
AccessoryRomMetadataUpdateRequest.prototype.getCpuId = function() {
  return this.cpuId;
};

/**
* Set the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @param {Number} version must be an integer
*/
AccessoryRomMetadataUpdateRequest.prototype.setVersion = function(version) {
  this.version = version;
};

/**
* Get the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @return {Number} must be an integer
*/
AccessoryRomMetadataUpdateRequest.prototype.getVersion = function() {
  return this.version;
};

/**
* Set the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @param {String} buildType 
*/
AccessoryRomMetadataUpdateRequest.prototype.setBuildType = function(buildType) {
  this.buildType = buildType;
};

/**
* Get the field value
* @memberof device.AccessoryRomMetadataUpdateRequest
* @return {String} 
*/
AccessoryRomMetadataUpdateRequest.prototype.getBuildType = function() {
  return this.buildType;
};

/**
* @memberof device.AccessoryRomMetadataUpdateRequest
* @private
*/
AccessoryRomMetadataUpdateRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

AccessoryRomMetadataUpdateRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

AccessoryRomMetadataUpdateRequest._meta_ =  {fields:  {}};
AccessoryRomMetadataUpdateRequest._meta_._class_ =  AccessoryRomMetadataUpdateRequest;
AccessoryRomMetadataUpdateRequest._meta_.fields["cpuId"] = {};
AccessoryRomMetadataUpdateRequest._meta_.fields["cpuId"].type = String;
AccessoryRomMetadataUpdateRequest._meta_.fields["version"] = {};
AccessoryRomMetadataUpdateRequest._meta_.fields["version"].type = Number;
AccessoryRomMetadataUpdateRequest._meta_.fields["buildType"] = {};
AccessoryRomMetadataUpdateRequest._meta_.fields["buildType"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = AccessoryRomMetadataUpdateRequest;
}



/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var device_BuildType = __webpack_require__(86);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof device
*/
var Device = function() {
  this._class_ = Device;
  this.id = undefined;
  this.name = undefined;
  this.model = undefined;
  this.merchant = undefined;
  this.orderPrefix = undefined;
  this.terminalPrefix = undefined;
  this.serial = undefined;
  this.buildNumber = undefined;
  this.secureId = undefined;
  this.buildType = undefined;
  this.cpuId = undefined;
  this.imei = undefined;
  this.imsi = undefined;
  this.simIccid = undefined;
  this.deviceCertificate = undefined;
  this.pedCertificate = undefined;
  this.deviceTypeName = undefined;
  this.pinDisabled = false;
  this.offlinePayments = false;
  this.offlinePaymentsAll = false;
  this.offlinePaymentsLimit = undefined;
  this.offlinePaymentsPromptThreshold = undefined;
  this.offlinePaymentsTotalPaymentsLimit = undefined;
  this.offlinePaymentsLimitDefault = undefined;
  this.offlinePaymentsPromptThresholdDefault = undefined;
  this.offlinePaymentsTotalPaymentsLimitDefault = undefined;
  this.offlinePaymentsMaxLimit = undefined;
  this.offlinePaymentsMaxTotalPaymentsLimit = undefined;
  this.showOfflinePayments = undefined;
  this.maxOfflineDays = undefined;
  this.allowStoreAndForward = undefined;
  this.secureReports = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.Device
* @param {String} id 
*/
Device.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the device (if entered)
*
* @memberof device.Device
* @param {String} name 
*/
Device.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the device (if entered)
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof device.Device
* @param {String} model 
*/
Device.prototype.setModel = function(model) {
  this.model = model;
};

/**
* Get the field value
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getModel = function() {
  return this.model;
};

/**
* Set the field value
* @memberof device.Device
* @param {base.Reference} merchant 
*/
Device.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof device.Device
* @return {base.Reference} 
*/
Device.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* A prefix that will be applied to order numbers. This is useful if the merchant and/or customer needs to track which device an order came from.
*
* @memberof device.Device
* @param {String} orderPrefix 
*/
Device.prototype.setOrderPrefix = function(orderPrefix) {
  this.orderPrefix = orderPrefix;
};

/**
* Get the field value
* A prefix that will be applied to order numbers. This is useful if the merchant and/or customer needs to track which device an order came from.
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getOrderPrefix = function() {
  return this.orderPrefix;
};

/**
* Set the field value
* @memberof device.Device
* @param {Null|Number} terminalPrefix must be an integer
*/
Device.prototype.setTerminalPrefix = function(terminalPrefix) {
  this.terminalPrefix = terminalPrefix;
};

/**
* Get the field value
* @memberof device.Device
* @return {Null|Number} must be an integer
*/
Device.prototype.getTerminalPrefix = function() {
  return this.terminalPrefix;
};

/**
* Set the field value
* The device's serial number.
*
* @memberof device.Device
* @param {String} serial 
*/
Device.prototype.setSerial = function(serial) {
  this.serial = serial;
};

/**
* Get the field value
* The device's serial number.
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getSerial = function() {
  return this.serial;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} buildNumber must be a long integer
*/
Device.prototype.setBuildNumber = function(buildNumber) {
  this.buildNumber = buildNumber;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getBuildNumber = function() {
  return this.buildNumber;
};

/**
* Set the field value
* @memberof device.Device
* @param {String} secureId 
*/
Device.prototype.setSecureId = function(secureId) {
  this.secureId = secureId;
};

/**
* Get the field value
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getSecureId = function() {
  return this.secureId;
};

/**
* Set the field value
* @memberof device.Device
* @param {device.BuildType} buildType 
*/
Device.prototype.setBuildType = function(buildType) {
  this.buildType = buildType;
};

/**
* Get the field value
* @memberof device.Device
* @return {device.BuildType} 
*/
Device.prototype.getBuildType = function() {
  return this.buildType;
};

/**
* Set the field value
* @memberof device.Device
* @param {String} cpuId 
*/
Device.prototype.setCpuId = function(cpuId) {
  this.cpuId = cpuId;
};

/**
* Get the field value
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getCpuId = function() {
  return this.cpuId;
};

/**
* Set the field value
* The IMEI of the device
*
* @memberof device.Device
* @param {String} imei 
*/
Device.prototype.setImei = function(imei) {
  this.imei = imei;
};

/**
* Get the field value
* The IMEI of the device
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getImei = function() {
  return this.imei;
};

/**
* Set the field value
* The IMSI of the SIM in the device (if present)
*
* @memberof device.Device
* @param {String} imsi 
*/
Device.prototype.setImsi = function(imsi) {
  this.imsi = imsi;
};

/**
* Get the field value
* The IMSI of the SIM in the device (if present)
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getImsi = function() {
  return this.imsi;
};

/**
* Set the field value
* The ICCID of the SIM in the device (if present)
*
* @memberof device.Device
* @param {String} simIccid 
*/
Device.prototype.setSimIccid = function(simIccid) {
  this.simIccid = simIccid;
};

/**
* Get the field value
* The ICCID of the SIM in the device (if present)
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getSimIccid = function() {
  return this.simIccid;
};

/**
* Set the field value
* @memberof device.Device
* @param {String} deviceCertificate 
*/
Device.prototype.setDeviceCertificate = function(deviceCertificate) {
  this.deviceCertificate = deviceCertificate;
};

/**
* Get the field value
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getDeviceCertificate = function() {
  return this.deviceCertificate;
};

/**
* Set the field value
* @memberof device.Device
* @param {String} pedCertificate 
*/
Device.prototype.setPedCertificate = function(pedCertificate) {
  this.pedCertificate = pedCertificate;
};

/**
* Get the field value
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getPedCertificate = function() {
  return this.pedCertificate;
};

/**
* Set the field value
* The type of device. Possible values are "GOLDLEAF" (Station), "LEAFCUTTER" (Mobile), "MAPLECUTTER" (Mini), "CLOVER_GO" (Clover Go), or "OTHER" (Unknown).
*
* @memberof device.Device
* @param {String} deviceTypeName 
*/
Device.prototype.setDeviceTypeName = function(deviceTypeName) {
  this.deviceTypeName = deviceTypeName;
};

/**
* Get the field value
* The type of device. Possible values are "GOLDLEAF" (Station), "LEAFCUTTER" (Mobile), "MAPLECUTTER" (Mini), "CLOVER_GO" (Clover Go), or "OTHER" (Unknown).
* @memberof device.Device
* @return {String} 
*/
Device.prototype.getDeviceTypeName = function() {
  return this.deviceTypeName;
};

/**
* Set the field value
* Whether this device has PIN prompt disabled.
*
* @memberof device.Device
* @param {Boolean} pinDisabled 
*/
Device.prototype.setPinDisabled = function(pinDisabled) {
  this.pinDisabled = pinDisabled;
};

/**
* Get the field value
* Whether this device has PIN prompt disabled.
* @memberof device.Device
* @return {Boolean} 
*/
Device.prototype.getPinDisabled = function() {
  return this.pinDisabled;
};

/**
* Set the field value
* @memberof device.Device
* @param {Boolean} offlinePayments 
*/
Device.prototype.setOfflinePayments = function(offlinePayments) {
  this.offlinePayments = offlinePayments;
};

/**
* Get the field value
* @memberof device.Device
* @return {Boolean} 
*/
Device.prototype.getOfflinePayments = function() {
  return this.offlinePayments;
};

/**
* Set the field value
* @memberof device.Device
* @param {Boolean} offlinePaymentsAll 
*/
Device.prototype.setOfflinePaymentsAll = function(offlinePaymentsAll) {
  this.offlinePaymentsAll = offlinePaymentsAll;
};

/**
* Get the field value
* @memberof device.Device
* @return {Boolean} 
*/
Device.prototype.getOfflinePaymentsAll = function() {
  return this.offlinePaymentsAll;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsLimit must be a long integer
*/
Device.prototype.setOfflinePaymentsLimit = function(offlinePaymentsLimit) {
  this.offlinePaymentsLimit = offlinePaymentsLimit;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsLimit = function() {
  return this.offlinePaymentsLimit;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsPromptThreshold must be a long integer
*/
Device.prototype.setOfflinePaymentsPromptThreshold = function(offlinePaymentsPromptThreshold) {
  this.offlinePaymentsPromptThreshold = offlinePaymentsPromptThreshold;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsPromptThreshold = function() {
  return this.offlinePaymentsPromptThreshold;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsTotalPaymentsLimit must be a long integer
*/
Device.prototype.setOfflinePaymentsTotalPaymentsLimit = function(offlinePaymentsTotalPaymentsLimit) {
  this.offlinePaymentsTotalPaymentsLimit = offlinePaymentsTotalPaymentsLimit;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsTotalPaymentsLimit = function() {
  return this.offlinePaymentsTotalPaymentsLimit;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsLimitDefault must be a long integer
*/
Device.prototype.setOfflinePaymentsLimitDefault = function(offlinePaymentsLimitDefault) {
  this.offlinePaymentsLimitDefault = offlinePaymentsLimitDefault;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsLimitDefault = function() {
  return this.offlinePaymentsLimitDefault;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsPromptThresholdDefault must be a long integer
*/
Device.prototype.setOfflinePaymentsPromptThresholdDefault = function(offlinePaymentsPromptThresholdDefault) {
  this.offlinePaymentsPromptThresholdDefault = offlinePaymentsPromptThresholdDefault;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsPromptThresholdDefault = function() {
  return this.offlinePaymentsPromptThresholdDefault;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsTotalPaymentsLimitDefault must be a long integer
*/
Device.prototype.setOfflinePaymentsTotalPaymentsLimitDefault = function(offlinePaymentsTotalPaymentsLimitDefault) {
  this.offlinePaymentsTotalPaymentsLimitDefault = offlinePaymentsTotalPaymentsLimitDefault;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsTotalPaymentsLimitDefault = function() {
  return this.offlinePaymentsTotalPaymentsLimitDefault;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsMaxLimit must be a long integer
*/
Device.prototype.setOfflinePaymentsMaxLimit = function(offlinePaymentsMaxLimit) {
  this.offlinePaymentsMaxLimit = offlinePaymentsMaxLimit;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsMaxLimit = function() {
  return this.offlinePaymentsMaxLimit;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} offlinePaymentsMaxTotalPaymentsLimit must be a long integer
*/
Device.prototype.setOfflinePaymentsMaxTotalPaymentsLimit = function(offlinePaymentsMaxTotalPaymentsLimit) {
  this.offlinePaymentsMaxTotalPaymentsLimit = offlinePaymentsMaxTotalPaymentsLimit;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getOfflinePaymentsMaxTotalPaymentsLimit = function() {
  return this.offlinePaymentsMaxTotalPaymentsLimit;
};

/**
* Set the field value
* @memberof device.Device
* @param {Boolean} showOfflinePayments 
*/
Device.prototype.setShowOfflinePayments = function(showOfflinePayments) {
  this.showOfflinePayments = showOfflinePayments;
};

/**
* Get the field value
* @memberof device.Device
* @return {Boolean} 
*/
Device.prototype.getShowOfflinePayments = function() {
  return this.showOfflinePayments;
};

/**
* Set the field value
* @memberof device.Device
* @param {Number} maxOfflineDays must be a long integer
*/
Device.prototype.setMaxOfflineDays = function(maxOfflineDays) {
  this.maxOfflineDays = maxOfflineDays;
};

/**
* Get the field value
* @memberof device.Device
* @return {Number} must be a long integer
*/
Device.prototype.getMaxOfflineDays = function() {
  return this.maxOfflineDays;
};

/**
* Set the field value
* @memberof device.Device
* @param {Boolean} allowStoreAndForward 
*/
Device.prototype.setAllowStoreAndForward = function(allowStoreAndForward) {
  this.allowStoreAndForward = allowStoreAndForward;
};

/**
* Get the field value
* @memberof device.Device
* @return {Boolean} 
*/
Device.prototype.getAllowStoreAndForward = function() {
  return this.allowStoreAndForward;
};

/**
* Set the field value
* @memberof device.Device
* @param {Array.<base.Reference>} secureReports An array of 
*/
Device.prototype.setSecureReports = function(secureReports) {
  this.secureReports = secureReports;
};

/**
* Get the field value
* @memberof device.Device
* @return {Array.<base.Reference>} An array of 
*/
Device.prototype.getSecureReports = function() {
  return this.secureReports;
};

/**
* @memberof device.Device
* @private
*/
Device.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Device.prototype.toString = function() {
  return JSON.stringify(this);
};

Device._meta_ =  {fields:  {}};
Device._meta_._class_ =  Device;
Device._meta_.fields["id"] = {};
Device._meta_.fields["id"].type = String;
Device._meta_.fields["name"] = {};
Device._meta_.fields["name"].type = String;
Device._meta_.fields["model"] = {};
Device._meta_.fields["model"].type = String;
Device._meta_.fields["merchant"] = {};
Device._meta_.fields["merchant"].type = base_Reference;
Device._meta_.fields["orderPrefix"] = {};
Device._meta_.fields["orderPrefix"].type = String;
Device._meta_.fields["terminalPrefix"] = {};
Device._meta_.fields["terminalPrefix"].type = Number;
Device._meta_.fields["serial"] = {};
Device._meta_.fields["serial"].type = String;
Device._meta_.fields["buildNumber"] = {};
Device._meta_.fields["buildNumber"].type = Number;
Device._meta_.fields["secureId"] = {};
Device._meta_.fields["secureId"].type = String;
Device._meta_.fields["buildType"] = {};
Device._meta_.fields["buildType"].type = device_BuildType;
Device._meta_.fields["cpuId"] = {};
Device._meta_.fields["cpuId"].type = String;
Device._meta_.fields["imei"] = {};
Device._meta_.fields["imei"].type = String;
Device._meta_.fields["imsi"] = {};
Device._meta_.fields["imsi"].type = String;
Device._meta_.fields["simIccid"] = {};
Device._meta_.fields["simIccid"].type = String;
Device._meta_.fields["deviceCertificate"] = {};
Device._meta_.fields["deviceCertificate"].type = String;
Device._meta_.fields["pedCertificate"] = {};
Device._meta_.fields["pedCertificate"].type = String;
Device._meta_.fields["deviceTypeName"] = {};
Device._meta_.fields["deviceTypeName"].type = String;
Device._meta_.fields["pinDisabled"] = {};
Device._meta_.fields["pinDisabled"].type = Boolean;
Device._meta_.fields["offlinePayments"] = {};
Device._meta_.fields["offlinePayments"].type = Boolean;
Device._meta_.fields["offlinePaymentsAll"] = {};
Device._meta_.fields["offlinePaymentsAll"].type = Boolean;
Device._meta_.fields["offlinePaymentsLimit"] = {};
Device._meta_.fields["offlinePaymentsLimit"].type = Number;
Device._meta_.fields["offlinePaymentsPromptThreshold"] = {};
Device._meta_.fields["offlinePaymentsPromptThreshold"].type = Number;
Device._meta_.fields["offlinePaymentsTotalPaymentsLimit"] = {};
Device._meta_.fields["offlinePaymentsTotalPaymentsLimit"].type = Number;
Device._meta_.fields["offlinePaymentsLimitDefault"] = {};
Device._meta_.fields["offlinePaymentsLimitDefault"].type = Number;
Device._meta_.fields["offlinePaymentsPromptThresholdDefault"] = {};
Device._meta_.fields["offlinePaymentsPromptThresholdDefault"].type = Number;
Device._meta_.fields["offlinePaymentsTotalPaymentsLimitDefault"] = {};
Device._meta_.fields["offlinePaymentsTotalPaymentsLimitDefault"].type = Number;
Device._meta_.fields["offlinePaymentsMaxLimit"] = {};
Device._meta_.fields["offlinePaymentsMaxLimit"].type = Number;
Device._meta_.fields["offlinePaymentsMaxTotalPaymentsLimit"] = {};
Device._meta_.fields["offlinePaymentsMaxTotalPaymentsLimit"].type = Number;
Device._meta_.fields["showOfflinePayments"] = {};
Device._meta_.fields["showOfflinePayments"].type = Boolean;
Device._meta_.fields["maxOfflineDays"] = {};
Device._meta_.fields["maxOfflineDays"].type = Number;
Device._meta_.fields["allowStoreAndForward"] = {};
Device._meta_.fields["allowStoreAndForward"].type = Boolean;
Device._meta_.fields["secureReports"] = {};
Device._meta_.fields["secureReports"].type = Array;
Device._meta_.fields["secureReports"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Device;
}



/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var device_DeviceAccessoryBuildType = __webpack_require__(87);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof device
*/
var DeviceAccessory = function() {
  this._class_ = DeviceAccessory;
  this.id = undefined;
  this.model = undefined;
  this.serial = undefined;
  this.associatedDevice = undefined;
  this.cpuId = undefined;
  this.pedCertificate = undefined;
  this.buildType = undefined;
  this.deviceType = undefined;
  this.versionCode = undefined;
  this.currentRom = undefined;
  this.secureReports = undefined;
  this.createdTime = undefined;
  this.modifiedTime = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.DeviceAccessory
* @param {String} id 
*/
DeviceAccessory.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.DeviceAccessory
* @return {String} 
*/
DeviceAccessory.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {String} model 
*/
DeviceAccessory.prototype.setModel = function(model) {
  this.model = model;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {String} 
*/
DeviceAccessory.prototype.getModel = function() {
  return this.model;
};

/**
* Set the field value
* The accessories' serial number.
*
* @memberof device.DeviceAccessory
* @param {String} serial 
*/
DeviceAccessory.prototype.setSerial = function(serial) {
  this.serial = serial;
};

/**
* Get the field value
* The accessories' serial number.
* @memberof device.DeviceAccessory
* @return {String} 
*/
DeviceAccessory.prototype.getSerial = function() {
  return this.serial;
};

/**
* Set the field value
* The device that this accessory is currently connected to.
*
* @memberof device.DeviceAccessory
* @param {base.Reference} associatedDevice 
*/
DeviceAccessory.prototype.setAssociatedDevice = function(associatedDevice) {
  this.associatedDevice = associatedDevice;
};

/**
* Get the field value
* The device that this accessory is currently connected to.
* @memberof device.DeviceAccessory
* @return {base.Reference} 
*/
DeviceAccessory.prototype.getAssociatedDevice = function() {
  return this.associatedDevice;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {String} cpuId 
*/
DeviceAccessory.prototype.setCpuId = function(cpuId) {
  this.cpuId = cpuId;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {String} 
*/
DeviceAccessory.prototype.getCpuId = function() {
  return this.cpuId;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {String} pedCertificate 
*/
DeviceAccessory.prototype.setPedCertificate = function(pedCertificate) {
  this.pedCertificate = pedCertificate;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {String} 
*/
DeviceAccessory.prototype.getPedCertificate = function() {
  return this.pedCertificate;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {device.DeviceAccessoryBuildType} buildType 
*/
DeviceAccessory.prototype.setBuildType = function(buildType) {
  this.buildType = buildType;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {device.DeviceAccessoryBuildType} 
*/
DeviceAccessory.prototype.getBuildType = function() {
  return this.buildType;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {base.Reference} deviceType 
*/
DeviceAccessory.prototype.setDeviceType = function(deviceType) {
  this.deviceType = deviceType;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {base.Reference} 
*/
DeviceAccessory.prototype.getDeviceType = function() {
  return this.deviceType;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {Number} versionCode must be a long integer
*/
DeviceAccessory.prototype.setVersionCode = function(versionCode) {
  this.versionCode = versionCode;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {Number} must be a long integer
*/
DeviceAccessory.prototype.getVersionCode = function() {
  return this.versionCode;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {base.Reference} currentRom 
*/
DeviceAccessory.prototype.setCurrentRom = function(currentRom) {
  this.currentRom = currentRom;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {base.Reference} 
*/
DeviceAccessory.prototype.getCurrentRom = function() {
  return this.currentRom;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {Array.<base.Reference>} secureReports An array of 
*/
DeviceAccessory.prototype.setSecureReports = function(secureReports) {
  this.secureReports = secureReports;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {Array.<base.Reference>} An array of 
*/
DeviceAccessory.prototype.getSecureReports = function() {
  return this.secureReports;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {Number} createdTime must be a long integer
*/
DeviceAccessory.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {Number} must be a long integer
*/
DeviceAccessory.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof device.DeviceAccessory
* @param {Number} modifiedTime must be a long integer
*/
DeviceAccessory.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* @memberof device.DeviceAccessory
* @return {Number} must be a long integer
*/
DeviceAccessory.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* @memberof device.DeviceAccessory
* @private
*/
DeviceAccessory.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DeviceAccessory.prototype.toString = function() {
  return JSON.stringify(this);
};

DeviceAccessory._meta_ =  {fields:  {}};
DeviceAccessory._meta_._class_ =  DeviceAccessory;
DeviceAccessory._meta_.fields["id"] = {};
DeviceAccessory._meta_.fields["id"].type = String;
DeviceAccessory._meta_.fields["model"] = {};
DeviceAccessory._meta_.fields["model"].type = String;
DeviceAccessory._meta_.fields["serial"] = {};
DeviceAccessory._meta_.fields["serial"].type = String;
DeviceAccessory._meta_.fields["associatedDevice"] = {};
DeviceAccessory._meta_.fields["associatedDevice"].type = base_Reference;
DeviceAccessory._meta_.fields["cpuId"] = {};
DeviceAccessory._meta_.fields["cpuId"].type = String;
DeviceAccessory._meta_.fields["pedCertificate"] = {};
DeviceAccessory._meta_.fields["pedCertificate"].type = String;
DeviceAccessory._meta_.fields["buildType"] = {};
DeviceAccessory._meta_.fields["buildType"].type = device_DeviceAccessoryBuildType;
DeviceAccessory._meta_.fields["deviceType"] = {};
DeviceAccessory._meta_.fields["deviceType"].type = base_Reference;
DeviceAccessory._meta_.fields["versionCode"] = {};
DeviceAccessory._meta_.fields["versionCode"].type = Number;
DeviceAccessory._meta_.fields["currentRom"] = {};
DeviceAccessory._meta_.fields["currentRom"].type = base_Reference;
DeviceAccessory._meta_.fields["secureReports"] = {};
DeviceAccessory._meta_.fields["secureReports"].type = Array;
DeviceAccessory._meta_.fields["secureReports"].elementType = base_Reference;
DeviceAccessory._meta_.fields["createdTime"] = {};
DeviceAccessory._meta_.fields["createdTime"].type = Number;
DeviceAccessory._meta_.fields["modifiedTime"] = {};
DeviceAccessory._meta_.fields["modifiedTime"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = DeviceAccessory;
}



/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var device_DeviceProvisionState = __webpack_require__(88);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof device
*/
var DeviceProvision = function() {
  this._class_ = DeviceProvision;
  this.id = undefined;
  this.deviceRef = undefined;
  this.state = undefined;
  this.lastActivationCode = undefined;
  this.activationCode = undefined;
  this.emailSent = undefined;
  this.hasShipment = undefined;
  this.serialNumber = undefined;
  this.merchant = undefined;
  this.deviceType = undefined;
  this.provisionedTime = undefined;
  this.activatedTime = undefined;
  this.reseller = undefined;
  this.currentRom = undefined;
  this.currentSecureBoardRom = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.DeviceProvision
* @param {String} id 
*/
DeviceProvision.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.DeviceProvision
* @return {String} 
*/
DeviceProvision.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {base.Reference} deviceRef 
*/
DeviceProvision.prototype.setDeviceRef = function(deviceRef) {
  this.deviceRef = deviceRef;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {base.Reference} 
*/
DeviceProvision.prototype.getDeviceRef = function() {
  return this.deviceRef;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {device.DeviceProvisionState} state 
*/
DeviceProvision.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {device.DeviceProvisionState} 
*/
DeviceProvision.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {String} lastActivationCode 
*/
DeviceProvision.prototype.setLastActivationCode = function(lastActivationCode) {
  this.lastActivationCode = lastActivationCode;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {String} 
*/
DeviceProvision.prototype.getLastActivationCode = function() {
  return this.lastActivationCode;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {String} activationCode 
*/
DeviceProvision.prototype.setActivationCode = function(activationCode) {
  this.activationCode = activationCode;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {String} 
*/
DeviceProvision.prototype.getActivationCode = function() {
  return this.activationCode;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {Boolean} emailSent 
*/
DeviceProvision.prototype.setEmailSent = function(emailSent) {
  this.emailSent = emailSent;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {Boolean} 
*/
DeviceProvision.prototype.getEmailSent = function() {
  return this.emailSent;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {Boolean} hasShipment 
*/
DeviceProvision.prototype.setHasShipment = function(hasShipment) {
  this.hasShipment = hasShipment;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {Boolean} 
*/
DeviceProvision.prototype.getHasShipment = function() {
  return this.hasShipment;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {String} serialNumber 
*/
DeviceProvision.prototype.setSerialNumber = function(serialNumber) {
  this.serialNumber = serialNumber;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {String} 
*/
DeviceProvision.prototype.getSerialNumber = function() {
  return this.serialNumber;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {base.Reference} merchant 
*/
DeviceProvision.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {base.Reference} 
*/
DeviceProvision.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {String} deviceType 
*/
DeviceProvision.prototype.setDeviceType = function(deviceType) {
  this.deviceType = deviceType;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {String} 
*/
DeviceProvision.prototype.getDeviceType = function() {
  return this.deviceType;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {Number} provisionedTime must be a long integer
*/
DeviceProvision.prototype.setProvisionedTime = function(provisionedTime) {
  this.provisionedTime = provisionedTime;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {Number} must be a long integer
*/
DeviceProvision.prototype.getProvisionedTime = function() {
  return this.provisionedTime;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {Number} activatedTime must be a long integer
*/
DeviceProvision.prototype.setActivatedTime = function(activatedTime) {
  this.activatedTime = activatedTime;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {Number} must be a long integer
*/
DeviceProvision.prototype.getActivatedTime = function() {
  return this.activatedTime;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {base.Reference} reseller 
*/
DeviceProvision.prototype.setReseller = function(reseller) {
  this.reseller = reseller;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {base.Reference} 
*/
DeviceProvision.prototype.getReseller = function() {
  return this.reseller;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {base.Reference} currentRom 
*/
DeviceProvision.prototype.setCurrentRom = function(currentRom) {
  this.currentRom = currentRom;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {base.Reference} 
*/
DeviceProvision.prototype.getCurrentRom = function() {
  return this.currentRom;
};

/**
* Set the field value
* @memberof device.DeviceProvision
* @param {base.Reference} currentSecureBoardRom 
*/
DeviceProvision.prototype.setCurrentSecureBoardRom = function(currentSecureBoardRom) {
  this.currentSecureBoardRom = currentSecureBoardRom;
};

/**
* Get the field value
* @memberof device.DeviceProvision
* @return {base.Reference} 
*/
DeviceProvision.prototype.getCurrentSecureBoardRom = function() {
  return this.currentSecureBoardRom;
};

/**
* @memberof device.DeviceProvision
* @private
*/
DeviceProvision.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DeviceProvision.prototype.toString = function() {
  return JSON.stringify(this);
};

DeviceProvision._meta_ =  {fields:  {}};
DeviceProvision._meta_._class_ =  DeviceProvision;
DeviceProvision._meta_.fields["id"] = {};
DeviceProvision._meta_.fields["id"].type = String;
DeviceProvision._meta_.fields["deviceRef"] = {};
DeviceProvision._meta_.fields["deviceRef"].type = base_Reference;
DeviceProvision._meta_.fields["state"] = {};
DeviceProvision._meta_.fields["state"].type = device_DeviceProvisionState;
DeviceProvision._meta_.fields["lastActivationCode"] = {};
DeviceProvision._meta_.fields["lastActivationCode"].type = String;
DeviceProvision._meta_.fields["activationCode"] = {};
DeviceProvision._meta_.fields["activationCode"].type = String;
DeviceProvision._meta_.fields["emailSent"] = {};
DeviceProvision._meta_.fields["emailSent"].type = Boolean;
DeviceProvision._meta_.fields["hasShipment"] = {};
DeviceProvision._meta_.fields["hasShipment"].type = Boolean;
DeviceProvision._meta_.fields["serialNumber"] = {};
DeviceProvision._meta_.fields["serialNumber"].type = String;
DeviceProvision._meta_.fields["merchant"] = {};
DeviceProvision._meta_.fields["merchant"].type = base_Reference;
DeviceProvision._meta_.fields["deviceType"] = {};
DeviceProvision._meta_.fields["deviceType"].type = String;
DeviceProvision._meta_.fields["provisionedTime"] = {};
DeviceProvision._meta_.fields["provisionedTime"].type = Number;
DeviceProvision._meta_.fields["activatedTime"] = {};
DeviceProvision._meta_.fields["activatedTime"].type = Number;
DeviceProvision._meta_.fields["reseller"] = {};
DeviceProvision._meta_.fields["reseller"].type = base_Reference;
DeviceProvision._meta_.fields["currentRom"] = {};
DeviceProvision._meta_.fields["currentRom"].type = base_Reference;
DeviceProvision._meta_.fields["currentSecureBoardRom"] = {};
DeviceProvision._meta_.fields["currentSecureBoardRom"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = DeviceProvision;
}



/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/** This is a wrapper calss which holds a list of request uuids */
/**
* @constructor
* @memberof device
*/
var DeviceRequests = function() {
  this._class_ = DeviceRequests;
  this.requestUuids = undefined;
};


/**
* Set the field value
* @memberof device.DeviceRequests
* @param {Array.<String>} requestUuids An array of 
*/
DeviceRequests.prototype.setRequestUuids = function(requestUuids) {
  this.requestUuids = requestUuids;
};

/**
* Get the field value
* @memberof device.DeviceRequests
* @return {Array.<String>} An array of 
*/
DeviceRequests.prototype.getRequestUuids = function() {
  return this.requestUuids;
};

/**
* @memberof device.DeviceRequests
* @private
*/
DeviceRequests.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DeviceRequests.prototype.toString = function() {
  return JSON.stringify(this);
};

DeviceRequests._meta_ =  {fields:  {}};
DeviceRequests._meta_._class_ =  DeviceRequests;
DeviceRequests._meta_.fields["requestUuids"] = {};
DeviceRequests._meta_.fields["requestUuids"].type = Array;

//
// Expose the module.
//
if (true) {
module.exports = DeviceRequests;
}



/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof device
*/
var LimitedDevice = function() {
  this._class_ = LimitedDevice;
  this.id = undefined;
  this.name = undefined;
  this.serial = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.LimitedDevice
* @param {String} id 
*/
LimitedDevice.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.LimitedDevice
* @return {String} 
*/
LimitedDevice.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the device (if entered)
*
* @memberof device.LimitedDevice
* @param {String} name 
*/
LimitedDevice.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the device (if entered)
* @memberof device.LimitedDevice
* @return {String} 
*/
LimitedDevice.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* The device's serial number.
*
* @memberof device.LimitedDevice
* @param {String} serial 
*/
LimitedDevice.prototype.setSerial = function(serial) {
  this.serial = serial;
};

/**
* Get the field value
* The device's serial number.
* @memberof device.LimitedDevice
* @return {String} 
*/
LimitedDevice.prototype.getSerial = function() {
  return this.serial;
};

/**
* @memberof device.LimitedDevice
* @private
*/
LimitedDevice.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

LimitedDevice.prototype.toString = function() {
  return JSON.stringify(this);
};

LimitedDevice._meta_ =  {fields:  {}};
LimitedDevice._meta_._class_ =  LimitedDevice;
LimitedDevice._meta_.fields["id"] = {};
LimitedDevice._meta_.fields["id"].type = String;
LimitedDevice._meta_.fields["name"] = {};
LimitedDevice._meta_.fields["name"].type = String;
LimitedDevice._meta_.fields["serial"] = {};
LimitedDevice._meta_.fields["serial"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = LimitedDevice;
}



/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var device_RomBuildType = __webpack_require__(89);

/**
* @constructor
* @memberof device
*/
var Rom = function() {
  this._class_ = Rom;
  this.id = undefined;
  this.createdAt = undefined;
  this.version = undefined;
  this.versionName = undefined;
  this.description = undefined;
  this.buildType = undefined;
  this.isCritical = undefined;
  this.published = undefined;
  this.enabled = undefined;
  this.associationTime = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.Rom
* @param {String} id 
*/
Rom.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.Rom
* @return {String} 
*/
Rom.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* When the ROM was created
*
* @memberof device.Rom
* @param {Number} createdAt must be a long integer
*/
Rom.prototype.setCreatedAt = function(createdAt) {
  this.createdAt = createdAt;
};

/**
* Get the field value
* When the ROM was created
* @memberof device.Rom
* @return {Number} must be a long integer
*/
Rom.prototype.getCreatedAt = function() {
  return this.createdAt;
};

/**
* Set the field value
* @memberof device.Rom
* @param {Number} version must be a long integer
*/
Rom.prototype.setVersion = function(version) {
  this.version = version;
};

/**
* Get the field value
* @memberof device.Rom
* @return {Number} must be a long integer
*/
Rom.prototype.getVersion = function() {
  return this.version;
};

/**
* Set the field value
* @memberof device.Rom
* @param {String} versionName 
*/
Rom.prototype.setVersionName = function(versionName) {
  this.versionName = versionName;
};

/**
* Get the field value
* @memberof device.Rom
* @return {String} 
*/
Rom.prototype.getVersionName = function() {
  return this.versionName;
};

/**
* Set the field value
* @memberof device.Rom
* @param {String} description 
*/
Rom.prototype.setDescription = function(description) {
  this.description = description;
};

/**
* Get the field value
* @memberof device.Rom
* @return {String} 
*/
Rom.prototype.getDescription = function() {
  return this.description;
};

/**
* Set the field value
* @memberof device.Rom
* @param {device.RomBuildType} buildType 
*/
Rom.prototype.setBuildType = function(buildType) {
  this.buildType = buildType;
};

/**
* Get the field value
* @memberof device.Rom
* @return {device.RomBuildType} 
*/
Rom.prototype.getBuildType = function() {
  return this.buildType;
};

/**
* Set the field value
* @memberof device.Rom
* @param {Boolean} isCritical 
*/
Rom.prototype.setIsCritical = function(isCritical) {
  this.isCritical = isCritical;
};

/**
* Get the field value
* @memberof device.Rom
* @return {Boolean} 
*/
Rom.prototype.getIsCritical = function() {
  return this.isCritical;
};

/**
* Set the field value
* @memberof device.Rom
* @param {Boolean} published 
*/
Rom.prototype.setPublished = function(published) {
  this.published = published;
};

/**
* Get the field value
* @memberof device.Rom
* @return {Boolean} 
*/
Rom.prototype.getPublished = function() {
  return this.published;
};

/**
* Set the field value
* @memberof device.Rom
* @param {Boolean} enabled 
*/
Rom.prototype.setEnabled = function(enabled) {
  this.enabled = enabled;
};

/**
* Get the field value
* @memberof device.Rom
* @return {Boolean} 
*/
Rom.prototype.getEnabled = function() {
  return this.enabled;
};

/**
* Set the field value
* When the ROM was associated with a merchant group
*
* @memberof device.Rom
* @param {Number} associationTime must be a long integer
*/
Rom.prototype.setAssociationTime = function(associationTime) {
  this.associationTime = associationTime;
};

/**
* Get the field value
* When the ROM was associated with a merchant group
* @memberof device.Rom
* @return {Number} must be a long integer
*/
Rom.prototype.getAssociationTime = function() {
  return this.associationTime;
};

/**
* @memberof device.Rom
* @private
*/
Rom.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Rom.prototype.toString = function() {
  return JSON.stringify(this);
};

Rom._meta_ =  {fields:  {}};
Rom._meta_._class_ =  Rom;
Rom._meta_.fields["id"] = {};
Rom._meta_.fields["id"].type = String;
Rom._meta_.fields["createdAt"] = {};
Rom._meta_.fields["createdAt"].type = Number;
Rom._meta_.fields["version"] = {};
Rom._meta_.fields["version"].type = Number;
Rom._meta_.fields["versionName"] = {};
Rom._meta_.fields["versionName"].type = String;
Rom._meta_.fields["description"] = {};
Rom._meta_.fields["description"].type = String;
Rom._meta_.fields["buildType"] = {};
Rom._meta_.fields["buildType"].type = device_RomBuildType;
Rom._meta_.fields["isCritical"] = {};
Rom._meta_.fields["isCritical"].type = Boolean;
Rom._meta_.fields["published"] = {};
Rom._meta_.fields["published"].type = Boolean;
Rom._meta_.fields["enabled"] = {};
Rom._meta_.fields["enabled"].type = Boolean;
Rom._meta_.fields["associationTime"] = {};
Rom._meta_.fields["associationTime"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Rom;
}



/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof device
*/
var SwapRequestEvent = function() {
  this._class_ = SwapRequestEvent;
  this.id = undefined;
  this.type = undefined;
  this.serialNumber = undefined;
  this.createdTime = undefined;
  this.merchant = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof device.SwapRequestEvent
* @param {String} id 
*/
SwapRequestEvent.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof device.SwapRequestEvent
* @return {String} 
*/
SwapRequestEvent.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof device.SwapRequestEvent
* @param {String} type 
*/
SwapRequestEvent.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof device.SwapRequestEvent
* @return {String} 
*/
SwapRequestEvent.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* @memberof device.SwapRequestEvent
* @param {String} serialNumber 
*/
SwapRequestEvent.prototype.setSerialNumber = function(serialNumber) {
  this.serialNumber = serialNumber;
};

/**
* Get the field value
* @memberof device.SwapRequestEvent
* @return {String} 
*/
SwapRequestEvent.prototype.getSerialNumber = function() {
  return this.serialNumber;
};

/**
* Set the field value
* @memberof device.SwapRequestEvent
* @param {Number} createdTime must be a long integer
*/
SwapRequestEvent.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof device.SwapRequestEvent
* @return {Number} must be a long integer
*/
SwapRequestEvent.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof device.SwapRequestEvent
* @param {base.Reference} merchant 
*/
SwapRequestEvent.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof device.SwapRequestEvent
* @return {base.Reference} 
*/
SwapRequestEvent.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* @memberof device.SwapRequestEvent
* @private
*/
SwapRequestEvent.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

SwapRequestEvent.prototype.toString = function() {
  return JSON.stringify(this);
};

SwapRequestEvent._meta_ =  {fields:  {}};
SwapRequestEvent._meta_._class_ =  SwapRequestEvent;
SwapRequestEvent._meta_.fields["id"] = {};
SwapRequestEvent._meta_.fields["id"].type = String;
SwapRequestEvent._meta_.fields["type"] = {};
SwapRequestEvent._meta_.fields["type"].type = String;
SwapRequestEvent._meta_.fields["serialNumber"] = {};
SwapRequestEvent._meta_.fields["serialNumber"].type = String;
SwapRequestEvent._meta_.fields["createdTime"] = {};
SwapRequestEvent._meta_.fields["createdTime"].type = Number;
SwapRequestEvent._meta_.fields["merchant"] = {};
SwapRequestEvent._meta_.fields["merchant"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = SwapRequestEvent;
}



/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.employees = employees;
/**
* @namespace employees
*/
function employees() {}


employees.AccountRole = __webpack_require__(44);
employees.Employee = __webpack_require__(90);
employees.EmployeeCard = __webpack_require__(193);
employees.EmployeeCardStatus = __webpack_require__(91);
employees.Permission = __webpack_require__(92);
employees.PermissionSet = __webpack_require__(194);
employees.PermissionSetRole = __webpack_require__(195);
employees.Permissions = __webpack_require__(93);
employees.Role = __webpack_require__(196);
employees.Shift = __webpack_require__(197);

//
// Expose the module.
//
if (true) {
  module.exports = employees;
}
    

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var employees_EmployeeCardStatus = __webpack_require__(91);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof employees
*/
var EmployeeCard = function() {
  this._class_ = EmployeeCard;
  this.id = undefined;
  this.merchant = undefined;
  this.employee = undefined;
  this.updater = undefined;
  this.number = undefined;
  this.status = undefined;
  this.createdTime = undefined;
  this.modifiedTime = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.EmployeeCard
* @param {String} id 
*/
EmployeeCard.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.EmployeeCard
* @return {String} 
*/
EmployeeCard.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The merchant the card belongs to
*
* @memberof employees.EmployeeCard
* @param {base.Reference} merchant 
*/
EmployeeCard.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* The merchant the card belongs to
* @memberof employees.EmployeeCard
* @return {base.Reference} 
*/
EmployeeCard.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* The employee who the card is currently assigned to
*
* @memberof employees.EmployeeCard
* @param {base.Reference} employee 
*/
EmployeeCard.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee who the card is currently assigned to
* @memberof employees.EmployeeCard
* @return {base.Reference} 
*/
EmployeeCard.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* The employee who last updated the card's state
*
* @memberof employees.EmployeeCard
* @param {base.Reference} updater 
*/
EmployeeCard.prototype.setUpdater = function(updater) {
  this.updater = updater;
};

/**
* Get the field value
* The employee who last updated the card's state
* @memberof employees.EmployeeCard
* @return {base.Reference} 
*/
EmployeeCard.prototype.getUpdater = function() {
  return this.updater;
};

/**
* Set the field value
* Unique number on the employee card.
*
* @memberof employees.EmployeeCard
* @param {String} number 
*/
EmployeeCard.prototype.setNumber = function(number) {
  this.number = number;
};

/**
* Get the field value
* Unique number on the employee card.
* @memberof employees.EmployeeCard
* @return {String} 
*/
EmployeeCard.prototype.getNumber = function() {
  return this.number;
};

/**
* Set the field value
* Current status of the employee card
*
* @memberof employees.EmployeeCard
* @param {employees.EmployeeCardStatus} status 
*/
EmployeeCard.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* Current status of the employee card
* @memberof employees.EmployeeCard
* @return {employees.EmployeeCardStatus} 
*/
EmployeeCard.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* Timestamp of when this employee card was created
*
* @memberof employees.EmployeeCard
* @param {Number} createdTime must be a long integer
*/
EmployeeCard.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* Timestamp of when this employee card was created
* @memberof employees.EmployeeCard
* @return {Number} must be a long integer
*/
EmployeeCard.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* Timestamp of when this employee card was last updated
*
* @memberof employees.EmployeeCard
* @param {Number} modifiedTime must be a long integer
*/
EmployeeCard.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* Timestamp of when this employee card was last updated
* @memberof employees.EmployeeCard
* @return {Number} must be a long integer
*/
EmployeeCard.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* @memberof employees.EmployeeCard
* @private
*/
EmployeeCard.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

EmployeeCard.prototype.toString = function() {
  return JSON.stringify(this);
};

EmployeeCard._meta_ =  {fields:  {}};
EmployeeCard._meta_._class_ =  EmployeeCard;
EmployeeCard._meta_.fields["id"] = {};
EmployeeCard._meta_.fields["id"].type = String;
EmployeeCard._meta_.fields["merchant"] = {};
EmployeeCard._meta_.fields["merchant"].type = base_Reference;
EmployeeCard._meta_.fields["employee"] = {};
EmployeeCard._meta_.fields["employee"].type = base_Reference;
EmployeeCard._meta_.fields["updater"] = {};
EmployeeCard._meta_.fields["updater"].type = base_Reference;
EmployeeCard._meta_.fields["number"] = {};
EmployeeCard._meta_.fields["number"].type = String;
EmployeeCard._meta_.fields["status"] = {};
EmployeeCard._meta_.fields["status"].type = employees_EmployeeCardStatus;
EmployeeCard._meta_.fields["createdTime"] = {};
EmployeeCard._meta_.fields["createdTime"].type = Number;
EmployeeCard._meta_.fields["modifiedTime"] = {};
EmployeeCard._meta_.fields["modifiedTime"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = EmployeeCard;
}



/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);
var employees_Permissions = __webpack_require__(93);

/**
* @constructor
* @memberof employees
*/
var PermissionSet = function() {
  this._class_ = PermissionSet;
  this.id = undefined;
  this.name = undefined;
  this.label = undefined;
  this.app = undefined;
  this.employeeDefault = undefined;
  this.managerDefault = undefined;
  this.permissions = undefined;
  this.roles = undefined;
  this.module = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.PermissionSet
* @param {String} id 
*/
PermissionSet.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.PermissionSet
* @return {String} 
*/
PermissionSet.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Key of the permissionSet
*
* @memberof employees.PermissionSet
* @param {String} name 
*/
PermissionSet.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Key of the permissionSet
* @memberof employees.PermissionSet
* @return {String} 
*/
PermissionSet.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Label of the permissionSet
*
* @memberof employees.PermissionSet
* @param {String} label 
*/
PermissionSet.prototype.setLabel = function(label) {
  this.label = label;
};

/**
* Get the field value
* Label of the permissionSet
* @memberof employees.PermissionSet
* @return {String} 
*/
PermissionSet.prototype.getLabel = function() {
  return this.label;
};

/**
* Set the field value
* @memberof employees.PermissionSet
* @param {base.Reference} app 
*/
PermissionSet.prototype.setApp = function(app) {
  this.app = app;
};

/**
* Get the field value
* @memberof employees.PermissionSet
* @return {base.Reference} 
*/
PermissionSet.prototype.getApp = function() {
  return this.app;
};

/**
* Set the field value
* @memberof employees.PermissionSet
* @param {Boolean} employeeDefault 
*/
PermissionSet.prototype.setEmployeeDefault = function(employeeDefault) {
  this.employeeDefault = employeeDefault;
};

/**
* Get the field value
* @memberof employees.PermissionSet
* @return {Boolean} 
*/
PermissionSet.prototype.getEmployeeDefault = function() {
  return this.employeeDefault;
};

/**
* Set the field value
* @memberof employees.PermissionSet
* @param {Boolean} managerDefault 
*/
PermissionSet.prototype.setManagerDefault = function(managerDefault) {
  this.managerDefault = managerDefault;
};

/**
* Get the field value
* @memberof employees.PermissionSet
* @return {Boolean} 
*/
PermissionSet.prototype.getManagerDefault = function() {
  return this.managerDefault;
};

/**
* Set the field value
* Bitmap of permissions
*
* @memberof employees.PermissionSet
* @param {employees.Permissions} permissions 
*/
PermissionSet.prototype.setPermissions = function(permissions) {
  this.permissions = permissions;
};

/**
* Get the field value
* Bitmap of permissions
* @memberof employees.PermissionSet
* @return {employees.Permissions} 
*/
PermissionSet.prototype.getPermissions = function() {
  return this.permissions;
};

/**
* Set the field value
* roles enabled for this merchant
*
* @memberof employees.PermissionSet
* @param {Array.<base.Reference>} roles An array of 
*/
PermissionSet.prototype.setRoles = function(roles) {
  this.roles = roles;
};

/**
* Get the field value
* roles enabled for this merchant
* @memberof employees.PermissionSet
* @return {Array.<base.Reference>} An array of 
*/
PermissionSet.prototype.getRoles = function() {
  return this.roles;
};

/**
* Set the field value
* The module associated with this permission set (if any)
*
* @memberof employees.PermissionSet
* @param {base.Reference} module 
*/
PermissionSet.prototype.setModule = function(module) {
  this.module = module;
};

/**
* Get the field value
* The module associated with this permission set (if any)
* @memberof employees.PermissionSet
* @return {base.Reference} 
*/
PermissionSet.prototype.getModule = function() {
  return this.module;
};

/**
* @memberof employees.PermissionSet
* @private
*/
PermissionSet.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PermissionSet.prototype.toString = function() {
  return JSON.stringify(this);
};

PermissionSet._meta_ =  {fields:  {}};
PermissionSet._meta_._class_ =  PermissionSet;
PermissionSet._meta_.fields["id"] = {};
PermissionSet._meta_.fields["id"].type = String;
PermissionSet._meta_.fields["name"] = {};
PermissionSet._meta_.fields["name"].type = String;
PermissionSet._meta_.fields["label"] = {};
PermissionSet._meta_.fields["label"].type = String;
PermissionSet._meta_.fields["app"] = {};
PermissionSet._meta_.fields["app"].type = base_Reference;
PermissionSet._meta_.fields["employeeDefault"] = {};
PermissionSet._meta_.fields["employeeDefault"].type = Boolean;
PermissionSet._meta_.fields["managerDefault"] = {};
PermissionSet._meta_.fields["managerDefault"].type = Boolean;
PermissionSet._meta_.fields["permissions"] = {};
PermissionSet._meta_.fields["permissions"].type = employees_Permissions;
PermissionSet._meta_.fields["roles"] = {};
PermissionSet._meta_.fields["roles"].type = Array;
PermissionSet._meta_.fields["roles"].elementType = base_Reference;
PermissionSet._meta_.fields["module"] = {};
PermissionSet._meta_.fields["module"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = PermissionSet;
}



/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof employees
*/
var PermissionSetRole = function() {
  this._class_ = PermissionSetRole;
  this.id = undefined;
  this.role = undefined;
  this.permissionSet = undefined;
  this.modified_time = undefined;
  this.deleted_time = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.PermissionSetRole
* @param {String} id 
*/
PermissionSetRole.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.PermissionSetRole
* @return {String} 
*/
PermissionSetRole.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The role
*
* @memberof employees.PermissionSetRole
* @param {base.Reference} role 
*/
PermissionSetRole.prototype.setRole = function(role) {
  this.role = role;
};

/**
* Get the field value
* The role
* @memberof employees.PermissionSetRole
* @return {base.Reference} 
*/
PermissionSetRole.prototype.getRole = function() {
  return this.role;
};

/**
* Set the field value
* The role
*
* @memberof employees.PermissionSetRole
* @param {base.Reference} permissionSet 
*/
PermissionSetRole.prototype.setPermissionSet = function(permissionSet) {
  this.permissionSet = permissionSet;
};

/**
* Get the field value
* The role
* @memberof employees.PermissionSetRole
* @return {base.Reference} 
*/
PermissionSetRole.prototype.getPermissionSet = function() {
  return this.permissionSet;
};

/**
* Set the field value
* @memberof employees.PermissionSetRole
* @param {Number} modified_time must be a long integer
*/
PermissionSetRole.prototype.setModifiedTime = function(modified_time) {
  this.modified_time = modified_time;
};

/**
* Get the field value
* @memberof employees.PermissionSetRole
* @return {Number} must be a long integer
*/
PermissionSetRole.prototype.getModifiedTime = function() {
  return this.modified_time;
};

/**
* Set the field value
* @memberof employees.PermissionSetRole
* @param {Null|Number} deleted_time must be a long integer
*/
PermissionSetRole.prototype.setDeletedTime = function(deleted_time) {
  this.deleted_time = deleted_time;
};

/**
* Get the field value
* @memberof employees.PermissionSetRole
* @return {Null|Number} must be a long integer
*/
PermissionSetRole.prototype.getDeletedTime = function() {
  return this.deleted_time;
};

/**
* @memberof employees.PermissionSetRole
* @private
*/
PermissionSetRole.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PermissionSetRole.prototype.toString = function() {
  return JSON.stringify(this);
};

PermissionSetRole._meta_ =  {fields:  {}};
PermissionSetRole._meta_._class_ =  PermissionSetRole;
PermissionSetRole._meta_.fields["id"] = {};
PermissionSetRole._meta_.fields["id"].type = String;
PermissionSetRole._meta_.fields["role"] = {};
PermissionSetRole._meta_.fields["role"].type = base_Reference;
PermissionSetRole._meta_.fields["permissionSet"] = {};
PermissionSetRole._meta_.fields["permissionSet"].type = base_Reference;
PermissionSetRole._meta_.fields["modified_time"] = {};
PermissionSetRole._meta_.fields["modified_time"].type = Number;
PermissionSetRole._meta_.fields["deleted_time"] = {};
PermissionSetRole._meta_.fields["deleted_time"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = PermissionSetRole;
}



/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var employees_AccountRole = __webpack_require__(44);
var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof employees
*/
var Role = function() {
  this._class_ = Role;
  this.id = undefined;
  this.name = undefined;
  this.systemRole = undefined;
  this.employeesRef = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.Role
* @param {String} id 
*/
Role.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.Role
* @return {String} 
*/
Role.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Full name of the role
*
* @memberof employees.Role
* @param {String} name 
*/
Role.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Full name of the role
* @memberof employees.Role
* @return {String} 
*/
Role.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Base System Role
*
* @memberof employees.Role
* @param {employees.AccountRole} systemRole 
*/
Role.prototype.setSystemRole = function(systemRole) {
  this.systemRole = systemRole;
};

/**
* Get the field value
* Base System Role
* @memberof employees.Role
* @return {employees.AccountRole} 
*/
Role.prototype.getSystemRole = function() {
  return this.systemRole;
};

/**
* Set the field value
* employees with this role
*
* @memberof employees.Role
* @param {Array.<base.Reference>} employeesRef An array of 
*/
Role.prototype.setEmployeesRef = function(employeesRef) {
  this.employeesRef = employeesRef;
};

/**
* Get the field value
* employees with this role
* @memberof employees.Role
* @return {Array.<base.Reference>} An array of 
*/
Role.prototype.getEmployeesRef = function() {
  return this.employeesRef;
};

/**
* @memberof employees.Role
* @private
*/
Role.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Role.prototype.toString = function() {
  return JSON.stringify(this);
};

Role._meta_ =  {fields:  {}};
Role._meta_._class_ =  Role;
Role._meta_.fields["id"] = {};
Role._meta_.fields["id"].type = String;
Role._meta_.fields["name"] = {};
Role._meta_.fields["name"].type = String;
Role._meta_.fields["systemRole"] = {};
Role._meta_.fields["systemRole"].type = employees_AccountRole;
Role._meta_.fields["employeesRef"] = {};
Role._meta_.fields["employeesRef"].type = Array;
Role._meta_.fields["employeesRef"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = Role;
}



/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var employees_Employee = __webpack_require__(90);

/**
* @constructor
* @memberof employees
*/
var Shift = function() {
  this._class_ = Shift;
  this.id = undefined;
  this.employee = undefined;
  this.cashTipsCollected = undefined;
  this.serverBanking = undefined;
  this.inTime = undefined;
  this.overrideInTime = undefined;
  this.overrideInEmployee = undefined;
  this.outTime = undefined;
  this.overrideOutTime = undefined;
  this.overrideOutEmployee = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof employees.Shift
* @param {String} id 
*/
Shift.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof employees.Shift
* @return {String} 
*/
Shift.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The employee that worked this shift
*
* @memberof employees.Shift
* @param {employees.Employee} employee 
*/
Shift.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* The employee that worked this shift
* @memberof employees.Shift
* @return {employees.Employee} 
*/
Shift.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* Amount of cash tips collected
*
* @memberof employees.Shift
* @param {Number} cashTipsCollected must be a long integer
*/
Shift.prototype.setCashTipsCollected = function(cashTipsCollected) {
  this.cashTipsCollected = cashTipsCollected;
};

/**
* Get the field value
* Amount of cash tips collected
* @memberof employees.Shift
* @return {Number} must be a long integer
*/
Shift.prototype.getCashTipsCollected = function() {
  return this.cashTipsCollected;
};

/**
* Set the field value
* Whether the employee used server banking
*
* @memberof employees.Shift
* @param {Boolean} serverBanking 
*/
Shift.prototype.setServerBanking = function(serverBanking) {
  this.serverBanking = serverBanking;
};

/**
* Get the field value
* Whether the employee used server banking
* @memberof employees.Shift
* @return {Boolean} 
*/
Shift.prototype.getServerBanking = function() {
  return this.serverBanking;
};

/**
* Set the field value
* Clock in time
*
* @memberof employees.Shift
* @param {Number} inTime must be a long integer
*/
Shift.prototype.setInTime = function(inTime) {
  this.inTime = inTime;
};

/**
* Get the field value
* Clock in time
* @memberof employees.Shift
* @return {Number} must be a long integer
*/
Shift.prototype.getInTime = function() {
  return this.inTime;
};

/**
* Set the field value
* Overridden clock in time
*
* @memberof employees.Shift
* @param {Number} overrideInTime must be a long integer
*/
Shift.prototype.setOverrideInTime = function(overrideInTime) {
  this.overrideInTime = overrideInTime;
};

/**
* Get the field value
* Overridden clock in time
* @memberof employees.Shift
* @return {Number} must be a long integer
*/
Shift.prototype.getOverrideInTime = function() {
  return this.overrideInTime;
};

/**
* Set the field value
* The employee who overrode the clock in time
*
* @memberof employees.Shift
* @param {employees.Employee} overrideInEmployee 
*/
Shift.prototype.setOverrideInEmployee = function(overrideInEmployee) {
  this.overrideInEmployee = overrideInEmployee;
};

/**
* Get the field value
* The employee who overrode the clock in time
* @memberof employees.Shift
* @return {employees.Employee} 
*/
Shift.prototype.getOverrideInEmployee = function() {
  return this.overrideInEmployee;
};

/**
* Set the field value
* Clock out time
*
* @memberof employees.Shift
* @param {Number} outTime must be a long integer
*/
Shift.prototype.setOutTime = function(outTime) {
  this.outTime = outTime;
};

/**
* Get the field value
* Clock out time
* @memberof employees.Shift
* @return {Number} must be a long integer
*/
Shift.prototype.getOutTime = function() {
  return this.outTime;
};

/**
* Set the field value
* Overridden clock out time
*
* @memberof employees.Shift
* @param {Number} overrideOutTime must be a long integer
*/
Shift.prototype.setOverrideOutTime = function(overrideOutTime) {
  this.overrideOutTime = overrideOutTime;
};

/**
* Get the field value
* Overridden clock out time
* @memberof employees.Shift
* @return {Number} must be a long integer
*/
Shift.prototype.getOverrideOutTime = function() {
  return this.overrideOutTime;
};

/**
* Set the field value
* The employee who overrode the clock out time
*
* @memberof employees.Shift
* @param {employees.Employee} overrideOutEmployee 
*/
Shift.prototype.setOverrideOutEmployee = function(overrideOutEmployee) {
  this.overrideOutEmployee = overrideOutEmployee;
};

/**
* Get the field value
* The employee who overrode the clock out time
* @memberof employees.Shift
* @return {employees.Employee} 
*/
Shift.prototype.getOverrideOutEmployee = function() {
  return this.overrideOutEmployee;
};

/**
* @memberof employees.Shift
* @private
*/
Shift.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Shift.prototype.toString = function() {
  return JSON.stringify(this);
};

Shift._meta_ =  {fields:  {}};
Shift._meta_._class_ =  Shift;
Shift._meta_.fields["id"] = {};
Shift._meta_.fields["id"].type = String;
Shift._meta_.fields["employee"] = {};
Shift._meta_.fields["employee"].type = employees_Employee;
Shift._meta_.fields["cashTipsCollected"] = {};
Shift._meta_.fields["cashTipsCollected"].type = Number;
Shift._meta_.fields["serverBanking"] = {};
Shift._meta_.fields["serverBanking"].type = Boolean;
Shift._meta_.fields["inTime"] = {};
Shift._meta_.fields["inTime"].type = Number;
Shift._meta_.fields["overrideInTime"] = {};
Shift._meta_.fields["overrideInTime"].type = Number;
Shift._meta_.fields["overrideInEmployee"] = {};
Shift._meta_.fields["overrideInEmployee"].type = employees_Employee;
Shift._meta_.fields["outTime"] = {};
Shift._meta_.fields["outTime"].type = Number;
Shift._meta_.fields["overrideOutTime"] = {};
Shift._meta_.fields["overrideOutTime"].type = Number;
Shift._meta_.fields["overrideOutEmployee"] = {};
Shift._meta_.fields["overrideOutEmployee"].type = employees_Employee;

//
// Expose the module.
//
if (true) {
module.exports = Shift;
}



/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.hours = hours;
/**
* @namespace hours
*/
function hours() {}


hours.HourRange = __webpack_require__(94);
hours.HoursSet = __webpack_require__(95);
hours.Reference = __webpack_require__(96);
hours.ReferenceType = __webpack_require__(97);

//
// Expose the module.
//
if (true) {
  module.exports = hours;
}
    

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.inventory = inventory;
/**
* @namespace inventory
*/
function inventory() {}


inventory.Attribute = __webpack_require__(200);
inventory.Category = __webpack_require__(24);
inventory.CategoryItem = __webpack_require__(201);
inventory.DataAssociation = __webpack_require__(202);
inventory.Discount = __webpack_require__(203);
inventory.Item = __webpack_require__(18);
inventory.ItemGroup = __webpack_require__(204);
inventory.ItemModifierGroup = __webpack_require__(205);
inventory.ItemStock = __webpack_require__(98);
inventory.Modifier = __webpack_require__(46);
inventory.ModifierGroup = __webpack_require__(26);
inventory.ModifierGroupArray = __webpack_require__(206);
inventory.Option = __webpack_require__(45);
inventory.OptionItem = __webpack_require__(207);
inventory.PriceType = __webpack_require__(99);
inventory.Tag = __webpack_require__(27);
inventory.TagItem = __webpack_require__(208);
inventory.TagPrinter = __webpack_require__(209);
inventory.TaxRate = __webpack_require__(25);
inventory.TaxRateItem = __webpack_require__(210);

//
// Expose the module.
//
if (true) {
  module.exports = inventory;
}
    

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);
var inventory_Option = __webpack_require__(45);

/**
* @constructor
* @memberof inventory
*/
var Attribute = function() {
  this._class_ = Attribute;
  this.id = undefined;
  this.name = undefined;
  this.itemGroup = undefined;
  this.options = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Attribute
* @param {String} id 
*/
Attribute.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Attribute
* @return {String} 
*/
Attribute.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of this attribute
*
* @memberof inventory.Attribute
* @param {String} name 
*/
Attribute.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of this attribute
* @memberof inventory.Attribute
* @return {String} 
*/
Attribute.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* The item group this attribute belongs to
*
* @memberof inventory.Attribute
* @param {base.Reference} itemGroup 
*/
Attribute.prototype.setItemGroup = function(itemGroup) {
  this.itemGroup = itemGroup;
};

/**
* Get the field value
* The item group this attribute belongs to
* @memberof inventory.Attribute
* @return {base.Reference} 
*/
Attribute.prototype.getItemGroup = function() {
  return this.itemGroup;
};

/**
* Set the field value
* Options associated with this attribute
*
* @memberof inventory.Attribute
* @param {Array.<inventory.Option>} options An array of 
*/
Attribute.prototype.setOptions = function(options) {
  this.options = options;
};

/**
* Get the field value
* Options associated with this attribute
* @memberof inventory.Attribute
* @return {Array.<inventory.Option>} An array of 
*/
Attribute.prototype.getOptions = function() {
  return this.options;
};

/**
* @memberof inventory.Attribute
* @private
*/
Attribute.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Attribute.prototype.toString = function() {
  return JSON.stringify(this);
};

Attribute._meta_ =  {fields:  {}};
Attribute._meta_._class_ =  Attribute;
Attribute._meta_.fields["id"] = {};
Attribute._meta_.fields["id"].type = String;
Attribute._meta_.fields["name"] = {};
Attribute._meta_.fields["name"].type = String;
Attribute._meta_.fields["itemGroup"] = {};
Attribute._meta_.fields["itemGroup"].type = base_Reference;
Attribute._meta_.fields["options"] = {};
Attribute._meta_.fields["options"].type = Array;
Attribute._meta_.fields["options"].elementType = inventory_Option;

//
// Expose the module.
//
if (true) {
module.exports = Attribute;
}



/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_Item = __webpack_require__(18);
var inventory_Category = __webpack_require__(24);

/**
* @constructor
* @memberof inventory
*/
var CategoryItem = function() {
  this._class_ = CategoryItem;
  this.item = undefined;
  this.category = undefined;
};


/**
* Set the field value
* @memberof inventory.CategoryItem
* @param {inventory.Item} item 
*/
CategoryItem.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* @memberof inventory.CategoryItem
* @return {inventory.Item} 
*/
CategoryItem.prototype.getItem = function() {
  return this.item;
};

/**
* Set the field value
* @memberof inventory.CategoryItem
* @param {inventory.Category} category 
*/
CategoryItem.prototype.setCategory = function(category) {
  this.category = category;
};

/**
* Get the field value
* @memberof inventory.CategoryItem
* @return {inventory.Category} 
*/
CategoryItem.prototype.getCategory = function() {
  return this.category;
};

/**
* @memberof inventory.CategoryItem
* @private
*/
CategoryItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CategoryItem.prototype.toString = function() {
  return JSON.stringify(this);
};

CategoryItem._meta_ =  {fields:  {}};
CategoryItem._meta_._class_ =  CategoryItem;
CategoryItem._meta_.fields["item"] = {};
CategoryItem._meta_.fields["item"].type = inventory_Item;
CategoryItem._meta_.fields["category"] = {};
CategoryItem._meta_.fields["category"].type = inventory_Category;

//
// Expose the module.
//
if (true) {
module.exports = CategoryItem;
}



/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var DataAssociation = function() {
  this._class_ = DataAssociation;
  this.primary = undefined;
  this.secondary = undefined;
  this.payload = undefined;
};


/**
* Set the field value
* The primary object in an association, e.g., 'Item' in an 'Item - Tax Rate' association
*
* @memberof inventory.DataAssociation
* @param {base.Reference} primary 
*/
DataAssociation.prototype.setPrimary = function(primary) {
  this.primary = primary;
};

/**
* Get the field value
* The primary object in an association, e.g., 'Item' in an 'Item - Tax Rate' association
* @memberof inventory.DataAssociation
* @return {base.Reference} 
*/
DataAssociation.prototype.getPrimary = function() {
  return this.primary;
};

/**
* Set the field value
* The secondary object in an association, e.g., 'Tax Rate' in an 'Item - Tax Rate' association
*
* @memberof inventory.DataAssociation
* @param {base.Reference} secondary 
*/
DataAssociation.prototype.setSecondary = function(secondary) {
  this.secondary = secondary;
};

/**
* Get the field value
* The secondary object in an association, e.g., 'Tax Rate' in an 'Item - Tax Rate' association
* @memberof inventory.DataAssociation
* @return {base.Reference} 
*/
DataAssociation.prototype.getSecondary = function() {
  return this.secondary;
};

/**
* Set the field value
* Serialized data related to the propagation, e.g. an update map.
*
* @memberof inventory.DataAssociation
* @param {String} payload 
*/
DataAssociation.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Serialized data related to the propagation, e.g. an update map.
* @memberof inventory.DataAssociation
* @return {String} 
*/
DataAssociation.prototype.getPayload = function() {
  return this.payload;
};

/**
* @memberof inventory.DataAssociation
* @private
*/
DataAssociation.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DataAssociation.prototype.toString = function() {
  return JSON.stringify(this);
};

DataAssociation._meta_ =  {fields:  {}};
DataAssociation._meta_._class_ =  DataAssociation;
DataAssociation._meta_.fields["primary"] = {};
DataAssociation._meta_.fields["primary"].type = base_Reference;
DataAssociation._meta_.fields["secondary"] = {};
DataAssociation._meta_.fields["secondary"].type = base_Reference;
DataAssociation._meta_.fields["payload"] = {};
DataAssociation._meta_.fields["payload"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DataAssociation;
}



/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof inventory
*/
var Discount = function() {
  this._class_ = Discount;
  this.id = undefined;
  this.name = undefined;
  this.amount = undefined;
  this.percentage = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.Discount
* @param {String} id 
*/
Discount.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.Discount
* @return {String} 
*/
Discount.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the discount
*
* @memberof inventory.Discount
* @param {String} name 
*/
Discount.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the discount
* @memberof inventory.Discount
* @return {String} 
*/
Discount.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
*
* @memberof inventory.Discount
* @param {Null|Number} amount must be a long integer
*/
Discount.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
* @memberof inventory.Discount
* @return {Null|Number} must be a long integer
*/
Discount.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Discount amount in percent
*
* @memberof inventory.Discount
* @param {Null|Number} percentage must be a long integer
*/
Discount.prototype.setPercentage = function(percentage) {
  this.percentage = percentage;
};

/**
* Get the field value
* Discount amount in percent
* @memberof inventory.Discount
* @return {Null|Number} must be a long integer
*/
Discount.prototype.getPercentage = function() {
  return this.percentage;
};

/**
* @memberof inventory.Discount
* @private
*/
Discount.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Discount.prototype.toString = function() {
  return JSON.stringify(this);
};

Discount._meta_ =  {fields:  {}};
Discount._meta_._class_ =  Discount;
Discount._meta_.fields["id"] = {};
Discount._meta_.fields["id"].type = String;
Discount._meta_.fields["name"] = {};
Discount._meta_.fields["name"].type = String;
Discount._meta_.fields["amount"] = {};
Discount._meta_.fields["amount"].type = Number;
Discount._meta_.fields["percentage"] = {};
Discount._meta_.fields["percentage"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = Discount;
}



/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/**
* @constructor
* @memberof inventory
*/
var ItemGroup = function() {
  this._class_ = ItemGroup;
  this.id = undefined;
  this.name = undefined;
  this.items = undefined;
  this.attributes = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof inventory.ItemGroup
* @param {String} id 
*/
ItemGroup.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof inventory.ItemGroup
* @return {String} 
*/
ItemGroup.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Name of the option
*
* @memberof inventory.ItemGroup
* @param {String} name 
*/
ItemGroup.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* Name of the option
* @memberof inventory.ItemGroup
* @return {String} 
*/
ItemGroup.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* Items that are members of this group
*
* @memberof inventory.ItemGroup
* @param {Array.<base.Reference>} items An array of 
*/
ItemGroup.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* Items that are members of this group
* @memberof inventory.ItemGroup
* @return {Array.<base.Reference>} An array of 
*/
ItemGroup.prototype.getItems = function() {
  return this.items;
};

/**
* Set the field value
* Attributes that belong to this group
*
* @memberof inventory.ItemGroup
* @param {Array.<base.Reference>} attributes An array of 
*/
ItemGroup.prototype.setAttributes = function(attributes) {
  this.attributes = attributes;
};

/**
* Get the field value
* Attributes that belong to this group
* @memberof inventory.ItemGroup
* @return {Array.<base.Reference>} An array of 
*/
ItemGroup.prototype.getAttributes = function() {
  return this.attributes;
};

/**
* @memberof inventory.ItemGroup
* @private
*/
ItemGroup.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ItemGroup.prototype.toString = function() {
  return JSON.stringify(this);
};

ItemGroup._meta_ =  {fields:  {}};
ItemGroup._meta_._class_ =  ItemGroup;
ItemGroup._meta_.fields["id"] = {};
ItemGroup._meta_.fields["id"].type = String;
ItemGroup._meta_.fields["name"] = {};
ItemGroup._meta_.fields["name"].type = String;
ItemGroup._meta_.fields["items"] = {};
ItemGroup._meta_.fields["items"].type = Array;
ItemGroup._meta_.fields["items"].elementType = base_Reference;
ItemGroup._meta_.fields["attributes"] = {};
ItemGroup._meta_.fields["attributes"].type = Array;
ItemGroup._meta_.fields["attributes"].elementType = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = ItemGroup;
}



/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_ModifierGroup = __webpack_require__(26);
var inventory_Item = __webpack_require__(18);

/**
* @constructor
* @memberof inventory
*/
var ItemModifierGroup = function() {
  this._class_ = ItemModifierGroup;
  this.item = undefined;
  this.modifierGroup = undefined;
};


/**
* Set the field value
* @memberof inventory.ItemModifierGroup
* @param {inventory.Item} item 
*/
ItemModifierGroup.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* @memberof inventory.ItemModifierGroup
* @return {inventory.Item} 
*/
ItemModifierGroup.prototype.getItem = function() {
  return this.item;
};

/**
* Set the field value
* @memberof inventory.ItemModifierGroup
* @param {inventory.ModifierGroup} modifierGroup 
*/
ItemModifierGroup.prototype.setModifierGroup = function(modifierGroup) {
  this.modifierGroup = modifierGroup;
};

/**
* Get the field value
* @memberof inventory.ItemModifierGroup
* @return {inventory.ModifierGroup} 
*/
ItemModifierGroup.prototype.getModifierGroup = function() {
  return this.modifierGroup;
};

/**
* @memberof inventory.ItemModifierGroup
* @private
*/
ItemModifierGroup.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ItemModifierGroup.prototype.toString = function() {
  return JSON.stringify(this);
};

ItemModifierGroup._meta_ =  {fields:  {}};
ItemModifierGroup._meta_._class_ =  ItemModifierGroup;
ItemModifierGroup._meta_.fields["item"] = {};
ItemModifierGroup._meta_.fields["item"].type = inventory_Item;
ItemModifierGroup._meta_.fields["modifierGroup"] = {};
ItemModifierGroup._meta_.fields["modifierGroup"].type = inventory_ModifierGroup;

//
// Expose the module.
//
if (true) {
module.exports = ItemModifierGroup;
}



/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_ModifierGroup = __webpack_require__(26);

/**
* @constructor
* @memberof inventory
*/
var ModifierGroupArray = function() {
  this._class_ = ModifierGroupArray;
  this.modifierGroups = undefined;
};


/**
* Set the field value
* @memberof inventory.ModifierGroupArray
* @param {Array.<inventory.ModifierGroup>} modifierGroups An array of 
*/
ModifierGroupArray.prototype.setModifierGroups = function(modifierGroups) {
  this.modifierGroups = modifierGroups;
};

/**
* Get the field value
* @memberof inventory.ModifierGroupArray
* @return {Array.<inventory.ModifierGroup>} An array of 
*/
ModifierGroupArray.prototype.getModifierGroups = function() {
  return this.modifierGroups;
};

/**
* @memberof inventory.ModifierGroupArray
* @private
*/
ModifierGroupArray.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ModifierGroupArray.prototype.toString = function() {
  return JSON.stringify(this);
};

ModifierGroupArray._meta_ =  {fields:  {}};
ModifierGroupArray._meta_._class_ =  ModifierGroupArray;
ModifierGroupArray._meta_.fields["modifierGroups"] = {};
ModifierGroupArray._meta_.fields["modifierGroups"].type = Array;
ModifierGroupArray._meta_.fields["modifierGroups"].elementType = inventory_ModifierGroup;

//
// Expose the module.
//
if (true) {
module.exports = ModifierGroupArray;
}



/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/** This class represents the association between an item and an option */
/**
* @constructor
* @memberof inventory
*/
var OptionItem = function() {
  this._class_ = OptionItem;
  this.option = undefined;
  this.item = undefined;
};


/**
* Set the field value
* Reference to an option
*
* @memberof inventory.OptionItem
* @param {Null|base.Reference} option 
*/
OptionItem.prototype.setOption = function(option) {
  this.option = option;
};

/**
* Get the field value
* Reference to an option
* @memberof inventory.OptionItem
* @return {Null|base.Reference} 
*/
OptionItem.prototype.getOption = function() {
  return this.option;
};

/**
* Set the field value
* Reference to an item
*
* @memberof inventory.OptionItem
* @param {Null|base.Reference} item 
*/
OptionItem.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* Reference to an item
* @memberof inventory.OptionItem
* @return {Null|base.Reference} 
*/
OptionItem.prototype.getItem = function() {
  return this.item;
};

/**
* @memberof inventory.OptionItem
* @private
*/
OptionItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OptionItem.prototype.toString = function() {
  return JSON.stringify(this);
};

OptionItem._meta_ =  {fields:  {}};
OptionItem._meta_._class_ =  OptionItem;
OptionItem._meta_.fields["option"] = {};
OptionItem._meta_.fields["option"].type = base_Reference;
OptionItem._meta_.fields["item"] = {};
OptionItem._meta_.fields["item"].type = base_Reference;

//
// Expose the module.
//
if (true) {
module.exports = OptionItem;
}



/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_Item = __webpack_require__(18);
var inventory_Tag = __webpack_require__(27);

/**
* @constructor
* @memberof inventory
*/
var TagItem = function() {
  this._class_ = TagItem;
  this.tag = undefined;
  this.item = undefined;
};


/**
* Set the field value
* @memberof inventory.TagItem
* @param {inventory.Tag} tag 
*/
TagItem.prototype.setTag = function(tag) {
  this.tag = tag;
};

/**
* Get the field value
* @memberof inventory.TagItem
* @return {inventory.Tag} 
*/
TagItem.prototype.getTag = function() {
  return this.tag;
};

/**
* Set the field value
* @memberof inventory.TagItem
* @param {inventory.Item} item 
*/
TagItem.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* @memberof inventory.TagItem
* @return {inventory.Item} 
*/
TagItem.prototype.getItem = function() {
  return this.item;
};

/**
* @memberof inventory.TagItem
* @private
*/
TagItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TagItem.prototype.toString = function() {
  return JSON.stringify(this);
};

TagItem._meta_ =  {fields:  {}};
TagItem._meta_._class_ =  TagItem;
TagItem._meta_.fields["tag"] = {};
TagItem._meta_.fields["tag"].type = inventory_Tag;
TagItem._meta_.fields["item"] = {};
TagItem._meta_.fields["item"].type = inventory_Item;

//
// Expose the module.
//
if (true) {
module.exports = TagItem;
}



/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var printer_Printer = __webpack_require__(9);
var inventory_Tag = __webpack_require__(27);

/**
* @constructor
* @memberof inventory
*/
var TagPrinter = function() {
  this._class_ = TagPrinter;
  this.tag = undefined;
  this.printer = undefined;
};


/**
* Set the field value
* @memberof inventory.TagPrinter
* @param {inventory.Tag} tag 
*/
TagPrinter.prototype.setTag = function(tag) {
  this.tag = tag;
};

/**
* Get the field value
* @memberof inventory.TagPrinter
* @return {inventory.Tag} 
*/
TagPrinter.prototype.getTag = function() {
  return this.tag;
};

/**
* Set the field value
* @memberof inventory.TagPrinter
* @param {printer.Printer} printer 
*/
TagPrinter.prototype.setPrinter = function(printer) {
  this.printer = printer;
};

/**
* Get the field value
* @memberof inventory.TagPrinter
* @return {printer.Printer} 
*/
TagPrinter.prototype.getPrinter = function() {
  return this.printer;
};

/**
* @memberof inventory.TagPrinter
* @private
*/
TagPrinter.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TagPrinter.prototype.toString = function() {
  return JSON.stringify(this);
};

TagPrinter._meta_ =  {fields:  {}};
TagPrinter._meta_._class_ =  TagPrinter;
TagPrinter._meta_.fields["tag"] = {};
TagPrinter._meta_.fields["tag"].type = inventory_Tag;
TagPrinter._meta_.fields["printer"] = {};
TagPrinter._meta_.fields["printer"].type = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = TagPrinter;
}



/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var inventory_TaxRate = __webpack_require__(25);
var inventory_Item = __webpack_require__(18);

/**
* @constructor
* @memberof inventory
*/
var TaxRateItem = function() {
  this._class_ = TaxRateItem;
  this.taxRate = undefined;
  this.item = undefined;
};


/**
* Set the field value
* @memberof inventory.TaxRateItem
* @param {inventory.TaxRate} taxRate 
*/
TaxRateItem.prototype.setTaxRate = function(taxRate) {
  this.taxRate = taxRate;
};

/**
* Get the field value
* @memberof inventory.TaxRateItem
* @return {inventory.TaxRate} 
*/
TaxRateItem.prototype.getTaxRate = function() {
  return this.taxRate;
};

/**
* Set the field value
* @memberof inventory.TaxRateItem
* @param {inventory.Item} item 
*/
TaxRateItem.prototype.setItem = function(item) {
  this.item = item;
};

/**
* Get the field value
* @memberof inventory.TaxRateItem
* @return {inventory.Item} 
*/
TaxRateItem.prototype.getItem = function() {
  return this.item;
};

/**
* @memberof inventory.TaxRateItem
* @private
*/
TaxRateItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TaxRateItem.prototype.toString = function() {
  return JSON.stringify(this);
};

TaxRateItem._meta_ =  {fields:  {}};
TaxRateItem._meta_._class_ =  TaxRateItem;
TaxRateItem._meta_.fields["taxRate"] = {};
TaxRateItem._meta_.fields["taxRate"].type = inventory_TaxRate;
TaxRateItem._meta_.fields["item"] = {};
TaxRateItem._meta_.fields["item"].type = inventory_Item;

//
// Expose the module.
//
if (true) {
module.exports = TaxRateItem;
}



/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.order = order;
/**
* @namespace order
*/
function order() {}
order.operation = {}


order.ClientEventType = __webpack_require__(101);
order.CreateLineItemsRequest = __webpack_require__(212);
order.CustomerIdMethod = __webpack_require__(103);
order.Discount = __webpack_require__(47);
order.DisplayDiscount = __webpack_require__(30);
order.DisplayLineItem = __webpack_require__(48);
order.DisplayModification = __webpack_require__(104);
order.DisplayOrder = __webpack_require__(105);
order.DisplayPayment = __webpack_require__(106);
order.FireOrder = __webpack_require__(213);
order.HoursAvailable = __webpack_require__(107);
order.LineItem = __webpack_require__(28);
order.Modification = __webpack_require__(102);
order.Order = __webpack_require__(49);
order.OrderExpansion = __webpack_require__(214);
order.OrderTaxRate = __webpack_require__(117);
order.OrderType = __webpack_require__(57);
order.OrderTypeCategory = __webpack_require__(215);
order.PayType = __webpack_require__(116);
order.SystemOrderType = __webpack_require__(216);
order.VoidReason = __webpack_require__(14);
order.VoidedLineItem = __webpack_require__(217);
order.operation.DiscountsAddedOperation = __webpack_require__(118);
order.operation.DiscountsDeletedOperation = __webpack_require__(119);
order.operation.LineItemsAddedOperation = __webpack_require__(120);
order.operation.LineItemsDeletedOperation = __webpack_require__(121);
order.operation.OrderDeletedOperation = __webpack_require__(122);

//
// Expose the module.
//
if (true) {
  module.exports = order;
}
    

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_LineItem = __webpack_require__(28);

/**
* @constructor
* @memberof order
*/
var CreateLineItemsRequest = function() {
  this._class_ = CreateLineItemsRequest;
  this.items = undefined;
};


/**
* Set the field value
* List of LineItem objects to create
*
* @memberof order.CreateLineItemsRequest
* @param {Array.<order.LineItem>} items An array of 
*/
CreateLineItemsRequest.prototype.setItems = function(items) {
  this.items = items;
};

/**
* Get the field value
* List of LineItem objects to create
* @memberof order.CreateLineItemsRequest
* @return {Array.<order.LineItem>} An array of 
*/
CreateLineItemsRequest.prototype.getItems = function() {
  return this.items;
};

/**
* @memberof order.CreateLineItemsRequest
* @private
*/
CreateLineItemsRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CreateLineItemsRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

CreateLineItemsRequest._meta_ =  {fields:  {}};
CreateLineItemsRequest._meta_._class_ =  CreateLineItemsRequest;
CreateLineItemsRequest._meta_.fields["items"] = {};
CreateLineItemsRequest._meta_.fields["items"].type = Array;
CreateLineItemsRequest._meta_.fields["items"].elementType = order_LineItem;

//
// Expose the module.
//
if (true) {
module.exports = CreateLineItemsRequest;
}



/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var FireOrder = function() {
  this._class_ = FireOrder;
  this.id = undefined;
  this.orderId = undefined;
  this.delay = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.FireOrder
* @param {String} id 
*/
FireOrder.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.FireOrder
* @return {String} 
*/
FireOrder.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The id of the order to fire.
*
* @memberof order.FireOrder
* @param {String} orderId 
*/
FireOrder.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* The id of the order to fire.
* @memberof order.FireOrder
* @return {String} 
*/
FireOrder.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* How long in seconds to wait before calling fire.
*
* @memberof order.FireOrder
* @param {Number} delay must be a long integer
*/
FireOrder.prototype.setDelay = function(delay) {
  this.delay = delay;
};

/**
* Get the field value
* How long in seconds to wait before calling fire.
* @memberof order.FireOrder
* @return {Number} must be a long integer
*/
FireOrder.prototype.getDelay = function() {
  return this.delay;
};

/**
* @memberof order.FireOrder
* @private
*/
FireOrder.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

FireOrder.prototype.toString = function() {
  return JSON.stringify(this);
};

FireOrder._meta_ =  {fields:  {}};
FireOrder._meta_._class_ =  FireOrder;
FireOrder._meta_.fields["id"] = {};
FireOrder._meta_.fields["id"].type = String;
FireOrder._meta_.fields["orderId"] = {};
FireOrder._meta_.fields["orderId"].type = String;
FireOrder._meta_.fields["delay"] = {};
FireOrder._meta_.fields["delay"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = FireOrder;
}



/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var OrderExpansion = function() {
  this._class_ = OrderExpansion;
  this.id = undefined;
  this.hasCredit = false;
  this.hasCreditCardTransaction = false;
  this.hasCustomer = false;
  this.hasCustomerEmailAddress = false;
  this.hasCustomerAddress = false;
  this.hasCustomerPhone = false;
  this.hasDiscount = false;
  this.hasLineItemDiscount = false;
  this.hasServiceCharge = false;
  this.hasRefund = false;
  this.hasVoid = false;
};


/**
* Set the field value
* Unique identifier
*
* @memberof order.OrderExpansion
* @param {String} id 
*/
OrderExpansion.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof order.OrderExpansion
* @return {String} 
*/
OrderExpansion.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* True if order has credit.
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCredit 
*/
OrderExpansion.prototype.setHasCredit = function(hasCredit) {
  this.hasCredit = hasCredit;
};

/**
* Get the field value
* True if order has credit.
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCredit = function() {
  return this.hasCredit;
};

/**
* Set the field value
* True if order has credit.
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCreditCardTransaction 
*/
OrderExpansion.prototype.setHasCreditCardTransaction = function(hasCreditCardTransaction) {
  this.hasCreditCardTransaction = hasCreditCardTransaction;
};

/**
* Get the field value
* True if order has credit.
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCreditCardTransaction = function() {
  return this.hasCreditCardTransaction;
};

/**
* Set the field value
* True if order has customer
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCustomer 
*/
OrderExpansion.prototype.setHasCustomer = function(hasCustomer) {
  this.hasCustomer = hasCustomer;
};

/**
* Get the field value
* True if order has customer
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCustomer = function() {
  return this.hasCustomer;
};

/**
* Set the field value
* True if customer has email address
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCustomerEmailAddress 
*/
OrderExpansion.prototype.setHasCustomerEmailAddress = function(hasCustomerEmailAddress) {
  this.hasCustomerEmailAddress = hasCustomerEmailAddress;
};

/**
* Get the field value
* True if customer has email address
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCustomerEmailAddress = function() {
  return this.hasCustomerEmailAddress;
};

/**
* Set the field value
* True if customer has address
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCustomerAddress 
*/
OrderExpansion.prototype.setHasCustomerAddress = function(hasCustomerAddress) {
  this.hasCustomerAddress = hasCustomerAddress;
};

/**
* Get the field value
* True if customer has address
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCustomerAddress = function() {
  return this.hasCustomerAddress;
};

/**
* Set the field value
* True if customer has phone
*
* @memberof order.OrderExpansion
* @param {Boolean} hasCustomerPhone 
*/
OrderExpansion.prototype.setHasCustomerPhone = function(hasCustomerPhone) {
  this.hasCustomerPhone = hasCustomerPhone;
};

/**
* Get the field value
* True if customer has phone
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasCustomerPhone = function() {
  return this.hasCustomerPhone;
};

/**
* Set the field value
* True if order has discount
*
* @memberof order.OrderExpansion
* @param {Boolean} hasDiscount 
*/
OrderExpansion.prototype.setHasDiscount = function(hasDiscount) {
  this.hasDiscount = hasDiscount;
};

/**
* Get the field value
* True if order has discount
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasDiscount = function() {
  return this.hasDiscount;
};

/**
* Set the field value
* True if order has line item discount
*
* @memberof order.OrderExpansion
* @param {Boolean} hasLineItemDiscount 
*/
OrderExpansion.prototype.setHasLineItemDiscount = function(hasLineItemDiscount) {
  this.hasLineItemDiscount = hasLineItemDiscount;
};

/**
* Get the field value
* True if order has line item discount
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasLineItemDiscount = function() {
  return this.hasLineItemDiscount;
};

/**
* Set the field value
* Check for order has service charge
*
* @memberof order.OrderExpansion
* @param {Boolean} hasServiceCharge 
*/
OrderExpansion.prototype.setHasServiceCharge = function(hasServiceCharge) {
  this.hasServiceCharge = hasServiceCharge;
};

/**
* Get the field value
* Check for order has service charge
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasServiceCharge = function() {
  return this.hasServiceCharge;
};

/**
* Set the field value
* True if order has a refund
*
* @memberof order.OrderExpansion
* @param {Boolean} hasRefund 
*/
OrderExpansion.prototype.setHasRefund = function(hasRefund) {
  this.hasRefund = hasRefund;
};

/**
* Get the field value
* True if order has a refund
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasRefund = function() {
  return this.hasRefund;
};

/**
* Set the field value
* True if order has void
*
* @memberof order.OrderExpansion
* @param {Boolean} hasVoid 
*/
OrderExpansion.prototype.setHasVoid = function(hasVoid) {
  this.hasVoid = hasVoid;
};

/**
* Get the field value
* True if order has void
* @memberof order.OrderExpansion
* @return {Boolean} 
*/
OrderExpansion.prototype.getHasVoid = function() {
  return this.hasVoid;
};

/**
* @memberof order.OrderExpansion
* @private
*/
OrderExpansion.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderExpansion.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderExpansion._meta_ =  {fields:  {}};
OrderExpansion._meta_._class_ =  OrderExpansion;
OrderExpansion._meta_.fields["id"] = {};
OrderExpansion._meta_.fields["id"].type = String;
OrderExpansion._meta_.fields["hasCredit"] = {};
OrderExpansion._meta_.fields["hasCredit"].type = Boolean;
OrderExpansion._meta_.fields["hasCreditCardTransaction"] = {};
OrderExpansion._meta_.fields["hasCreditCardTransaction"].type = Boolean;
OrderExpansion._meta_.fields["hasCustomer"] = {};
OrderExpansion._meta_.fields["hasCustomer"].type = Boolean;
OrderExpansion._meta_.fields["hasCustomerEmailAddress"] = {};
OrderExpansion._meta_.fields["hasCustomerEmailAddress"].type = Boolean;
OrderExpansion._meta_.fields["hasCustomerAddress"] = {};
OrderExpansion._meta_.fields["hasCustomerAddress"].type = Boolean;
OrderExpansion._meta_.fields["hasCustomerPhone"] = {};
OrderExpansion._meta_.fields["hasCustomerPhone"].type = Boolean;
OrderExpansion._meta_.fields["hasDiscount"] = {};
OrderExpansion._meta_.fields["hasDiscount"].type = Boolean;
OrderExpansion._meta_.fields["hasLineItemDiscount"] = {};
OrderExpansion._meta_.fields["hasLineItemDiscount"].type = Boolean;
OrderExpansion._meta_.fields["hasServiceCharge"] = {};
OrderExpansion._meta_.fields["hasServiceCharge"].type = Boolean;
OrderExpansion._meta_.fields["hasRefund"] = {};
OrderExpansion._meta_.fields["hasRefund"].type = Boolean;
OrderExpansion._meta_.fields["hasVoid"] = {};
OrderExpansion._meta_.fields["hasVoid"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = OrderExpansion;
}



/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_OrderType = __webpack_require__(57);
var inventory_Category = __webpack_require__(24);

/**
* @constructor
* @memberof order
*/
var OrderTypeCategory = function() {
  this._class_ = OrderTypeCategory;
  this.orderType = undefined;
  this.category = undefined;
};


/**
* Set the field value
* @memberof order.OrderTypeCategory
* @param {order.OrderType} orderType 
*/
OrderTypeCategory.prototype.setOrderType = function(orderType) {
  this.orderType = orderType;
};

/**
* Get the field value
* @memberof order.OrderTypeCategory
* @return {order.OrderType} 
*/
OrderTypeCategory.prototype.getOrderType = function() {
  return this.orderType;
};

/**
* Set the field value
* @memberof order.OrderTypeCategory
* @param {inventory.Category} category 
*/
OrderTypeCategory.prototype.setCategory = function(category) {
  this.category = category;
};

/**
* Get the field value
* @memberof order.OrderTypeCategory
* @return {inventory.Category} 
*/
OrderTypeCategory.prototype.getCategory = function() {
  return this.category;
};

/**
* @memberof order.OrderTypeCategory
* @private
*/
OrderTypeCategory.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OrderTypeCategory.prototype.toString = function() {
  return JSON.stringify(this);
};

OrderTypeCategory._meta_ =  {fields:  {}};
OrderTypeCategory._meta_._class_ =  OrderTypeCategory;
OrderTypeCategory._meta_.fields["orderType"] = {};
OrderTypeCategory._meta_.fields["orderType"].type = order_OrderType;
OrderTypeCategory._meta_.fields["category"] = {};
OrderTypeCategory._meta_.fields["category"].type = inventory_Category;

//
// Expose the module.
//
if (true) {
module.exports = OrderTypeCategory;
}



/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof order
*/
var SystemOrderType = function() {
  this._class_ = SystemOrderType;
  this.id = undefined;
  this.labelKey = undefined;
  this.isQsr = undefined;
  this.isFsr = undefined;
  this.isRetail = undefined;
};


/**
* Set the field value
* Unqiue identifier
*
* @memberof order.SystemOrderType
* @param {String} id 
*/
SystemOrderType.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unqiue identifier
* @memberof order.SystemOrderType
* @return {String} 
*/
SystemOrderType.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Label Key
*
* @memberof order.SystemOrderType
* @param {String} labelKey 
*/
SystemOrderType.prototype.setLabelKey = function(labelKey) {
  this.labelKey = labelKey;
};

/**
* Get the field value
* Label Key
* @memberof order.SystemOrderType
* @return {String} 
*/
SystemOrderType.prototype.getLabelKey = function() {
  return this.labelKey;
};

/**
* Set the field value
* Is for quick service restraunts?
*
* @memberof order.SystemOrderType
* @param {Boolean} isQsr 
*/
SystemOrderType.prototype.setIsQsr = function(isQsr) {
  this.isQsr = isQsr;
};

/**
* Get the field value
* Is for quick service restraunts?
* @memberof order.SystemOrderType
* @return {Boolean} 
*/
SystemOrderType.prototype.getIsQsr = function() {
  return this.isQsr;
};

/**
* Set the field value
* Is for full service restraunts?
*
* @memberof order.SystemOrderType
* @param {Boolean} isFsr 
*/
SystemOrderType.prototype.setIsFsr = function(isFsr) {
  this.isFsr = isFsr;
};

/**
* Get the field value
* Is for full service restraunts?
* @memberof order.SystemOrderType
* @return {Boolean} 
*/
SystemOrderType.prototype.getIsFsr = function() {
  return this.isFsr;
};

/**
* Set the field value
* Is for retail stores?
*
* @memberof order.SystemOrderType
* @param {Boolean} isRetail 
*/
SystemOrderType.prototype.setIsRetail = function(isRetail) {
  this.isRetail = isRetail;
};

/**
* Get the field value
* Is for retail stores?
* @memberof order.SystemOrderType
* @return {Boolean} 
*/
SystemOrderType.prototype.getIsRetail = function() {
  return this.isRetail;
};

/**
* @memberof order.SystemOrderType
* @private
*/
SystemOrderType.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

SystemOrderType.prototype.toString = function() {
  return JSON.stringify(this);
};

SystemOrderType._meta_ =  {fields:  {}};
SystemOrderType._meta_._class_ =  SystemOrderType;
SystemOrderType._meta_.fields["id"] = {};
SystemOrderType._meta_.fields["id"].type = String;
SystemOrderType._meta_.fields["labelKey"] = {};
SystemOrderType._meta_.fields["labelKey"].type = String;
SystemOrderType._meta_.fields["isQsr"] = {};
SystemOrderType._meta_.fields["isQsr"].type = Boolean;
SystemOrderType._meta_.fields["isFsr"] = {};
SystemOrderType._meta_.fields["isFsr"].type = Boolean;
SystemOrderType._meta_.fields["isRetail"] = {};
SystemOrderType._meta_.fields["isRetail"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = SystemOrderType;
}



/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_ClientEventType = __webpack_require__(101);
var order_LineItem = __webpack_require__(28);
var base_Reference = __webpack_require__(2);

/** For reporting on a removed line item */
/**
* @constructor
* @memberof order
*/
var VoidedLineItem = function() {
  this._class_ = VoidedLineItem;
  this.lineItem = undefined;
  this.merchant = undefined;
  this.reason = undefined;
  this.removedBy = undefined;
  this.createdBy = undefined;
  this.deletedTime = undefined;
  this.environment = undefined;
  this.clientEventType = undefined;
};


/**
* Set the field value
* The line item that was voided
*
* @memberof order.VoidedLineItem
* @param {order.LineItem} lineItem 
*/
VoidedLineItem.prototype.setLineItem = function(lineItem) {
  this.lineItem = lineItem;
};

/**
* Get the field value
* The line item that was voided
* @memberof order.VoidedLineItem
* @return {order.LineItem} 
*/
VoidedLineItem.prototype.getLineItem = function() {
  return this.lineItem;
};

/**
* Set the field value
* @memberof order.VoidedLineItem
* @param {base.Reference} merchant 
*/
VoidedLineItem.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof order.VoidedLineItem
* @return {base.Reference} 
*/
VoidedLineItem.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* Why was the line item voided
*
* @memberof order.VoidedLineItem
* @param {Null|String} reason 
*/
VoidedLineItem.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Why was the line item voided
* @memberof order.VoidedLineItem
* @return {Null|String} 
*/
VoidedLineItem.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* Employee who voided the item
*
* @memberof order.VoidedLineItem
* @param {base.Reference} removedBy 
*/
VoidedLineItem.prototype.setRemovedBy = function(removedBy) {
  this.removedBy = removedBy;
};

/**
* Get the field value
* Employee who voided the item
* @memberof order.VoidedLineItem
* @return {base.Reference} 
*/
VoidedLineItem.prototype.getRemovedBy = function() {
  return this.removedBy;
};

/**
* Set the field value
* Employee who created the order from which the line item was voided
*
* @memberof order.VoidedLineItem
* @param {base.Reference} createdBy 
*/
VoidedLineItem.prototype.setCreatedBy = function(createdBy) {
  this.createdBy = createdBy;
};

/**
* Get the field value
* Employee who created the order from which the line item was voided
* @memberof order.VoidedLineItem
* @return {base.Reference} 
*/
VoidedLineItem.prototype.getCreatedBy = function() {
  return this.createdBy;
};

/**
* Set the field value
* Timestamp of when this line item was deleted
*
* @memberof order.VoidedLineItem
* @param {Number} deletedTime must be a long integer
*/
VoidedLineItem.prototype.setDeletedTime = function(deletedTime) {
  this.deletedTime = deletedTime;
};

/**
* Get the field value
* Timestamp of when this line item was deleted
* @memberof order.VoidedLineItem
* @return {Number} must be a long integer
*/
VoidedLineItem.prototype.getDeletedTime = function() {
  return this.deletedTime;
};

/**
* Set the field value
* Which environment was this recorded in
*
* @memberof order.VoidedLineItem
* @param {Null|String} environment 
*/
VoidedLineItem.prototype.setEnvironment = function(environment) {
  this.environment = environment;
};

/**
* Get the field value
* Which environment was this recorded in
* @memberof order.VoidedLineItem
* @return {Null|String} 
*/
VoidedLineItem.prototype.getEnvironment = function() {
  return this.environment;
};

/**
* Set the field value
* What event on the client removed this? Was it because of moving a table? Or was it plain old deleting a line item?
*
* @memberof order.VoidedLineItem
* @param {order.ClientEventType} clientEventType 
*/
VoidedLineItem.prototype.setClientEventType = function(clientEventType) {
  this.clientEventType = clientEventType;
};

/**
* Get the field value
* What event on the client removed this? Was it because of moving a table? Or was it plain old deleting a line item?
* @memberof order.VoidedLineItem
* @return {order.ClientEventType} 
*/
VoidedLineItem.prototype.getClientEventType = function() {
  return this.clientEventType;
};

/**
* @memberof order.VoidedLineItem
* @private
*/
VoidedLineItem.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

VoidedLineItem.prototype.toString = function() {
  return JSON.stringify(this);
};

VoidedLineItem._meta_ =  {fields:  {}};
VoidedLineItem._meta_._class_ =  VoidedLineItem;
VoidedLineItem._meta_.fields["lineItem"] = {};
VoidedLineItem._meta_.fields["lineItem"].type = order_LineItem;
VoidedLineItem._meta_.fields["merchant"] = {};
VoidedLineItem._meta_.fields["merchant"].type = base_Reference;
VoidedLineItem._meta_.fields["reason"] = {};
VoidedLineItem._meta_.fields["reason"].type = String;
VoidedLineItem._meta_.fields["removedBy"] = {};
VoidedLineItem._meta_.fields["removedBy"].type = base_Reference;
VoidedLineItem._meta_.fields["createdBy"] = {};
VoidedLineItem._meta_.fields["createdBy"].type = base_Reference;
VoidedLineItem._meta_.fields["deletedTime"] = {};
VoidedLineItem._meta_.fields["deletedTime"].type = Number;
VoidedLineItem._meta_.fields["environment"] = {};
VoidedLineItem._meta_.fields["environment"].type = String;
VoidedLineItem._meta_.fields["clientEventType"] = {};
VoidedLineItem._meta_.fields["clientEventType"].type = order_ClientEventType;

//
// Expose the module.
//
if (true) {
module.exports = VoidedLineItem;
}



/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.payments = payments;
/**
* @namespace payments
*/
function payments() {}


payments.AVSResult = __webpack_require__(114);
payments.Authorization = __webpack_require__(108);
payments.Batch = __webpack_require__(59);
payments.BatchCardTotal = __webpack_require__(124);
payments.BatchDetail = __webpack_require__(123);
payments.BatchRequest = __webpack_require__(219);
payments.BatchState = __webpack_require__(62);
payments.BatchTotalStats = __webpack_require__(125);
payments.BatchTotalType = __webpack_require__(61);
payments.BatchType = __webpack_require__(60);
payments.CVVResult = __webpack_require__(220);
payments.CardEntryType = __webpack_require__(54);
payments.CardTransaction = __webpack_require__(53);
payments.CardTransactionState = __webpack_require__(112);
payments.CardTransactionType = __webpack_require__(113);
payments.CardType = __webpack_require__(19);
payments.CardlessPaymentData = __webpack_require__(221);
payments.CardlessPaymentDataType = __webpack_require__(127);
payments.CardlessPaymentNetwork = __webpack_require__(128);
payments.CashAdvanceCustomerIdentification = __webpack_require__(52);
payments.CashAdvanceExtra = __webpack_require__(110);
payments.Credit = __webpack_require__(16);
payments.CreditRefund = __webpack_require__(58);
payments.Currency = __webpack_require__(129);
payments.CvmResult = __webpack_require__(222);
payments.DCCInfo = __webpack_require__(51);
payments.DataEntryLocation = __webpack_require__(56);
payments.DiscountApprover = __webpack_require__(223);
payments.FailedBatchSettlement = __webpack_require__(224);
payments.GatewayTxState = __webpack_require__(130);
payments.GatewayTxType = __webpack_require__(131);
payments.GatewayTxs = __webpack_require__(225);
payments.GermanInfo = __webpack_require__(15);
payments.GiftCard = __webpack_require__(132);
payments.GiftCardResponse = __webpack_require__(226);
payments.GiftCardState = __webpack_require__(133);
payments.GiftCardTransaction = __webpack_require__(227);
payments.IdType = __webpack_require__(111);
payments.LineItemPayment = __webpack_require__(29);
payments.OverrideType = __webpack_require__(135);
payments.ParamType = __webpack_require__(136);
payments.Payment = __webpack_require__(4);
payments.PaymentResponse = __webpack_require__(228);
payments.PaymentTaxRate = __webpack_require__(109);
payments.Refund = __webpack_require__(10);
payments.Result = __webpack_require__(50);
payments.ServerTotalStats = __webpack_require__(126);
payments.ServiceChargeAmount = __webpack_require__(20);
payments.Tag = __webpack_require__(137);
payments.TaxableAmountRate = __webpack_require__(21);
payments.TerminalParameter = __webpack_require__(229);
payments.TipMode = __webpack_require__(55);
payments.Transaction = __webpack_require__(230);
payments.TransactionSettings = __webpack_require__(31);
payments.TxType = __webpack_require__(134);
payments.Type = __webpack_require__(115);
payments.VaultedCard = __webpack_require__(11);

//
// Expose the module.
//
if (true) {
  module.exports = payments;
}
    

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof payments
*/
var BatchRequest = function() {
  this._class_ = BatchRequest;
  this.devices = undefined;
};


/**
* Set the field value
* @memberof payments.BatchRequest
* @param {Array.<String>} devices An array of 
*/
BatchRequest.prototype.setDevices = function(devices) {
  this.devices = devices;
};

/**
* Get the field value
* @memberof payments.BatchRequest
* @return {Array.<String>} An array of 
*/
BatchRequest.prototype.getDevices = function() {
  return this.devices;
};

/**
* @memberof payments.BatchRequest
* @private
*/
BatchRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

BatchRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

BatchRequest._meta_ =  {fields:  {}};
BatchRequest._meta_._class_ =  BatchRequest;
BatchRequest._meta_.fields["devices"] = {};
BatchRequest._meta_.fields["devices"].type = Array;

//
// Expose the module.
//
if (true) {
module.exports = BatchRequest;
}



/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CVVResult = {
  SUCCESS : "SUCCESS",
  FAILURE : "FAILURE",
  NOT_PROCESSED : "NOT_PROCESSED",
  NOT_PRESENT : "NOT_PRESENT"
};


//
// Expose the module.
//
if (true) {
module.exports = CVVResult;
}



/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CardlessPaymentDataType = __webpack_require__(127);
var payments_CardlessPaymentNetwork = __webpack_require__(128);

/** Data for a payment that is processed using a QR code or barcode. */
/**
* @constructor
* @memberof payments
*/
var CardlessPaymentData = function() {
  this._class_ = CardlessPaymentData;
  this.paymentNetwork = undefined;
  this.paymentType = undefined;
  this.paymentData = undefined;
};


/**
* Set the field value
* Payment network
*
* @memberof payments.CardlessPaymentData
* @param {payments.CardlessPaymentNetwork} paymentNetwork 
*/
CardlessPaymentData.prototype.setPaymentNetwork = function(paymentNetwork) {
  this.paymentNetwork = paymentNetwork;
};

/**
* Get the field value
* Payment network
* @memberof payments.CardlessPaymentData
* @return {payments.CardlessPaymentNetwork} 
*/
CardlessPaymentData.prototype.getPaymentNetwork = function() {
  return this.paymentNetwork;
};

/**
* Set the field value
* Payment method
*
* @memberof payments.CardlessPaymentData
* @param {payments.CardlessPaymentDataType} paymentType 
*/
CardlessPaymentData.prototype.setPaymentType = function(paymentType) {
  this.paymentType = paymentType;
};

/**
* Get the field value
* Payment method
* @memberof payments.CardlessPaymentData
* @return {payments.CardlessPaymentDataType} 
*/
CardlessPaymentData.prototype.getPaymentType = function() {
  return this.paymentType;
};

/**
* Set the field value
* QR code or barcode data
*
* @memberof payments.CardlessPaymentData
* @param {String} paymentData 
*/
CardlessPaymentData.prototype.setPaymentData = function(paymentData) {
  this.paymentData = paymentData;
};

/**
* Get the field value
* QR code or barcode data
* @memberof payments.CardlessPaymentData
* @return {String} 
*/
CardlessPaymentData.prototype.getPaymentData = function() {
  return this.paymentData;
};

/**
* @memberof payments.CardlessPaymentData
* @private
*/
CardlessPaymentData.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CardlessPaymentData.prototype.toString = function() {
  return JSON.stringify(this);
};

CardlessPaymentData._meta_ =  {fields:  {}};
CardlessPaymentData._meta_._class_ =  CardlessPaymentData;
CardlessPaymentData._meta_.fields["paymentNetwork"] = {};
CardlessPaymentData._meta_.fields["paymentNetwork"].type = payments_CardlessPaymentNetwork;
CardlessPaymentData._meta_.fields["paymentType"] = {};
CardlessPaymentData._meta_.fields["paymentType"].type = payments_CardlessPaymentDataType;
CardlessPaymentData._meta_.fields["paymentData"] = {};
CardlessPaymentData._meta_.fields["paymentData"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CardlessPaymentData;
}



/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @memberof payments
* @enum {string}
*/
CvmResult = {
  NO_CVM_REQUIRED : "NO_CVM_REQUIRED",
  SIGNATURE : "SIGNATURE",
  PIN : "PIN",
  ONLINE_PIN : "ONLINE_PIN",
  SIGNATURE_AND_PIN : "SIGNATURE_AND_PIN",
  CVM_FAILED : "CVM_FAILED",
  DEVICE : "DEVICE"
};


//
// Expose the module.
//
if (true) {
module.exports = CvmResult;
}



/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_Reference = __webpack_require__(2);

/** The information related to a discount and who approved it for a specific line item on an order or entire order. Used for reporting.  */
/**
* @constructor
* @memberof payments
*/
var DiscountApprover = function() {
  this._class_ = DiscountApprover;
  this.discount = undefined;
  this.merchant = undefined;
  this.approvedBy = undefined;
  this.order = undefined;
  this.lineItem = undefined;
  this.createdTime = undefined;
  this.environment = undefined;
};


/**
* Set the field value
* The discount ID and UUID
*
* @memberof payments.DiscountApprover
* @param {base.Reference} discount 
*/
DiscountApprover.prototype.setDiscount = function(discount) {
  this.discount = discount;
};

/**
* Get the field value
* The discount ID and UUID
* @memberof payments.DiscountApprover
* @return {base.Reference} 
*/
DiscountApprover.prototype.getDiscount = function() {
  return this.discount;
};

/**
* Set the field value
* @memberof payments.DiscountApprover
* @param {base.Reference} merchant 
*/
DiscountApprover.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof payments.DiscountApprover
* @return {base.Reference} 
*/
DiscountApprover.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* Employee who approved the discount
*
* @memberof payments.DiscountApprover
* @param {base.Reference} approvedBy 
*/
DiscountApprover.prototype.setApprovedBy = function(approvedBy) {
  this.approvedBy = approvedBy;
};

/**
* Get the field value
* Employee who approved the discount
* @memberof payments.DiscountApprover
* @return {base.Reference} 
*/
DiscountApprover.prototype.getApprovedBy = function() {
  return this.approvedBy;
};

/**
* Set the field value
* The order with which the discount is associated.
*
* @memberof payments.DiscountApprover
* @param {base.Reference} order 
*/
DiscountApprover.prototype.setOrder = function(order) {
  this.order = order;
};

/**
* Get the field value
* The order with which the discount is associated.
* @memberof payments.DiscountApprover
* @return {base.Reference} 
*/
DiscountApprover.prototype.getOrder = function() {
  return this.order;
};

/**
* Set the field value
* The lineItem with which the discount is associated
*
* @memberof payments.DiscountApprover
* @param {Null|base.Reference} lineItem 
*/
DiscountApprover.prototype.setLineItem = function(lineItem) {
  this.lineItem = lineItem;
};

/**
* Get the field value
* The lineItem with which the discount is associated
* @memberof payments.DiscountApprover
* @return {Null|base.Reference} 
*/
DiscountApprover.prototype.getLineItem = function() {
  return this.lineItem;
};

/**
* Set the field value
* @memberof payments.DiscountApprover
* @param {Number} createdTime must be a long integer
*/
DiscountApprover.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof payments.DiscountApprover
* @return {Number} must be a long integer
*/
DiscountApprover.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* Which environment was this recorded in
*
* @memberof payments.DiscountApprover
* @param {Null|String} environment 
*/
DiscountApprover.prototype.setEnvironment = function(environment) {
  this.environment = environment;
};

/**
* Get the field value
* Which environment was this recorded in
* @memberof payments.DiscountApprover
* @return {Null|String} 
*/
DiscountApprover.prototype.getEnvironment = function() {
  return this.environment;
};

/**
* @memberof payments.DiscountApprover
* @private
*/
DiscountApprover.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DiscountApprover.prototype.toString = function() {
  return JSON.stringify(this);
};

DiscountApprover._meta_ =  {fields:  {}};
DiscountApprover._meta_._class_ =  DiscountApprover;
DiscountApprover._meta_.fields["discount"] = {};
DiscountApprover._meta_.fields["discount"].type = base_Reference;
DiscountApprover._meta_.fields["merchant"] = {};
DiscountApprover._meta_.fields["merchant"].type = base_Reference;
DiscountApprover._meta_.fields["approvedBy"] = {};
DiscountApprover._meta_.fields["approvedBy"].type = base_Reference;
DiscountApprover._meta_.fields["order"] = {};
DiscountApprover._meta_.fields["order"].type = base_Reference;
DiscountApprover._meta_.fields["lineItem"] = {};
DiscountApprover._meta_.fields["lineItem"].type = base_Reference;
DiscountApprover._meta_.fields["createdTime"] = {};
DiscountApprover._meta_.fields["createdTime"].type = Number;
DiscountApprover._meta_.fields["environment"] = {};
DiscountApprover._meta_.fields["environment"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DiscountApprover;
}



/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_BatchType = __webpack_require__(60);
var payments_BatchState = __webpack_require__(62);

/**
* @constructor
* @memberof payments
*/
var FailedBatchSettlement = function() {
  this._class_ = FailedBatchSettlement;
  this.merchantName = undefined;
  this.mid = undefined;
  this.cid = undefined;
  this.batchId = undefined;
  this.txCount = undefined;
  this.state = undefined;
  this.batchType = undefined;
  this.createdTime = undefined;
  this.retries = undefined;
};


/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {String} merchantName 
*/
FailedBatchSettlement.prototype.setMerchantName = function(merchantName) {
  this.merchantName = merchantName;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {String} 
*/
FailedBatchSettlement.prototype.getMerchantName = function() {
  return this.merchantName;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {String} mid 
*/
FailedBatchSettlement.prototype.setMid = function(mid) {
  this.mid = mid;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {String} 
*/
FailedBatchSettlement.prototype.getMid = function() {
  return this.mid;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {String} cid 
*/
FailedBatchSettlement.prototype.setCid = function(cid) {
  this.cid = cid;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {String} 
*/
FailedBatchSettlement.prototype.getCid = function() {
  return this.cid;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {String} batchId 
*/
FailedBatchSettlement.prototype.setBatchId = function(batchId) {
  this.batchId = batchId;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {String} 
*/
FailedBatchSettlement.prototype.getBatchId = function() {
  return this.batchId;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {Number} txCount must be an integer
*/
FailedBatchSettlement.prototype.setTxCount = function(txCount) {
  this.txCount = txCount;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {Number} must be an integer
*/
FailedBatchSettlement.prototype.getTxCount = function() {
  return this.txCount;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {payments.BatchState} state 
*/
FailedBatchSettlement.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {payments.BatchState} 
*/
FailedBatchSettlement.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {payments.BatchType} batchType 
*/
FailedBatchSettlement.prototype.setBatchType = function(batchType) {
  this.batchType = batchType;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {payments.BatchType} 
*/
FailedBatchSettlement.prototype.getBatchType = function() {
  return this.batchType;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {Number} createdTime must be a long integer
*/
FailedBatchSettlement.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {Number} must be a long integer
*/
FailedBatchSettlement.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof payments.FailedBatchSettlement
* @param {Number} retries must be an integer
*/
FailedBatchSettlement.prototype.setRetries = function(retries) {
  this.retries = retries;
};

/**
* Get the field value
* @memberof payments.FailedBatchSettlement
* @return {Number} must be an integer
*/
FailedBatchSettlement.prototype.getRetries = function() {
  return this.retries;
};

/**
* @memberof payments.FailedBatchSettlement
* @private
*/
FailedBatchSettlement.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

FailedBatchSettlement.prototype.toString = function() {
  return JSON.stringify(this);
};

FailedBatchSettlement._meta_ =  {fields:  {}};
FailedBatchSettlement._meta_._class_ =  FailedBatchSettlement;
FailedBatchSettlement._meta_.fields["merchantName"] = {};
FailedBatchSettlement._meta_.fields["merchantName"].type = String;
FailedBatchSettlement._meta_.fields["mid"] = {};
FailedBatchSettlement._meta_.fields["mid"].type = String;
FailedBatchSettlement._meta_.fields["cid"] = {};
FailedBatchSettlement._meta_.fields["cid"].type = String;
FailedBatchSettlement._meta_.fields["batchId"] = {};
FailedBatchSettlement._meta_.fields["batchId"].type = String;
FailedBatchSettlement._meta_.fields["txCount"] = {};
FailedBatchSettlement._meta_.fields["txCount"].type = Number;
FailedBatchSettlement._meta_.fields["state"] = {};
FailedBatchSettlement._meta_.fields["state"].type = payments_BatchState;
FailedBatchSettlement._meta_.fields["batchType"] = {};
FailedBatchSettlement._meta_.fields["batchType"].type = payments_BatchType;
FailedBatchSettlement._meta_.fields["createdTime"] = {};
FailedBatchSettlement._meta_.fields["createdTime"].type = Number;
FailedBatchSettlement._meta_.fields["retries"] = {};
FailedBatchSettlement._meta_.fields["retries"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = FailedBatchSettlement;
}



/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Currency = __webpack_require__(129);
var payments_CardType = __webpack_require__(19);
var payments_CardEntryType = __webpack_require__(54);
var payments_GatewayTxState = __webpack_require__(130);
var payments_GatewayTxType = __webpack_require__(131);

/**
* @constructor
* @memberof payments
*/
var GatewayTxs = function() {
  this._class_ = GatewayTxs;
  this.merchantGatewayId = undefined;
  this.clientId = undefined;
  this.amount = undefined;
  this.adjustAmount = undefined;
  this.taxAmount = undefined;
  this.tipAmount = undefined;
  this.currency = undefined;
  this.state = undefined;
  this.retries = undefined;
  this.type = undefined;
  this.entryType = undefined;
  this.responseCode = undefined;
  this.responseMessage = undefined;
  this.first4 = undefined;
  this.last4 = undefined;
  this.cardType = undefined;
  this.refnum = undefined;
  this.token = undefined;
  this.authcode = undefined;
  this.employeeId = undefined;
  this.extra = undefined;
  this.captured = undefined;
  this.swiperSerial = undefined;
  this.ksnPrefix = undefined;
  this.createdTime = undefined;
  this.modifiedTime = undefined;
  this.refundId = undefined;
  this.paymentRefundId = undefined;
};


/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} merchantGatewayId must be a long integer
*/
GatewayTxs.prototype.setMerchantGatewayId = function(merchantGatewayId) {
  this.merchantGatewayId = merchantGatewayId;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getMerchantGatewayId = function() {
  return this.merchantGatewayId;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} clientId 
*/
GatewayTxs.prototype.setClientId = function(clientId) {
  this.clientId = clientId;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getClientId = function() {
  return this.clientId;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} amount must be a long integer
*/
GatewayTxs.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} adjustAmount must be a long integer
*/
GatewayTxs.prototype.setAdjustAmount = function(adjustAmount) {
  this.adjustAmount = adjustAmount;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getAdjustAmount = function() {
  return this.adjustAmount;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} taxAmount must be a long integer
*/
GatewayTxs.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} tipAmount must be a long integer
*/
GatewayTxs.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {payments.Currency} currency 
*/
GatewayTxs.prototype.setCurrency = function(currency) {
  this.currency = currency;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {payments.Currency} 
*/
GatewayTxs.prototype.getCurrency = function() {
  return this.currency;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {payments.GatewayTxState} state 
*/
GatewayTxs.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {payments.GatewayTxState} 
*/
GatewayTxs.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} retries must be a long integer
*/
GatewayTxs.prototype.setRetries = function(retries) {
  this.retries = retries;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getRetries = function() {
  return this.retries;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {payments.GatewayTxType} type 
*/
GatewayTxs.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {payments.GatewayTxType} 
*/
GatewayTxs.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {payments.CardEntryType} entryType 
*/
GatewayTxs.prototype.setEntryType = function(entryType) {
  this.entryType = entryType;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {payments.CardEntryType} 
*/
GatewayTxs.prototype.getEntryType = function() {
  return this.entryType;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} responseCode 
*/
GatewayTxs.prototype.setResponseCode = function(responseCode) {
  this.responseCode = responseCode;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getResponseCode = function() {
  return this.responseCode;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} responseMessage 
*/
GatewayTxs.prototype.setResponseMessage = function(responseMessage) {
  this.responseMessage = responseMessage;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getResponseMessage = function() {
  return this.responseMessage;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} first4 
*/
GatewayTxs.prototype.setFirst4 = function(first4) {
  this.first4 = first4;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getFirst4 = function() {
  return this.first4;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} last4 
*/
GatewayTxs.prototype.setLast4 = function(last4) {
  this.last4 = last4;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getLast4 = function() {
  return this.last4;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {payments.CardType} cardType 
*/
GatewayTxs.prototype.setCardType = function(cardType) {
  this.cardType = cardType;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {payments.CardType} 
*/
GatewayTxs.prototype.getCardType = function() {
  return this.cardType;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} refnum 
*/
GatewayTxs.prototype.setRefnum = function(refnum) {
  this.refnum = refnum;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getRefnum = function() {
  return this.refnum;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} token 
*/
GatewayTxs.prototype.setToken = function(token) {
  this.token = token;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getToken = function() {
  return this.token;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} authcode 
*/
GatewayTxs.prototype.setAuthcode = function(authcode) {
  this.authcode = authcode;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getAuthcode = function() {
  return this.authcode;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} employeeId 
*/
GatewayTxs.prototype.setEmployeeId = function(employeeId) {
  this.employeeId = employeeId;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getEmployeeId = function() {
  return this.employeeId;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} extra 
*/
GatewayTxs.prototype.setExtra = function(extra) {
  this.extra = extra;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getExtra = function() {
  return this.extra;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Boolean|Null} captured 
*/
GatewayTxs.prototype.setCaptured = function(captured) {
  this.captured = captured;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Boolean|Null} 
*/
GatewayTxs.prototype.getCaptured = function() {
  return this.captured;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} swiperSerial 
*/
GatewayTxs.prototype.setSwiperSerial = function(swiperSerial) {
  this.swiperSerial = swiperSerial;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getSwiperSerial = function() {
  return this.swiperSerial;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {String} ksnPrefix 
*/
GatewayTxs.prototype.setKsnPrefix = function(ksnPrefix) {
  this.ksnPrefix = ksnPrefix;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {String} 
*/
GatewayTxs.prototype.getKsnPrefix = function() {
  return this.ksnPrefix;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} createdTime must be a long integer
*/
GatewayTxs.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number} modifiedTime must be a long integer
*/
GatewayTxs.prototype.setModifiedTime = function(modifiedTime) {
  this.modifiedTime = modifiedTime;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number} must be a long integer
*/
GatewayTxs.prototype.getModifiedTime = function() {
  return this.modifiedTime;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number|Null} refundId must be a long integer, 
*/
GatewayTxs.prototype.setRefundId = function(refundId) {
  this.refundId = refundId;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number|Null} must be a long integer, 
*/
GatewayTxs.prototype.getRefundId = function() {
  return this.refundId;
};

/**
* Set the field value
* @memberof payments.GatewayTxs
* @param {Number|Null} paymentRefundId must be a long integer, 
*/
GatewayTxs.prototype.setPaymentRefundId = function(paymentRefundId) {
  this.paymentRefundId = paymentRefundId;
};

/**
* Get the field value
* @memberof payments.GatewayTxs
* @return {Number|Null} must be a long integer, 
*/
GatewayTxs.prototype.getPaymentRefundId = function() {
  return this.paymentRefundId;
};

/**
* @memberof payments.GatewayTxs
* @private
*/
GatewayTxs.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

GatewayTxs.prototype.toString = function() {
  return JSON.stringify(this);
};

GatewayTxs._meta_ =  {fields:  {}};
GatewayTxs._meta_._class_ =  GatewayTxs;
GatewayTxs._meta_.fields["merchantGatewayId"] = {};
GatewayTxs._meta_.fields["merchantGatewayId"].type = Number;
GatewayTxs._meta_.fields["clientId"] = {};
GatewayTxs._meta_.fields["clientId"].type = String;
GatewayTxs._meta_.fields["amount"] = {};
GatewayTxs._meta_.fields["amount"].type = Number;
GatewayTxs._meta_.fields["adjustAmount"] = {};
GatewayTxs._meta_.fields["adjustAmount"].type = Number;
GatewayTxs._meta_.fields["taxAmount"] = {};
GatewayTxs._meta_.fields["taxAmount"].type = Number;
GatewayTxs._meta_.fields["tipAmount"] = {};
GatewayTxs._meta_.fields["tipAmount"].type = Number;
GatewayTxs._meta_.fields["currency"] = {};
GatewayTxs._meta_.fields["currency"].type = payments_Currency;
GatewayTxs._meta_.fields["state"] = {};
GatewayTxs._meta_.fields["state"].type = payments_GatewayTxState;
GatewayTxs._meta_.fields["retries"] = {};
GatewayTxs._meta_.fields["retries"].type = Number;
GatewayTxs._meta_.fields["type"] = {};
GatewayTxs._meta_.fields["type"].type = payments_GatewayTxType;
GatewayTxs._meta_.fields["entryType"] = {};
GatewayTxs._meta_.fields["entryType"].type = payments_CardEntryType;
GatewayTxs._meta_.fields["responseCode"] = {};
GatewayTxs._meta_.fields["responseCode"].type = String;
GatewayTxs._meta_.fields["responseMessage"] = {};
GatewayTxs._meta_.fields["responseMessage"].type = String;
GatewayTxs._meta_.fields["first4"] = {};
GatewayTxs._meta_.fields["first4"].type = String;
GatewayTxs._meta_.fields["last4"] = {};
GatewayTxs._meta_.fields["last4"].type = String;
GatewayTxs._meta_.fields["cardType"] = {};
GatewayTxs._meta_.fields["cardType"].type = payments_CardType;
GatewayTxs._meta_.fields["refnum"] = {};
GatewayTxs._meta_.fields["refnum"].type = String;
GatewayTxs._meta_.fields["token"] = {};
GatewayTxs._meta_.fields["token"].type = String;
GatewayTxs._meta_.fields["authcode"] = {};
GatewayTxs._meta_.fields["authcode"].type = String;
GatewayTxs._meta_.fields["employeeId"] = {};
GatewayTxs._meta_.fields["employeeId"].type = String;
GatewayTxs._meta_.fields["extra"] = {};
GatewayTxs._meta_.fields["extra"].type = String;
GatewayTxs._meta_.fields["captured"] = {};
GatewayTxs._meta_.fields["captured"].type = Boolean;
GatewayTxs._meta_.fields["swiperSerial"] = {};
GatewayTxs._meta_.fields["swiperSerial"].type = String;
GatewayTxs._meta_.fields["ksnPrefix"] = {};
GatewayTxs._meta_.fields["ksnPrefix"].type = String;
GatewayTxs._meta_.fields["createdTime"] = {};
GatewayTxs._meta_.fields["createdTime"].type = Number;
GatewayTxs._meta_.fields["modifiedTime"] = {};
GatewayTxs._meta_.fields["modifiedTime"].type = Number;
GatewayTxs._meta_.fields["refundId"] = {};
GatewayTxs._meta_.fields["refundId"].type = Number;
GatewayTxs._meta_.fields["paymentRefundId"] = {};
GatewayTxs._meta_.fields["paymentRefundId"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = GatewayTxs;
}



/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_GiftCardState = __webpack_require__(133);
var payments_Payment = __webpack_require__(4);
var payments_TxType = __webpack_require__(134);

/**
* @constructor
* @memberof payments
*/
var GiftCardResponse = function() {
  this._class_ = GiftCardResponse;
  this.txType = undefined;
  this.state = payments_GiftCardState["INVALID"];
  this.requestAmount = undefined;
  this.payment = undefined;
  this.responseMessage = undefined;
  this.requestSuccessful = false;
  this.accountNumber = undefined;
  this.scv = undefined;
  this.giftCardTxUuid = undefined;
  this.transactionId = undefined;
  this.referenceUuid = undefined;
  this.authCode = undefined;
  this.begBal = undefined;
  this.endBal = undefined;
  this.holdBal = undefined;
};


/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {payments.TxType} txType 
*/
GiftCardResponse.prototype.setTxType = function(txType) {
  this.txType = txType;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {payments.TxType} 
*/
GiftCardResponse.prototype.getTxType = function() {
  return this.txType;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {payments.GiftCardState} state 
*/
GiftCardResponse.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {payments.GiftCardState} 
*/
GiftCardResponse.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* Transaction Amount
*
* @memberof payments.GiftCardResponse
* @param {Number} requestAmount must be a long integer
*/
GiftCardResponse.prototype.setRequestAmount = function(requestAmount) {
  this.requestAmount = requestAmount;
};

/**
* Get the field value
* Transaction Amount
* @memberof payments.GiftCardResponse
* @return {Number} must be a long integer
*/
GiftCardResponse.prototype.getRequestAmount = function() {
  return this.requestAmount;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {payments.Payment} payment 
*/
GiftCardResponse.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {payments.Payment} 
*/
GiftCardResponse.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} responseMessage 
*/
GiftCardResponse.prototype.setResponseMessage = function(responseMessage) {
  this.responseMessage = responseMessage;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getResponseMessage = function() {
  return this.responseMessage;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {Boolean} requestSuccessful 
*/
GiftCardResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
  this.requestSuccessful = requestSuccessful;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {Boolean} 
*/
GiftCardResponse.prototype.getRequestSuccessful = function() {
  return this.requestSuccessful;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} accountNumber 
*/
GiftCardResponse.prototype.setAccountNumber = function(accountNumber) {
  this.accountNumber = accountNumber;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getAccountNumber = function() {
  return this.accountNumber;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} scv 
*/
GiftCardResponse.prototype.setScv = function(scv) {
  this.scv = scv;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getScv = function() {
  return this.scv;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} giftCardTxUuid 
*/
GiftCardResponse.prototype.setGiftCardTxUuid = function(giftCardTxUuid) {
  this.giftCardTxUuid = giftCardTxUuid;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getGiftCardTxUuid = function() {
  return this.giftCardTxUuid;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} transactionId 
*/
GiftCardResponse.prototype.setTransactionId = function(transactionId) {
  this.transactionId = transactionId;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getTransactionId = function() {
  return this.transactionId;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} referenceUuid 
*/
GiftCardResponse.prototype.setReferenceUuid = function(referenceUuid) {
  this.referenceUuid = referenceUuid;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getReferenceUuid = function() {
  return this.referenceUuid;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {String} authCode 
*/
GiftCardResponse.prototype.setAuthCode = function(authCode) {
  this.authCode = authCode;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {String} 
*/
GiftCardResponse.prototype.getAuthCode = function() {
  return this.authCode;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {Null|Number} begBal must be a long integer
*/
GiftCardResponse.prototype.setBegBal = function(begBal) {
  this.begBal = begBal;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {Null|Number} must be a long integer
*/
GiftCardResponse.prototype.getBegBal = function() {
  return this.begBal;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {Null|Number} endBal must be a long integer
*/
GiftCardResponse.prototype.setEndBal = function(endBal) {
  this.endBal = endBal;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {Null|Number} must be a long integer
*/
GiftCardResponse.prototype.getEndBal = function() {
  return this.endBal;
};

/**
* Set the field value
* @memberof payments.GiftCardResponse
* @param {Null|Number} holdBal must be a long integer
*/
GiftCardResponse.prototype.setHoldBal = function(holdBal) {
  this.holdBal = holdBal;
};

/**
* Get the field value
* @memberof payments.GiftCardResponse
* @return {Null|Number} must be a long integer
*/
GiftCardResponse.prototype.getHoldBal = function() {
  return this.holdBal;
};

/**
* @memberof payments.GiftCardResponse
* @private
*/
GiftCardResponse.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

GiftCardResponse.prototype.toString = function() {
  return JSON.stringify(this);
};

GiftCardResponse._meta_ =  {fields:  {}};
GiftCardResponse._meta_._class_ =  GiftCardResponse;
GiftCardResponse._meta_.fields["txType"] = {};
GiftCardResponse._meta_.fields["txType"].type = payments_TxType;
GiftCardResponse._meta_.fields["state"] = {};
GiftCardResponse._meta_.fields["state"].type = payments_GiftCardState;
GiftCardResponse._meta_.fields["requestAmount"] = {};
GiftCardResponse._meta_.fields["requestAmount"].type = Number;
GiftCardResponse._meta_.fields["payment"] = {};
GiftCardResponse._meta_.fields["payment"].type = payments_Payment;
GiftCardResponse._meta_.fields["responseMessage"] = {};
GiftCardResponse._meta_.fields["responseMessage"].type = String;
GiftCardResponse._meta_.fields["requestSuccessful"] = {};
GiftCardResponse._meta_.fields["requestSuccessful"].type = Boolean;
GiftCardResponse._meta_.fields["accountNumber"] = {};
GiftCardResponse._meta_.fields["accountNumber"].type = String;
GiftCardResponse._meta_.fields["scv"] = {};
GiftCardResponse._meta_.fields["scv"].type = String;
GiftCardResponse._meta_.fields["giftCardTxUuid"] = {};
GiftCardResponse._meta_.fields["giftCardTxUuid"].type = String;
GiftCardResponse._meta_.fields["transactionId"] = {};
GiftCardResponse._meta_.fields["transactionId"].type = String;
GiftCardResponse._meta_.fields["referenceUuid"] = {};
GiftCardResponse._meta_.fields["referenceUuid"].type = String;
GiftCardResponse._meta_.fields["authCode"] = {};
GiftCardResponse._meta_.fields["authCode"].type = String;
GiftCardResponse._meta_.fields["begBal"] = {};
GiftCardResponse._meta_.fields["begBal"].type = Number;
GiftCardResponse._meta_.fields["endBal"] = {};
GiftCardResponse._meta_.fields["endBal"].type = Number;
GiftCardResponse._meta_.fields["holdBal"] = {};
GiftCardResponse._meta_.fields["holdBal"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = GiftCardResponse;
}



/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_LineItemPayment = __webpack_require__(29);
var payments_TaxableAmountRate = __webpack_require__(21);
var payments_ServiceChargeAmount = __webpack_require__(20);
var payments_GiftCard = __webpack_require__(132);

/**
* @constructor
* @memberof payments
*/
var GiftCardTransaction = function() {
  this._class_ = GiftCardTransaction;
  this.id = undefined;
  this.amount = undefined;
  this.taxAmount = undefined;
  this.tipAmount = undefined;
  this.orderId = undefined;
  this.card = undefined;
  this.paymentIds = undefined;
  this.ignorePayment = false;
  this.serviceChargeAmount = undefined;
  this.taxableAmountRates = undefined;
  this.lineItems = undefined;
  this.employeeId = undefined;
  this.suppressPayment = "false";
};


/**
* Set the field value
* UUID
*
* @memberof payments.GiftCardTransaction
* @param {String} id 
*/
GiftCardTransaction.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* UUID
* @memberof payments.GiftCardTransaction
* @return {String} 
*/
GiftCardTransaction.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Transaction Amount
*
* @memberof payments.GiftCardTransaction
* @param {Number} amount must be a long integer
*/
GiftCardTransaction.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Transaction Amount
* @memberof payments.GiftCardTransaction
* @return {Number} must be a long integer
*/
GiftCardTransaction.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Tax Amount
*
* @memberof payments.GiftCardTransaction
* @param {Number} taxAmount must be a long integer
*/
GiftCardTransaction.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Tax Amount
* @memberof payments.GiftCardTransaction
* @return {Number} must be a long integer
*/
GiftCardTransaction.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* Tip Amount
*
* @memberof payments.GiftCardTransaction
* @param {Number} tipAmount must be a long integer
*/
GiftCardTransaction.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Tip Amount
* @memberof payments.GiftCardTransaction
* @return {Number} must be a long integer
*/
GiftCardTransaction.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {String} orderId 
*/
GiftCardTransaction.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {String} 
*/
GiftCardTransaction.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Gift Card
*
* @memberof payments.GiftCardTransaction
* @param {payments.GiftCard} card 
*/
GiftCardTransaction.prototype.setCard = function(card) {
  this.card = card;
};

/**
* Get the field value
* Gift Card
* @memberof payments.GiftCardTransaction
* @return {payments.GiftCard} 
*/
GiftCardTransaction.prototype.getCard = function() {
  return this.card;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {Array.<String>} paymentIds An array of 
*/
GiftCardTransaction.prototype.setPaymentIds = function(paymentIds) {
  this.paymentIds = paymentIds;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {Array.<String>} An array of 
*/
GiftCardTransaction.prototype.getPaymentIds = function() {
  return this.paymentIds;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {Boolean} ignorePayment 
*/
GiftCardTransaction.prototype.setIgnorePayment = function(ignorePayment) {
  this.ignorePayment = ignorePayment;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {Boolean} 
*/
GiftCardTransaction.prototype.getIgnorePayment = function() {
  return this.ignorePayment;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {payments.ServiceChargeAmount} serviceChargeAmount 
*/
GiftCardTransaction.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
  this.serviceChargeAmount = serviceChargeAmount;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {payments.ServiceChargeAmount} 
*/
GiftCardTransaction.prototype.getServiceChargeAmount = function() {
  return this.serviceChargeAmount;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
*/
GiftCardTransaction.prototype.setTaxableAmountRates = function(taxableAmountRates) {
  this.taxableAmountRates = taxableAmountRates;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {Array.<payments.TaxableAmountRate>} An array of 
*/
GiftCardTransaction.prototype.getTaxableAmountRates = function() {
  return this.taxableAmountRates;
};

/**
* Set the field value
* Payments that were made for this line item
*
* @memberof payments.GiftCardTransaction
* @param {Array.<payments.LineItemPayment>} lineItems An array of 
*/
GiftCardTransaction.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* Payments that were made for this line item
* @memberof payments.GiftCardTransaction
* @return {Array.<payments.LineItemPayment>} An array of 
*/
GiftCardTransaction.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {String} employeeId 
*/
GiftCardTransaction.prototype.setEmployeeId = function(employeeId) {
  this.employeeId = employeeId;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {String} 
*/
GiftCardTransaction.prototype.getEmployeeId = function() {
  return this.employeeId;
};

/**
* Set the field value
* @memberof payments.GiftCardTransaction
* @param {Boolean} suppressPayment 
*/
GiftCardTransaction.prototype.setSuppressPayment = function(suppressPayment) {
  this.suppressPayment = suppressPayment;
};

/**
* Get the field value
* @memberof payments.GiftCardTransaction
* @return {Boolean} 
*/
GiftCardTransaction.prototype.getSuppressPayment = function() {
  return this.suppressPayment;
};

/**
* @memberof payments.GiftCardTransaction
* @private
*/
GiftCardTransaction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

GiftCardTransaction.prototype.toString = function() {
  return JSON.stringify(this);
};

GiftCardTransaction._meta_ =  {fields:  {}};
GiftCardTransaction._meta_._class_ =  GiftCardTransaction;
GiftCardTransaction._meta_.fields["id"] = {};
GiftCardTransaction._meta_.fields["id"].type = String;
GiftCardTransaction._meta_.fields["amount"] = {};
GiftCardTransaction._meta_.fields["amount"].type = Number;
GiftCardTransaction._meta_.fields["taxAmount"] = {};
GiftCardTransaction._meta_.fields["taxAmount"].type = Number;
GiftCardTransaction._meta_.fields["tipAmount"] = {};
GiftCardTransaction._meta_.fields["tipAmount"].type = Number;
GiftCardTransaction._meta_.fields["orderId"] = {};
GiftCardTransaction._meta_.fields["orderId"].type = String;
GiftCardTransaction._meta_.fields["card"] = {};
GiftCardTransaction._meta_.fields["card"].type = payments_GiftCard;
GiftCardTransaction._meta_.fields["paymentIds"] = {};
GiftCardTransaction._meta_.fields["paymentIds"].type = Array;
GiftCardTransaction._meta_.fields["ignorePayment"] = {};
GiftCardTransaction._meta_.fields["ignorePayment"].type = Boolean;
GiftCardTransaction._meta_.fields["serviceChargeAmount"] = {};
GiftCardTransaction._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;
GiftCardTransaction._meta_.fields["taxableAmountRates"] = {};
GiftCardTransaction._meta_.fields["taxableAmountRates"].type = Array;
GiftCardTransaction._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
GiftCardTransaction._meta_.fields["lineItems"] = {};
GiftCardTransaction._meta_.fields["lineItems"].type = Array;
GiftCardTransaction._meta_.fields["lineItems"].elementType = payments_LineItemPayment;
GiftCardTransaction._meta_.fields["employeeId"] = {};
GiftCardTransaction._meta_.fields["employeeId"].type = String;
GiftCardTransaction._meta_.fields["suppressPayment"] = {};
GiftCardTransaction._meta_.fields["suppressPayment"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = GiftCardTransaction;
}



/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @memberof payments
*/
var PaymentResponse = function() {
  this._class_ = PaymentResponse;
  this.requestSuccessful = undefined;
  this.responseErrorMessage = undefined;
  this.payment = undefined;
  this.clientData = undefined;
};


/**
* Set the field value
* @memberof payments.PaymentResponse
* @param {Boolean} requestSuccessful 
*/
PaymentResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
  this.requestSuccessful = requestSuccessful;
};

/**
* Get the field value
* @memberof payments.PaymentResponse
* @return {Boolean} 
*/
PaymentResponse.prototype.getRequestSuccessful = function() {
  return this.requestSuccessful;
};

/**
* Set the field value
* @memberof payments.PaymentResponse
* @param {String|Null} responseErrorMessage 
*/
PaymentResponse.prototype.setResponseErrorMessage = function(responseErrorMessage) {
  this.responseErrorMessage = responseErrorMessage;
};

/**
* Get the field value
* @memberof payments.PaymentResponse
* @return {String|Null} 
*/
PaymentResponse.prototype.getResponseErrorMessage = function() {
  return this.responseErrorMessage;
};

/**
* Set the field value
* @memberof payments.PaymentResponse
* @param {payments.Payment|Null} payment 
*/
PaymentResponse.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* @memberof payments.PaymentResponse
* @return {payments.Payment|Null} 
*/
PaymentResponse.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* Additional data sent back from the gateway
*
* @memberof payments.PaymentResponse
* @param {Object.<String,String>} clientData A map of <String> to <>
*/
PaymentResponse.prototype.setClientData = function(clientData) {
  this.clientData = clientData;
};

/**
* Get the field value
* Additional data sent back from the gateway
* @memberof payments.PaymentResponse
* @return {Object.<String,String>} A map of <String> to <>
*/
PaymentResponse.prototype.getClientData = function() {
  return this.clientData;
};

/**
* @memberof payments.PaymentResponse
* @private
*/
PaymentResponse.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

PaymentResponse.prototype.toString = function() {
  return JSON.stringify(this);
};

PaymentResponse._meta_ =  {fields:  {}};
PaymentResponse._meta_._class_ =  PaymentResponse;
PaymentResponse._meta_.fields["requestSuccessful"] = {};
PaymentResponse._meta_.fields["requestSuccessful"].type = Boolean;
PaymentResponse._meta_.fields["responseErrorMessage"] = {};
PaymentResponse._meta_.fields["responseErrorMessage"].type = String;
PaymentResponse._meta_.fields["payment"] = {};
PaymentResponse._meta_.fields["payment"].type = payments_Payment;
PaymentResponse._meta_.fields["clientData"] = {};
PaymentResponse._meta_.fields["clientData"].type = Object;

//
// Expose the module.
//
if (true) {
module.exports = PaymentResponse;
}



/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Tag = __webpack_require__(137);
var payments_ParamType = __webpack_require__(136);
var payments_OverrideType = __webpack_require__(135);

/**
* @constructor
* @memberof payments
*/
var TerminalParameter = function() {
  this._class_ = TerminalParameter;
  this.id = undefined;
  this.param = undefined;
  this.paramType = undefined;
  this.data = undefined;
  this.deviceType = undefined;
  this.deviceTypeId = undefined;
  this.overrideName = undefined;
  this.overrideId = undefined;
  this.overrideType = undefined;
  this.aid = undefined;
  this.tagData = undefined;
};


/**
* Set the field value
* Pipe delimited composite key unique identifier
*
* @memberof payments.TerminalParameter
* @param {String} id 
*/
TerminalParameter.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Pipe delimited composite key unique identifier
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} param 
*/
TerminalParameter.prototype.setParam = function(param) {
  this.param = param;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getParam = function() {
  return this.param;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {payments.ParamType} paramType 
*/
TerminalParameter.prototype.setParamType = function(paramType) {
  this.paramType = paramType;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {payments.ParamType} 
*/
TerminalParameter.prototype.getParamType = function() {
  return this.paramType;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} data 
*/
TerminalParameter.prototype.setData = function(data) {
  this.data = data;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getData = function() {
  return this.data;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} deviceType 
*/
TerminalParameter.prototype.setDeviceType = function(deviceType) {
  this.deviceType = deviceType;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getDeviceType = function() {
  return this.deviceType;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} deviceTypeId 
*/
TerminalParameter.prototype.setDeviceTypeId = function(deviceTypeId) {
  this.deviceTypeId = deviceTypeId;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getDeviceTypeId = function() {
  return this.deviceTypeId;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} overrideName 
*/
TerminalParameter.prototype.setOverrideName = function(overrideName) {
  this.overrideName = overrideName;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getOverrideName = function() {
  return this.overrideName;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} overrideId 
*/
TerminalParameter.prototype.setOverrideId = function(overrideId) {
  this.overrideId = overrideId;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getOverrideId = function() {
  return this.overrideId;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {payments.OverrideType} overrideType 
*/
TerminalParameter.prototype.setOverrideType = function(overrideType) {
  this.overrideType = overrideType;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {payments.OverrideType} 
*/
TerminalParameter.prototype.getOverrideType = function() {
  return this.overrideType;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {String} aid 
*/
TerminalParameter.prototype.setAid = function(aid) {
  this.aid = aid;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {String} 
*/
TerminalParameter.prototype.getAid = function() {
  return this.aid;
};

/**
* Set the field value
* @memberof payments.TerminalParameter
* @param {Array.<payments.Tag>} tagData An array of 
*/
TerminalParameter.prototype.setTagData = function(tagData) {
  this.tagData = tagData;
};

/**
* Get the field value
* @memberof payments.TerminalParameter
* @return {Array.<payments.Tag>} An array of 
*/
TerminalParameter.prototype.getTagData = function() {
  return this.tagData;
};

/**
* @memberof payments.TerminalParameter
* @private
*/
TerminalParameter.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TerminalParameter.prototype.toString = function() {
  return JSON.stringify(this);
};

TerminalParameter._meta_ =  {fields:  {}};
TerminalParameter._meta_._class_ =  TerminalParameter;
TerminalParameter._meta_.fields["id"] = {};
TerminalParameter._meta_.fields["id"].type = String;
TerminalParameter._meta_.fields["param"] = {};
TerminalParameter._meta_.fields["param"].type = String;
TerminalParameter._meta_.fields["paramType"] = {};
TerminalParameter._meta_.fields["paramType"].type = payments_ParamType;
TerminalParameter._meta_.fields["data"] = {};
TerminalParameter._meta_.fields["data"].type = String;
TerminalParameter._meta_.fields["deviceType"] = {};
TerminalParameter._meta_.fields["deviceType"].type = String;
TerminalParameter._meta_.fields["deviceTypeId"] = {};
TerminalParameter._meta_.fields["deviceTypeId"].type = String;
TerminalParameter._meta_.fields["overrideName"] = {};
TerminalParameter._meta_.fields["overrideName"].type = String;
TerminalParameter._meta_.fields["overrideId"] = {};
TerminalParameter._meta_.fields["overrideId"].type = String;
TerminalParameter._meta_.fields["overrideType"] = {};
TerminalParameter._meta_.fields["overrideType"].type = payments_OverrideType;
TerminalParameter._meta_.fields["aid"] = {};
TerminalParameter._meta_.fields["aid"].type = String;
TerminalParameter._meta_.fields["tagData"] = {};
TerminalParameter._meta_.fields["tagData"].type = Array;
TerminalParameter._meta_.fields["tagData"].elementType = payments_Tag;

//
// Expose the module.
//
if (true) {
module.exports = TerminalParameter;
}



/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_CreditRefund = __webpack_require__(58);
var payments_Payment = __webpack_require__(4);
var payments_Refund = __webpack_require__(10);
var payments_Credit = __webpack_require__(16);

/**
* @constructor
* @memberof payments
*/
var Transaction = function() {
  this._class_ = Transaction;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.payment = undefined;
  this.refund = undefined;
  this.credit = undefined;
  this.creditRefund = undefined;
};


/**
* Set the field value
* The time when the transaction was recorded on the server
*
* @memberof payments.Transaction
* @param {Number} createdTime must be a long integer
*/
Transaction.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* The time when the transaction was recorded on the server
* @memberof payments.Transaction
* @return {Number} must be a long integer
*/
Transaction.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* The time when the transaction was recorded on the client
*
* @memberof payments.Transaction
* @param {Number} clientCreatedTime must be a long integer
*/
Transaction.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time when the transaction was recorded on the client
* @memberof payments.Transaction
* @return {Number} must be a long integer
*/
Transaction.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* @memberof payments.Transaction
* @param {payments.Payment} payment 
*/
Transaction.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* @memberof payments.Transaction
* @return {payments.Payment} 
*/
Transaction.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof payments.Transaction
* @param {payments.Refund} refund 
*/
Transaction.prototype.setRefund = function(refund) {
  this.refund = refund;
};

/**
* Get the field value
* @memberof payments.Transaction
* @return {payments.Refund} 
*/
Transaction.prototype.getRefund = function() {
  return this.refund;
};

/**
* Set the field value
* @memberof payments.Transaction
* @param {payments.Credit} credit 
*/
Transaction.prototype.setCredit = function(credit) {
  this.credit = credit;
};

/**
* Get the field value
* @memberof payments.Transaction
* @return {payments.Credit} 
*/
Transaction.prototype.getCredit = function() {
  return this.credit;
};

/**
* Set the field value
* @memberof payments.Transaction
* @param {payments.CreditRefund} creditRefund 
*/
Transaction.prototype.setCreditRefund = function(creditRefund) {
  this.creditRefund = creditRefund;
};

/**
* Get the field value
* @memberof payments.Transaction
* @return {payments.CreditRefund} 
*/
Transaction.prototype.getCreditRefund = function() {
  return this.creditRefund;
};

/**
* @memberof payments.Transaction
* @private
*/
Transaction.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

Transaction.prototype.toString = function() {
  return JSON.stringify(this);
};

Transaction._meta_ =  {fields:  {}};
Transaction._meta_._class_ =  Transaction;
Transaction._meta_.fields["createdTime"] = {};
Transaction._meta_.fields["createdTime"].type = Number;
Transaction._meta_.fields["clientCreatedTime"] = {};
Transaction._meta_.fields["clientCreatedTime"].type = Number;
Transaction._meta_.fields["payment"] = {};
Transaction._meta_.fields["payment"].type = payments_Payment;
Transaction._meta_.fields["refund"] = {};
Transaction._meta_.fields["refund"].type = payments_Refund;
Transaction._meta_.fields["credit"] = {};
Transaction._meta_.fields["credit"].type = payments_Credit;
Transaction._meta_.fields["creditRefund"] = {};
Transaction._meta_.fields["creditRefund"].type = payments_CreditRefund;

//
// Expose the module.
//
if (true) {
module.exports = Transaction;
}



/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.printer = printer;
/**
* @namespace printer
*/
function printer() {}


printer.PrintCategory = __webpack_require__(63);
printer.PrintJobStatus = __webpack_require__(64);
printer.Printer = __webpack_require__(9);
printer.PrinterType = __webpack_require__(100);

//
// Expose the module.
//
if (true) {
  module.exports = printer;
}
    

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.remotemessage = remotemessage;
/**
* @namespace remotemessage
*/
function remotemessage() {}


remotemessage.AcknowledgementMessage = __webpack_require__(233);
remotemessage.ActivityMessageFromActivity = __webpack_require__(234);
remotemessage.ActivityMessageToActivity = __webpack_require__(235);
remotemessage.ActivityRequest = __webpack_require__(236);
remotemessage.ActivityResponseMessage = __webpack_require__(237);
remotemessage.AddDiscountAction = __webpack_require__(138);
remotemessage.AddLineItemAction = __webpack_require__(139);
remotemessage.BreakMessage = __webpack_require__(238);
remotemessage.CapturePreAuthMessage = __webpack_require__(239);
remotemessage.CapturePreAuthResponseMessage = __webpack_require__(240);
remotemessage.CardDataRequestMessage = __webpack_require__(241);
remotemessage.CardDataResponseMessage = __webpack_require__(242);
remotemessage.CashbackSelectedMessage = __webpack_require__(243);
remotemessage.CloseoutRequestMessage = __webpack_require__(244);
remotemessage.CloseoutResponseMessage = __webpack_require__(245);
remotemessage.ConfirmPaymentMessage = __webpack_require__(246);
remotemessage.DiscoveryRequestMessage = __webpack_require__(247);
remotemessage.DiscoveryResponseMessage = __webpack_require__(248);
remotemessage.ErrorCode = __webpack_require__(66);
remotemessage.ErrorCodeEnum = __webpack_require__(249);
remotemessage.ExternalDeviceState = __webpack_require__(32);
remotemessage.ExternalDeviceStateData = __webpack_require__(141);
remotemessage.ExternalDeviceStateEnum = __webpack_require__(250);
remotemessage.ExternalDeviceSubState = __webpack_require__(142);
remotemessage.FinishCancelMessage = __webpack_require__(251);
remotemessage.FinishOkMessage = __webpack_require__(252);
remotemessage.ForceConnectMessage = __webpack_require__(253);
remotemessage.GetPrintersRequestMessage = __webpack_require__(254);
remotemessage.GetPrintersResponseMessage = __webpack_require__(255);
remotemessage.ImagePrintMessage = __webpack_require__(256);
remotemessage.InputOption = __webpack_require__(143);
remotemessage.KeyPress = __webpack_require__(33);
remotemessage.KeyPressEnum = __webpack_require__(257);
remotemessage.KeyPressMessage = __webpack_require__(258);
remotemessage.LastMessageRequestMessage = __webpack_require__(259);
remotemessage.LastMessageResponseMessage = __webpack_require__(260);
remotemessage.LogLevelEnum = __webpack_require__(144);
remotemessage.LogMessage = __webpack_require__(261);
remotemessage.Message = __webpack_require__(1);
remotemessage.Method = __webpack_require__(0);
remotemessage.OpenCashDrawerMessage = __webpack_require__(262);
remotemessage.OrderActionAddDiscountMessage = __webpack_require__(263);
remotemessage.OrderActionAddLineItemMessage = __webpack_require__(264);
remotemessage.OrderActionRemoveDiscountMessage = __webpack_require__(265);
remotemessage.OrderActionRemoveLineItemMessage = __webpack_require__(266);
remotemessage.OrderActionResponse = __webpack_require__(147);
remotemessage.OrderActionResponseMessage = __webpack_require__(267);
remotemessage.OrderUpdateMessage = __webpack_require__(268);
remotemessage.PairingCodeMessage = __webpack_require__(269);
remotemessage.PairingRequestMessage = __webpack_require__(148);
remotemessage.PairingResponseMessage = __webpack_require__(270);
remotemessage.PairingState = __webpack_require__(149);
remotemessage.PartialAuthMessage = __webpack_require__(271);
remotemessage.PayIntent = __webpack_require__(65);
remotemessage.PaymentConfirmedMessage = __webpack_require__(272);
remotemessage.PaymentRejectedMessage = __webpack_require__(273);
remotemessage.PaymentVoidedMessage = __webpack_require__(274);
remotemessage.PrintJobStatusRequestMessage = __webpack_require__(275);
remotemessage.PrintJobStatusResponseMessage = __webpack_require__(276);
remotemessage.QueryStatus = __webpack_require__(67);
remotemessage.QueryStatusEnum = __webpack_require__(277);
remotemessage.RefundRequestMessage = __webpack_require__(278);
remotemessage.RefundResponseMessage = __webpack_require__(279);
remotemessage.RemoteError = __webpack_require__(280);
remotemessage.RemoteMessage = __webpack_require__(281);
remotemessage.RemoteMessageType = __webpack_require__(150);
remotemessage.RemoveDiscountAction = __webpack_require__(145);
remotemessage.RemoveLineItemAction = __webpack_require__(146);
remotemessage.ResetDeviceResponseMessage = __webpack_require__(282);
remotemessage.ResetMessage = __webpack_require__(283);
remotemessage.ResultStatus = __webpack_require__(8);
remotemessage.ResultStatusEnum = __webpack_require__(284);
remotemessage.RetrieveCustomActivitiesRequestMessage = __webpack_require__(285);
remotemessage.RetrieveCustomActivitiesResponseMessage = __webpack_require__(286);
remotemessage.RetrieveDeviceStatusRequestMessage = __webpack_require__(288);
remotemessage.RetrieveDeviceStatusResponseMessage = __webpack_require__(289);
remotemessage.RetrievePaymentRequestMessage = __webpack_require__(290);
remotemessage.RetrievePaymentResponseMessage = __webpack_require__(291);
remotemessage.RetrievePendingPaymentsMessage = __webpack_require__(292);
remotemessage.RetrievePendingPaymentsResponseMessage = __webpack_require__(293);
remotemessage.ShowPaymentReceiptOptionsMessage = __webpack_require__(294);
remotemessage.ShutDownMessage = __webpack_require__(295);
remotemessage.SignatureVerifiedMessage = __webpack_require__(296);
remotemessage.TerminalMessage = __webpack_require__(297);
remotemessage.TextPrintMessage = __webpack_require__(298);
remotemessage.ThankYouMessage = __webpack_require__(299);
remotemessage.TipAddedMessage = __webpack_require__(300);
remotemessage.TipAdjustMessage = __webpack_require__(301);
remotemessage.TipAdjustResponseMessage = __webpack_require__(302);
remotemessage.TransactionType = __webpack_require__(140);
remotemessage.TxStartRequestMessage = __webpack_require__(303);
remotemessage.TxStartResponseMessage = __webpack_require__(304);
remotemessage.TxStartResponseResult = __webpack_require__(151);
remotemessage.TxState = __webpack_require__(34);
remotemessage.TxStateEnum = __webpack_require__(305);
remotemessage.TxStateMessage = __webpack_require__(306);
remotemessage.UiDirection = __webpack_require__(152);
remotemessage.UiState = __webpack_require__(153);
remotemessage.UiStateMessage = __webpack_require__(307);
remotemessage.VaultCardMessage = __webpack_require__(308);
remotemessage.VaultCardResponseMessage = __webpack_require__(309);
remotemessage.VerifySignatureMessage = __webpack_require__(310);
remotemessage.VoidPaymentMessage = __webpack_require__(311);
remotemessage.WelcomeMessage = __webpack_require__(312);

//
// Expose the module.
//
if (true) {
  module.exports = remotemessage;
}
    

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var AcknowledgementMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = AcknowledgementMessage;
  this.setMethod(remotemessage_Method["ACK"]);
  this.sourceMessageId = undefined;
};

AcknowledgementMessage.prototype = Object.create(remotemessage_Message.prototype);
AcknowledgementMessage.prototype.constructor = AcknowledgementMessage;

/**
* Set the field value
* The remote message id that is being acknowledged
*
* @memberof remotemessage.AcknowledgementMessage
* @param {String} sourceMessageId 
*/
AcknowledgementMessage.prototype.setSourceMessageId = function(sourceMessageId) {
  this.sourceMessageId = sourceMessageId;
};

/**
* Get the field value
* The remote message id that is being acknowledged
* @memberof remotemessage.AcknowledgementMessage
* @return {String} 
*/
AcknowledgementMessage.prototype.getSourceMessageId = function() {
  return this.sourceMessageId;
};

AcknowledgementMessage._meta_ =  {fields:  {}};
AcknowledgementMessage._meta_._class_ =  AcknowledgementMessage;
AcknowledgementMessage._meta_._superMeta_ = remotemessage_Message._meta_;
AcknowledgementMessage._meta_.fields["sourceMessageId"] = {};
AcknowledgementMessage._meta_.fields["sourceMessageId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = AcknowledgementMessage;
}



/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ActivityMessageFromActivity = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ActivityMessageFromActivity;
  this.setMethod(remotemessage_Method["ACTIVITY_MESSAGE_FROM_ACTIVITY"]);
  this.action = undefined;
  this.payload = undefined;
};

ActivityMessageFromActivity.prototype = Object.create(remotemessage_Message.prototype);
ActivityMessageFromActivity.prototype.constructor = ActivityMessageFromActivity;

/**
* Set the field value
* The name of the activity/action being sent from a running custom activity
*
* @memberof remotemessage.ActivityMessageFromActivity
* @param {String} action 
*/
ActivityMessageFromActivity.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the activity/action being sent from a running custom activity
* @memberof remotemessage.ActivityMessageFromActivity
* @return {String} 
*/
ActivityMessageFromActivity.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Data for this activity
*
* @memberof remotemessage.ActivityMessageFromActivity
* @param {String} payload 
*/
ActivityMessageFromActivity.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Data for this activity
* @memberof remotemessage.ActivityMessageFromActivity
* @return {String} 
*/
ActivityMessageFromActivity.prototype.getPayload = function() {
  return this.payload;
};

ActivityMessageFromActivity._meta_ =  {fields:  {}};
ActivityMessageFromActivity._meta_._class_ =  ActivityMessageFromActivity;
ActivityMessageFromActivity._meta_._superMeta_ = remotemessage_Message._meta_;
ActivityMessageFromActivity._meta_.fields["action"] = {};
ActivityMessageFromActivity._meta_.fields["action"].type = String;
ActivityMessageFromActivity._meta_.fields["payload"] = {};
ActivityMessageFromActivity._meta_.fields["payload"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ActivityMessageFromActivity;
}



/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ActivityMessageToActivity = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ActivityMessageToActivity;
  this.setMethod(remotemessage_Method["ACTIVITY_MESSAGE_TO_ACTIVITY"]);
  this.action = undefined;
  this.payload = undefined;
};

ActivityMessageToActivity.prototype = Object.create(remotemessage_Message.prototype);
ActivityMessageToActivity.prototype.constructor = ActivityMessageToActivity;

/**
* Set the field value
* The name of the activity/action being sent to a running custom activity
*
* @memberof remotemessage.ActivityMessageToActivity
* @param {String} action 
*/
ActivityMessageToActivity.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the activity/action being sent to a running custom activity
* @memberof remotemessage.ActivityMessageToActivity
* @return {String} 
*/
ActivityMessageToActivity.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Data for this activity
*
* @memberof remotemessage.ActivityMessageToActivity
* @param {String} payload 
*/
ActivityMessageToActivity.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Data for this activity
* @memberof remotemessage.ActivityMessageToActivity
* @return {String} 
*/
ActivityMessageToActivity.prototype.getPayload = function() {
  return this.payload;
};

ActivityMessageToActivity._meta_ =  {fields:  {}};
ActivityMessageToActivity._meta_._class_ =  ActivityMessageToActivity;
ActivityMessageToActivity._meta_._superMeta_ = remotemessage_Message._meta_;
ActivityMessageToActivity._meta_.fields["action"] = {};
ActivityMessageToActivity._meta_.fields["action"].type = String;
ActivityMessageToActivity._meta_.fields["payload"] = {};
ActivityMessageToActivity._meta_.fields["payload"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ActivityMessageToActivity;
}



/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ActivityRequest = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ActivityRequest;
  this.setMethod(remotemessage_Method["ACTIVITY_REQUEST"]);
  this.action = undefined;
  this.payload = undefined;
  this.nonBlocking = undefined;
  this.forceLaunch = undefined;
};

ActivityRequest.prototype = Object.create(remotemessage_Message.prototype);
ActivityRequest.prototype.constructor = ActivityRequest;

/**
* Set the field value
* The name of the action for this activity
*
* @memberof remotemessage.ActivityRequest
* @param {String} action 
*/
ActivityRequest.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the action for this activity
* @memberof remotemessage.ActivityRequest
* @return {String} 
*/
ActivityRequest.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Data for this activity
*
* @memberof remotemessage.ActivityRequest
* @param {String} payload 
*/
ActivityRequest.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Data for this activity
* @memberof remotemessage.ActivityRequest
* @return {String} 
*/
ActivityRequest.prototype.getPayload = function() {
  return this.payload;
};

/**
* Set the field value
* If true, then the activity can be stopped in regular execution.
*
* @memberof remotemessage.ActivityRequest
* @param {Boolean} nonBlocking 
*/
ActivityRequest.prototype.setNonBlocking = function(nonBlocking) {
  this.nonBlocking = nonBlocking;
};

/**
* Get the field value
* If true, then the activity can be stopped in regular execution.
* @memberof remotemessage.ActivityRequest
* @return {Boolean} 
*/
ActivityRequest.prototype.getNonBlocking = function() {
  return this.nonBlocking;
};

/**
* Set the field value
* If true, then the activity will cancel other activity and run.  This includes payment activity.
*
* @memberof remotemessage.ActivityRequest
* @param {Boolean} forceLaunch 
*/
ActivityRequest.prototype.setForceLaunch = function(forceLaunch) {
  this.forceLaunch = forceLaunch;
};

/**
* Get the field value
* If true, then the activity will cancel other activity and run.  This includes payment activity.
* @memberof remotemessage.ActivityRequest
* @return {Boolean} 
*/
ActivityRequest.prototype.getForceLaunch = function() {
  return this.forceLaunch;
};

ActivityRequest._meta_ =  {fields:  {}};
ActivityRequest._meta_._class_ =  ActivityRequest;
ActivityRequest._meta_._superMeta_ = remotemessage_Message._meta_;
ActivityRequest._meta_.fields["action"] = {};
ActivityRequest._meta_.fields["action"].type = String;
ActivityRequest._meta_.fields["payload"] = {};
ActivityRequest._meta_.fields["payload"].type = String;
ActivityRequest._meta_.fields["nonBlocking"] = {};
ActivityRequest._meta_.fields["nonBlocking"].type = Boolean;
ActivityRequest._meta_.fields["forceLaunch"] = {};
ActivityRequest._meta_.fields["forceLaunch"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = ActivityRequest;
}



/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ActivityResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ActivityResponseMessage;
  this.setMethod(remotemessage_Method["ACTIVITY_RESPONSE"]);
  this.resultCode = undefined;
  this.failReason = undefined;
  this.payload = undefined;
  this.action = undefined;
};

ActivityResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
ActivityResponseMessage.prototype.constructor = ActivityResponseMessage;

/**
* Set the field value
* The result code after running this activity
*
* @memberof remotemessage.ActivityResponseMessage
* @param {Number} resultCode must be a long integer
*/
ActivityResponseMessage.prototype.setResultCode = function(resultCode) {
  this.resultCode = resultCode;
};

/**
* Get the field value
* The result code after running this activity
* @memberof remotemessage.ActivityResponseMessage
* @return {Number} must be a long integer
*/
ActivityResponseMessage.prototype.getResultCode = function() {
  return this.resultCode;
};

/**
* Set the field value
* If this activity failed, the reason for the failure
*
* @memberof remotemessage.ActivityResponseMessage
* @param {String} failReason 
*/
ActivityResponseMessage.prototype.setFailReason = function(failReason) {
  this.failReason = failReason;
};

/**
* Get the field value
* If this activity failed, the reason for the failure
* @memberof remotemessage.ActivityResponseMessage
* @return {String} 
*/
ActivityResponseMessage.prototype.getFailReason = function() {
  return this.failReason;
};

/**
* Set the field value
* Response data for this activity
*
* @memberof remotemessage.ActivityResponseMessage
* @param {String} payload 
*/
ActivityResponseMessage.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Response data for this activity
* @memberof remotemessage.ActivityResponseMessage
* @return {String} 
*/
ActivityResponseMessage.prototype.getPayload = function() {
  return this.payload;
};

/**
* Set the field value
* The name of the action for this activity
*
* @memberof remotemessage.ActivityResponseMessage
* @param {String} action 
*/
ActivityResponseMessage.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the action for this activity
* @memberof remotemessage.ActivityResponseMessage
* @return {String} 
*/
ActivityResponseMessage.prototype.getAction = function() {
  return this.action;
};

ActivityResponseMessage._meta_ =  {fields:  {}};
ActivityResponseMessage._meta_._class_ =  ActivityResponseMessage;
ActivityResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ActivityResponseMessage._meta_.fields["resultCode"] = {};
ActivityResponseMessage._meta_.fields["resultCode"].type = Number;
ActivityResponseMessage._meta_.fields["failReason"] = {};
ActivityResponseMessage._meta_.fields["failReason"].type = String;
ActivityResponseMessage._meta_.fields["payload"] = {};
ActivityResponseMessage._meta_.fields["payload"].type = String;
ActivityResponseMessage._meta_.fields["action"] = {};
ActivityResponseMessage._meta_.fields["action"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ActivityResponseMessage;
}



/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var BreakMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = BreakMessage;
  this.setMethod(remotemessage_Method["BREAK"]);
};

BreakMessage.prototype = Object.create(remotemessage_Message.prototype);
BreakMessage.prototype.constructor = BreakMessage;

BreakMessage._meta_ =  {fields:  {}};
BreakMessage._meta_._class_ =  BreakMessage;
BreakMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = BreakMessage;
}



/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CapturePreAuthMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CapturePreAuthMessage;
  this.setMethod(remotemessage_Method["CAPTURE_PREAUTH"]);
  this.amount = undefined;
  this.tipAmount = undefined;
  this.paymentId = undefined;
};

CapturePreAuthMessage.prototype = Object.create(remotemessage_Message.prototype);
CapturePreAuthMessage.prototype.constructor = CapturePreAuthMessage;

/**
* Set the field value
* Total amount paid
*
* @memberof remotemessage.CapturePreAuthMessage
* @param {Number} amount must be a long integer
*/
CapturePreAuthMessage.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotemessage.CapturePreAuthMessage
* @return {Number} must be a long integer
*/
CapturePreAuthMessage.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotemessage.CapturePreAuthMessage
* @param {Number|Null} tipAmount must be a long integer, 
*/
CapturePreAuthMessage.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotemessage.CapturePreAuthMessage
* @return {Number|Null} must be a long integer, 
*/
CapturePreAuthMessage.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.CapturePreAuthMessage
* @param {String} paymentId 
*/
CapturePreAuthMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.CapturePreAuthMessage
* @return {String} 
*/
CapturePreAuthMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

CapturePreAuthMessage._meta_ =  {fields:  {}};
CapturePreAuthMessage._meta_._class_ =  CapturePreAuthMessage;
CapturePreAuthMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CapturePreAuthMessage._meta_.fields["amount"] = {};
CapturePreAuthMessage._meta_.fields["amount"].type = Number;
CapturePreAuthMessage._meta_.fields["tipAmount"] = {};
CapturePreAuthMessage._meta_.fields["tipAmount"].type = Number;
CapturePreAuthMessage._meta_.fields["paymentId"] = {};
CapturePreAuthMessage._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CapturePreAuthMessage;
}



/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CapturePreAuthResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CapturePreAuthResponseMessage;
  this.setMethod(remotemessage_Method["CAPTURE_PREAUTH_RESPONSE"]);
  this.status = undefined;
  this.reason = undefined;
  this.paymentId = undefined;
  this.amount = undefined;
  this.tipAmount = undefined;
};

CapturePreAuthResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
CapturePreAuthResponseMessage.prototype.constructor = CapturePreAuthResponseMessage;

/**
* Set the field value
* The status of the request.
*
* @memberof remotemessage.CapturePreAuthResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
CapturePreAuthResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* The status of the request.
* @memberof remotemessage.CapturePreAuthResponseMessage
* @return {remotemessage.ResultStatus} 
*/
CapturePreAuthResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* Detail message from the server.
*
* @memberof remotemessage.CapturePreAuthResponseMessage
* @param {String} reason 
*/
CapturePreAuthResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Detail message from the server.
* @memberof remotemessage.CapturePreAuthResponseMessage
* @return {String} 
*/
CapturePreAuthResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.CapturePreAuthResponseMessage
* @param {String} paymentId 
*/
CapturePreAuthResponseMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.CapturePreAuthResponseMessage
* @return {String} 
*/
CapturePreAuthResponseMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* Total amount paid
*
* @memberof remotemessage.CapturePreAuthResponseMessage
* @param {Number} amount must be a long integer
*/
CapturePreAuthResponseMessage.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotemessage.CapturePreAuthResponseMessage
* @return {Number} must be a long integer
*/
CapturePreAuthResponseMessage.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotemessage.CapturePreAuthResponseMessage
* @param {Number|Null} tipAmount must be a long integer, 
*/
CapturePreAuthResponseMessage.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotemessage.CapturePreAuthResponseMessage
* @return {Number|Null} must be a long integer, 
*/
CapturePreAuthResponseMessage.prototype.getTipAmount = function() {
  return this.tipAmount;
};

CapturePreAuthResponseMessage._meta_ =  {fields:  {}};
CapturePreAuthResponseMessage._meta_._class_ =  CapturePreAuthResponseMessage;
CapturePreAuthResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CapturePreAuthResponseMessage._meta_.fields["status"] = {};
CapturePreAuthResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
CapturePreAuthResponseMessage._meta_.fields["reason"] = {};
CapturePreAuthResponseMessage._meta_.fields["reason"].type = String;
CapturePreAuthResponseMessage._meta_.fields["paymentId"] = {};
CapturePreAuthResponseMessage._meta_.fields["paymentId"].type = String;
CapturePreAuthResponseMessage._meta_.fields["amount"] = {};
CapturePreAuthResponseMessage._meta_.fields["amount"].type = Number;
CapturePreAuthResponseMessage._meta_.fields["tipAmount"] = {};
CapturePreAuthResponseMessage._meta_.fields["tipAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = CapturePreAuthResponseMessage;
}



/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_PayIntent = __webpack_require__(65);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CardDataRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CardDataRequestMessage;
  this.setMethod(remotemessage_Method["CARD_DATA"]);
  this.payIntent = undefined;
};

CardDataRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
CardDataRequestMessage.prototype.constructor = CardDataRequestMessage;

/**
* Set the field value
* The payIntent
*
* @memberof remotemessage.CardDataRequestMessage
* @param {remotemessage.PayIntent} payIntent 
*/
CardDataRequestMessage.prototype.setPayIntent = function(payIntent) {
  this.payIntent = payIntent;
};

/**
* Get the field value
* The payIntent
* @memberof remotemessage.CardDataRequestMessage
* @return {remotemessage.PayIntent} 
*/
CardDataRequestMessage.prototype.getPayIntent = function() {
  return this.payIntent;
};

CardDataRequestMessage._meta_ =  {fields:  {}};
CardDataRequestMessage._meta_._class_ =  CardDataRequestMessage;
CardDataRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CardDataRequestMessage._meta_.fields["payIntent"] = {};
CardDataRequestMessage._meta_.fields["payIntent"].type = remotemessage_PayIntent;

//
// Expose the module.
//
if (true) {
module.exports = CardDataRequestMessage;
}



/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var remotemessage_Message = __webpack_require__(1);
var base_CardData = __webpack_require__(39);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CardDataResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CardDataResponseMessage;
  this.setMethod(remotemessage_Method["CARD_DATA_RESPONSE"]);
  this.reason = undefined;
  this.status = undefined;
  this.cardData = undefined;
};

CardDataResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
CardDataResponseMessage.prototype.constructor = CardDataResponseMessage;

/**
* Set the field value
* May be populated when the operation fails.
*
* @memberof remotemessage.CardDataResponseMessage
* @param {String} reason 
*/
CardDataResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* May be populated when the operation fails.
* @memberof remotemessage.CardDataResponseMessage
* @return {String} 
*/
CardDataResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* @memberof remotemessage.CardDataResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
CardDataResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.CardDataResponseMessage
* @return {remotemessage.ResultStatus} 
*/
CardDataResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The data for the card
*
* @memberof remotemessage.CardDataResponseMessage
* @param {base.CardData} cardData 
*/
CardDataResponseMessage.prototype.setCardData = function(cardData) {
  this.cardData = cardData;
};

/**
* Get the field value
* The data for the card
* @memberof remotemessage.CardDataResponseMessage
* @return {base.CardData} 
*/
CardDataResponseMessage.prototype.getCardData = function() {
  return this.cardData;
};

CardDataResponseMessage._meta_ =  {fields:  {}};
CardDataResponseMessage._meta_._class_ =  CardDataResponseMessage;
CardDataResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CardDataResponseMessage._meta_.fields["reason"] = {};
CardDataResponseMessage._meta_.fields["reason"].type = String;
CardDataResponseMessage._meta_.fields["status"] = {};
CardDataResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
CardDataResponseMessage._meta_.fields["cardData"] = {};
CardDataResponseMessage._meta_.fields["cardData"].type = base_CardData;

//
// Expose the module.
//
if (true) {
module.exports = CardDataResponseMessage;
}



/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CashbackSelectedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CashbackSelectedMessage;
  this.setMethod(remotemessage_Method["CASHBACK_SELECTED"]);
  this.cashbackAmount = undefined;
};

CashbackSelectedMessage.prototype = Object.create(remotemessage_Message.prototype);
CashbackSelectedMessage.prototype.constructor = CashbackSelectedMessage;

/**
* Set the field value
* Amount of cash selected
*
* @memberof remotemessage.CashbackSelectedMessage
* @param {Number} cashbackAmount must be a long integer
*/
CashbackSelectedMessage.prototype.setCashbackAmount = function(cashbackAmount) {
  this.cashbackAmount = cashbackAmount;
};

/**
* Get the field value
* Amount of cash selected
* @memberof remotemessage.CashbackSelectedMessage
* @return {Number} must be a long integer
*/
CashbackSelectedMessage.prototype.getCashbackAmount = function() {
  return this.cashbackAmount;
};

CashbackSelectedMessage._meta_ =  {fields:  {}};
CashbackSelectedMessage._meta_._class_ =  CashbackSelectedMessage;
CashbackSelectedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CashbackSelectedMessage._meta_.fields["cashbackAmount"] = {};
CashbackSelectedMessage._meta_.fields["cashbackAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = CashbackSelectedMessage;
}



/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CloseoutRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CloseoutRequestMessage;
  this.setMethod(remotemessage_Method["CLOSEOUT_REQUEST"]);
  this.allowOpenTabs = undefined;
  this.batchId = undefined;
};

CloseoutRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
CloseoutRequestMessage.prototype.constructor = CloseoutRequestMessage;

/**
* Set the field value
* If true then open tabs can still be closed out.
*
* @memberof remotemessage.CloseoutRequestMessage
* @param {Boolean} allowOpenTabs 
*/
CloseoutRequestMessage.prototype.setAllowOpenTabs = function(allowOpenTabs) {
  this.allowOpenTabs = allowOpenTabs;
};

/**
* Get the field value
* If true then open tabs can still be closed out.
* @memberof remotemessage.CloseoutRequestMessage
* @return {Boolean} 
*/
CloseoutRequestMessage.prototype.getAllowOpenTabs = function() {
  return this.allowOpenTabs;
};

/**
* Set the field value
* Reserved for future use.  Specifies the batch to close.
*
* @memberof remotemessage.CloseoutRequestMessage
* @param {String} batchId 
*/
CloseoutRequestMessage.prototype.setBatchId = function(batchId) {
  this.batchId = batchId;
};

/**
* Get the field value
* Reserved for future use.  Specifies the batch to close.
* @memberof remotemessage.CloseoutRequestMessage
* @return {String} 
*/
CloseoutRequestMessage.prototype.getBatchId = function() {
  return this.batchId;
};

CloseoutRequestMessage._meta_ =  {fields:  {}};
CloseoutRequestMessage._meta_._class_ =  CloseoutRequestMessage;
CloseoutRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CloseoutRequestMessage._meta_.fields["allowOpenTabs"] = {};
CloseoutRequestMessage._meta_.fields["allowOpenTabs"].type = Boolean;
CloseoutRequestMessage._meta_.fields["batchId"] = {};
CloseoutRequestMessage._meta_.fields["batchId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CloseoutRequestMessage;
}



/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var payments_Batch = __webpack_require__(59);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var CloseoutResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = CloseoutResponseMessage;
  this.setMethod(remotemessage_Method["CLOSEOUT_RESPONSE"]);
  this.reason = undefined;
  this.status = undefined;
  this.batch = undefined;
};

CloseoutResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
CloseoutResponseMessage.prototype.constructor = CloseoutResponseMessage;

/**
* Set the field value
* Detail information.
*
* @memberof remotemessage.CloseoutResponseMessage
* @param {String} reason 
*/
CloseoutResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Detail information.
* @memberof remotemessage.CloseoutResponseMessage
* @return {String} 
*/
CloseoutResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* The status of the request.
*
* @memberof remotemessage.CloseoutResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
CloseoutResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* The status of the request.
* @memberof remotemessage.CloseoutResponseMessage
* @return {remotemessage.ResultStatus} 
*/
CloseoutResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The closeout info.
*
* @memberof remotemessage.CloseoutResponseMessage
* @param {payments.Batch} batch 
*/
CloseoutResponseMessage.prototype.setBatch = function(batch) {
  this.batch = batch;
};

/**
* Get the field value
* The closeout info.
* @memberof remotemessage.CloseoutResponseMessage
* @return {payments.Batch} 
*/
CloseoutResponseMessage.prototype.getBatch = function() {
  return this.batch;
};

CloseoutResponseMessage._meta_ =  {fields:  {}};
CloseoutResponseMessage._meta_._class_ =  CloseoutResponseMessage;
CloseoutResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
CloseoutResponseMessage._meta_.fields["reason"] = {};
CloseoutResponseMessage._meta_.fields["reason"].type = String;
CloseoutResponseMessage._meta_.fields["status"] = {};
CloseoutResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
CloseoutResponseMessage._meta_.fields["batch"] = {};
CloseoutResponseMessage._meta_.fields["batch"].type = payments_Batch;

//
// Expose the module.
//
if (true) {
module.exports = CloseoutResponseMessage;
}



/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var base_Challenge = __webpack_require__(40);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ConfirmPaymentMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ConfirmPaymentMessage;
  this.setMethod(remotemessage_Method["CONFIRM_PAYMENT_MESSAGE"]);
  this.payment = undefined;
  this.challenges = undefined;
};

ConfirmPaymentMessage.prototype = Object.create(remotemessage_Message.prototype);
ConfirmPaymentMessage.prototype.constructor = ConfirmPaymentMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.ConfirmPaymentMessage
* @param {payments.Payment} payment 
*/
ConfirmPaymentMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.ConfirmPaymentMessage
* @return {payments.Payment} 
*/
ConfirmPaymentMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* The challenges for the payment.
*
* @memberof remotemessage.ConfirmPaymentMessage
* @param {Array.<base.Challenge>} challenges An array of 
*/
ConfirmPaymentMessage.prototype.setChallenges = function(challenges) {
  this.challenges = challenges;
};

/**
* Get the field value
* The challenges for the payment.
* @memberof remotemessage.ConfirmPaymentMessage
* @return {Array.<base.Challenge>} An array of 
*/
ConfirmPaymentMessage.prototype.getChallenges = function() {
  return this.challenges;
};

ConfirmPaymentMessage._meta_ =  {fields:  {}};
ConfirmPaymentMessage._meta_._class_ =  ConfirmPaymentMessage;
ConfirmPaymentMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ConfirmPaymentMessage._meta_.fields["payment"] = {};
ConfirmPaymentMessage._meta_.fields["payment"].type = payments_Payment;
ConfirmPaymentMessage._meta_.fields["challenges"] = {};
ConfirmPaymentMessage._meta_.fields["challenges"].type = Array;
ConfirmPaymentMessage._meta_.fields["challenges"].elementType = base_Challenge;

//
// Expose the module.
//
if (true) {
module.exports = ConfirmPaymentMessage;
}



/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var DiscoveryRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = DiscoveryRequestMessage;
  this.setMethod(remotemessage_Method["DISCOVERY_REQUEST"]);
  this.supportsOrderModification = undefined;
};

DiscoveryRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
DiscoveryRequestMessage.prototype.constructor = DiscoveryRequestMessage;

/**
* Set the field value
* If true then order modification operations are supported.
*
* @memberof remotemessage.DiscoveryRequestMessage
* @param {Boolean|Null} supportsOrderModification 
*/
DiscoveryRequestMessage.prototype.setSupportsOrderModification = function(supportsOrderModification) {
  this.supportsOrderModification = supportsOrderModification;
};

/**
* Get the field value
* If true then order modification operations are supported.
* @memberof remotemessage.DiscoveryRequestMessage
* @return {Boolean|Null} 
*/
DiscoveryRequestMessage.prototype.getSupportsOrderModification = function() {
  return this.supportsOrderModification;
};

DiscoveryRequestMessage._meta_ =  {fields:  {}};
DiscoveryRequestMessage._meta_._class_ =  DiscoveryRequestMessage;
DiscoveryRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
DiscoveryRequestMessage._meta_.fields["supportsOrderModification"] = {};
DiscoveryRequestMessage._meta_.fields["supportsOrderModification"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = DiscoveryRequestMessage;
}



/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var DiscoveryResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = DiscoveryResponseMessage;
  this.setMethod(remotemessage_Method["DISCOVERY_RESPONSE"]);
  this.merchantId = undefined;
  this.merchantName = undefined;
  this.merchantMId = undefined;
  this.name = undefined;
  this.serial = undefined;
  this.model = undefined;
  this.ready = "false";
  this.supportsTipAdjust = "false";
  this.supportsManualRefund = "false";
  this.supportsMultiPayToken = "false";
  this.supportsAcknowledgement = "false";
};

DiscoveryResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
DiscoveryResponseMessage.prototype.constructor = DiscoveryResponseMessage;

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} merchantId 
*/
DiscoveryResponseMessage.prototype.setMerchantId = function(merchantId) {
  this.merchantId = merchantId;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getMerchantId = function() {
  return this.merchantId;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} merchantName 
*/
DiscoveryResponseMessage.prototype.setMerchantName = function(merchantName) {
  this.merchantName = merchantName;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getMerchantName = function() {
  return this.merchantName;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} merchantMId 
*/
DiscoveryResponseMessage.prototype.setMerchantMId = function(merchantMId) {
  this.merchantMId = merchantMId;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getMerchantMId = function() {
  return this.merchantMId;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} name 
*/
DiscoveryResponseMessage.prototype.setName = function(name) {
  this.name = name;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getName = function() {
  return this.name;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} serial 
*/
DiscoveryResponseMessage.prototype.setSerial = function(serial) {
  this.serial = serial;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getSerial = function() {
  return this.serial;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {String} model 
*/
DiscoveryResponseMessage.prototype.setModel = function(model) {
  this.model = model;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {String} 
*/
DiscoveryResponseMessage.prototype.getModel = function() {
  return this.model;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {Boolean} ready 
*/
DiscoveryResponseMessage.prototype.setReady = function(ready) {
  this.ready = ready;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {Boolean} 
*/
DiscoveryResponseMessage.prototype.getReady = function() {
  return this.ready;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {Boolean} supportsTipAdjust 
*/
DiscoveryResponseMessage.prototype.setSupportsTipAdjust = function(supportsTipAdjust) {
  this.supportsTipAdjust = supportsTipAdjust;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {Boolean} 
*/
DiscoveryResponseMessage.prototype.getSupportsTipAdjust = function() {
  return this.supportsTipAdjust;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {Boolean} supportsManualRefund 
*/
DiscoveryResponseMessage.prototype.setSupportsManualRefund = function(supportsManualRefund) {
  this.supportsManualRefund = supportsManualRefund;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {Boolean} 
*/
DiscoveryResponseMessage.prototype.getSupportsManualRefund = function() {
  return this.supportsManualRefund;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {Boolean} supportsMultiPayToken 
*/
DiscoveryResponseMessage.prototype.setSupportsMultiPayToken = function(supportsMultiPayToken) {
  this.supportsMultiPayToken = supportsMultiPayToken;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {Boolean} 
*/
DiscoveryResponseMessage.prototype.getSupportsMultiPayToken = function() {
  return this.supportsMultiPayToken;
};

/**
* Set the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @param {Boolean} supportsAcknowledgement 
*/
DiscoveryResponseMessage.prototype.setSupportsAcknowledgement = function(supportsAcknowledgement) {
  this.supportsAcknowledgement = supportsAcknowledgement;
};

/**
* Get the field value
* @memberof remotemessage.DiscoveryResponseMessage
* @return {Boolean} 
*/
DiscoveryResponseMessage.prototype.getSupportsAcknowledgement = function() {
  return this.supportsAcknowledgement;
};

DiscoveryResponseMessage._meta_ =  {fields:  {}};
DiscoveryResponseMessage._meta_._class_ =  DiscoveryResponseMessage;
DiscoveryResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
DiscoveryResponseMessage._meta_.fields["merchantId"] = {};
DiscoveryResponseMessage._meta_.fields["merchantId"].type = String;
DiscoveryResponseMessage._meta_.fields["merchantName"] = {};
DiscoveryResponseMessage._meta_.fields["merchantName"].type = String;
DiscoveryResponseMessage._meta_.fields["merchantMId"] = {};
DiscoveryResponseMessage._meta_.fields["merchantMId"].type = String;
DiscoveryResponseMessage._meta_.fields["name"] = {};
DiscoveryResponseMessage._meta_.fields["name"].type = String;
DiscoveryResponseMessage._meta_.fields["serial"] = {};
DiscoveryResponseMessage._meta_.fields["serial"].type = String;
DiscoveryResponseMessage._meta_.fields["model"] = {};
DiscoveryResponseMessage._meta_.fields["model"].type = String;
DiscoveryResponseMessage._meta_.fields["ready"] = {};
DiscoveryResponseMessage._meta_.fields["ready"].type = Boolean;
DiscoveryResponseMessage._meta_.fields["supportsTipAdjust"] = {};
DiscoveryResponseMessage._meta_.fields["supportsTipAdjust"].type = Boolean;
DiscoveryResponseMessage._meta_.fields["supportsManualRefund"] = {};
DiscoveryResponseMessage._meta_.fields["supportsManualRefund"].type = Boolean;
DiscoveryResponseMessage._meta_.fields["supportsMultiPayToken"] = {};
DiscoveryResponseMessage._meta_.fields["supportsMultiPayToken"].type = Boolean;
DiscoveryResponseMessage._meta_.fields["supportsAcknowledgement"] = {};
DiscoveryResponseMessage._meta_.fields["supportsAcknowledgement"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = DiscoveryResponseMessage;
}



/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_ErrorCode = __webpack_require__(66);

/**
* @constructor
* @memberof remotemessage
*/
var ErrorCodeEnum = function() {
  this._class_ = ErrorCodeEnum;
  this.errorCode = undefined;
};


/**
* Set the field value
* @memberof remotemessage.ErrorCodeEnum
* @param {remotemessage.ErrorCode} errorCode 
*/
ErrorCodeEnum.prototype.setErrorCode = function(errorCode) {
  this.errorCode = errorCode;
};

/**
* Get the field value
* @memberof remotemessage.ErrorCodeEnum
* @return {remotemessage.ErrorCode} 
*/
ErrorCodeEnum.prototype.getErrorCode = function() {
  return this.errorCode;
};

/**
* @memberof remotemessage.ErrorCodeEnum
* @private
*/
ErrorCodeEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ErrorCodeEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ErrorCodeEnum._meta_ =  {fields:  {}};
ErrorCodeEnum._meta_._class_ =  ErrorCodeEnum;
ErrorCodeEnum._meta_.fields["errorCode"] = {};
ErrorCodeEnum._meta_.fields["errorCode"].type = remotemessage_ErrorCode;

//
// Expose the module.
//
if (true) {
module.exports = ErrorCodeEnum;
}



/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_ExternalDeviceState = __webpack_require__(32);

/**
* @constructor
* @memberof remotemessage
*/
var ExternalDeviceStateEnum = function() {
  this._class_ = ExternalDeviceStateEnum;
  this.state = undefined;
};


/**
* Set the field value
* @memberof remotemessage.ExternalDeviceStateEnum
* @param {remotemessage.ExternalDeviceState} state 
*/
ExternalDeviceStateEnum.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof remotemessage.ExternalDeviceStateEnum
* @return {remotemessage.ExternalDeviceState} 
*/
ExternalDeviceStateEnum.prototype.getState = function() {
  return this.state;
};

/**
* @memberof remotemessage.ExternalDeviceStateEnum
* @private
*/
ExternalDeviceStateEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ExternalDeviceStateEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ExternalDeviceStateEnum._meta_ =  {fields:  {}};
ExternalDeviceStateEnum._meta_._class_ =  ExternalDeviceStateEnum;
ExternalDeviceStateEnum._meta_.fields["state"] = {};
ExternalDeviceStateEnum._meta_.fields["state"].type = remotemessage_ExternalDeviceState;

//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceStateEnum;
}



/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var FinishCancelMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = FinishCancelMessage;
  this.setMethod(remotemessage_Method["FINISH_CANCEL"]);
  this.requestInfo = undefined;
};

FinishCancelMessage.prototype = Object.create(remotemessage_Message.prototype);
FinishCancelMessage.prototype.constructor = FinishCancelMessage;

/**
* Set the field value
* Extra information to include with the request, like type of request
*
* @memberof remotemessage.FinishCancelMessage
* @param {String} requestInfo 
*/
FinishCancelMessage.prototype.setRequestInfo = function(requestInfo) {
  this.requestInfo = requestInfo;
};

/**
* Get the field value
* Extra information to include with the request, like type of request
* @memberof remotemessage.FinishCancelMessage
* @return {String} 
*/
FinishCancelMessage.prototype.getRequestInfo = function() {
  return this.requestInfo;
};

FinishCancelMessage._meta_ =  {fields:  {}};
FinishCancelMessage._meta_._class_ =  FinishCancelMessage;
FinishCancelMessage._meta_._superMeta_ = remotemessage_Message._meta_;
FinishCancelMessage._meta_.fields["requestInfo"] = {};
FinishCancelMessage._meta_.fields["requestInfo"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = FinishCancelMessage;
}



/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);
var base_Signature = __webpack_require__(17);
var payments_Refund = __webpack_require__(10);
var payments_Credit = __webpack_require__(16);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var FinishOkMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = FinishOkMessage;
  this.setMethod(remotemessage_Method["FINISH_OK"]);
  this.credit = undefined;
  this.payment = undefined;
  this.refund = undefined;
  this.signature = undefined;
  this.requestInfo = undefined;
};

FinishOkMessage.prototype = Object.create(remotemessage_Message.prototype);
FinishOkMessage.prototype.constructor = FinishOkMessage;

/**
* Set the field value
* A credit
*
* @memberof remotemessage.FinishOkMessage
* @param {payments.Credit} credit 
*/
FinishOkMessage.prototype.setCredit = function(credit) {
  this.credit = credit;
};

/**
* Get the field value
* A credit
* @memberof remotemessage.FinishOkMessage
* @return {payments.Credit} 
*/
FinishOkMessage.prototype.getCredit = function() {
  return this.credit;
};

/**
* Set the field value
* A payment
*
* @memberof remotemessage.FinishOkMessage
* @param {payments.Payment} payment 
*/
FinishOkMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.FinishOkMessage
* @return {payments.Payment} 
*/
FinishOkMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* The refund
*
* @memberof remotemessage.FinishOkMessage
* @param {payments.Refund} refund 
*/
FinishOkMessage.prototype.setRefund = function(refund) {
  this.refund = refund;
};

/**
* Get the field value
* The refund
* @memberof remotemessage.FinishOkMessage
* @return {payments.Refund} 
*/
FinishOkMessage.prototype.getRefund = function() {
  return this.refund;
};

/**
* Set the field value
* A signature
*
* @memberof remotemessage.FinishOkMessage
* @param {base.Signature} signature 
*/
FinishOkMessage.prototype.setSignature = function(signature) {
  this.signature = signature;
};

/**
* Get the field value
* A signature
* @memberof remotemessage.FinishOkMessage
* @return {base.Signature} 
*/
FinishOkMessage.prototype.getSignature = function() {
  return this.signature;
};

/**
* Set the field value
* Extra information to include with the request, like type of request
*
* @memberof remotemessage.FinishOkMessage
* @param {String} requestInfo 
*/
FinishOkMessage.prototype.setRequestInfo = function(requestInfo) {
  this.requestInfo = requestInfo;
};

/**
* Get the field value
* Extra information to include with the request, like type of request
* @memberof remotemessage.FinishOkMessage
* @return {String} 
*/
FinishOkMessage.prototype.getRequestInfo = function() {
  return this.requestInfo;
};

FinishOkMessage._meta_ =  {fields:  {}};
FinishOkMessage._meta_._class_ =  FinishOkMessage;
FinishOkMessage._meta_._superMeta_ = remotemessage_Message._meta_;
FinishOkMessage._meta_.fields["credit"] = {};
FinishOkMessage._meta_.fields["credit"].type = payments_Credit;
FinishOkMessage._meta_.fields["payment"] = {};
FinishOkMessage._meta_.fields["payment"].type = payments_Payment;
FinishOkMessage._meta_.fields["refund"] = {};
FinishOkMessage._meta_.fields["refund"].type = payments_Refund;
FinishOkMessage._meta_.fields["signature"] = {};
FinishOkMessage._meta_.fields["signature"].type = base_Signature;
FinishOkMessage._meta_.fields["requestInfo"] = {};
FinishOkMessage._meta_.fields["requestInfo"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = FinishOkMessage;
}



/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ForceConnectMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ForceConnectMessage;
  this.setMethod(remotemessage_Method["FORCECONNECT"]);
  this.friendlyId = undefined;
};

ForceConnectMessage.prototype = Object.create(remotemessage_Message.prototype);
ForceConnectMessage.prototype.constructor = ForceConnectMessage;

/**
* Set the field value
* The friendly id of the system that overtook the connection.
*
* @memberof remotemessage.ForceConnectMessage
* @param {String} friendlyId 
*/
ForceConnectMessage.prototype.setFriendlyId = function(friendlyId) {
  this.friendlyId = friendlyId;
};

/**
* Get the field value
* The friendly id of the system that overtook the connection.
* @memberof remotemessage.ForceConnectMessage
* @return {String} 
*/
ForceConnectMessage.prototype.getFriendlyId = function() {
  return this.friendlyId;
};

ForceConnectMessage._meta_ =  {fields:  {}};
ForceConnectMessage._meta_._class_ =  ForceConnectMessage;
ForceConnectMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ForceConnectMessage._meta_.fields["friendlyId"] = {};
ForceConnectMessage._meta_.fields["friendlyId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ForceConnectMessage;
}



/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var printer_PrintCategory = __webpack_require__(63);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var GetPrintersRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = GetPrintersRequestMessage;
  this.setMethod(remotemessage_Method["GET_PRINTERS_REQUEST"]);
  this.category = undefined;
};

GetPrintersRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
GetPrintersRequestMessage.prototype.constructor = GetPrintersRequestMessage;

/**
* Set the field value
* Category of printers to retrieve
*
* @memberof remotemessage.GetPrintersRequestMessage
* @param {printer.PrintCategory} category 
*/
GetPrintersRequestMessage.prototype.setCategory = function(category) {
  this.category = category;
};

/**
* Get the field value
* Category of printers to retrieve
* @memberof remotemessage.GetPrintersRequestMessage
* @return {printer.PrintCategory} 
*/
GetPrintersRequestMessage.prototype.getCategory = function() {
  return this.category;
};

GetPrintersRequestMessage._meta_ =  {fields:  {}};
GetPrintersRequestMessage._meta_._class_ =  GetPrintersRequestMessage;
GetPrintersRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
GetPrintersRequestMessage._meta_.fields["category"] = {};
GetPrintersRequestMessage._meta_.fields["category"].type = printer_PrintCategory;

//
// Expose the module.
//
if (true) {
module.exports = GetPrintersRequestMessage;
}



/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var printer_Printer = __webpack_require__(9);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var GetPrintersResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = GetPrintersResponseMessage;
  this.setMethod(remotemessage_Method["GET_PRINTERS_RESPONSE"]);
  this.printers = undefined;
};

GetPrintersResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
GetPrintersResponseMessage.prototype.constructor = GetPrintersResponseMessage;

/**
* Set the field value
* List of printers of the requested type.
*
* @memberof remotemessage.GetPrintersResponseMessage
* @param {Array.<printer.Printer>} printers An array of 
*/
GetPrintersResponseMessage.prototype.setPrinters = function(printers) {
  this.printers = printers;
};

/**
* Get the field value
* List of printers of the requested type.
* @memberof remotemessage.GetPrintersResponseMessage
* @return {Array.<printer.Printer>} An array of 
*/
GetPrintersResponseMessage.prototype.getPrinters = function() {
  return this.printers;
};

GetPrintersResponseMessage._meta_ =  {fields:  {}};
GetPrintersResponseMessage._meta_._class_ =  GetPrintersResponseMessage;
GetPrintersResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
GetPrintersResponseMessage._meta_.fields["printers"] = {};
GetPrintersResponseMessage._meta_.fields["printers"].type = Array;
GetPrintersResponseMessage._meta_.fields["printers"].elementType = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = GetPrintersResponseMessage;
}



/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var printer_Printer = __webpack_require__(9);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ImagePrintMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ImagePrintMessage;
  this.setMethod(remotemessage_Method["PRINT_IMAGE"]);
  this.png = undefined;
  this.urlString = undefined;
  this.externalPrintJobId = undefined;
  this.printer = undefined;
};

ImagePrintMessage.prototype = Object.create(remotemessage_Message.prototype);
ImagePrintMessage.prototype.constructor = ImagePrintMessage;

/**
* Set the field value
* An image serialized to a base64 encoded byte array
*
* @memberof remotemessage.ImagePrintMessage
* @param {Object} png Byte buffer
*/
ImagePrintMessage.prototype.setPng = function(png) {
  this.png = png;
};

/**
* Get the field value
* An image serialized to a base64 encoded byte array
* @memberof remotemessage.ImagePrintMessage
* @return {Object} Byte buffer
*/
ImagePrintMessage.prototype.getPng = function() {
  return this.png;
};

/**
* Set the field value
* The url of an image.  The url must be accessible from the Clover device.
*
* @memberof remotemessage.ImagePrintMessage
* @param {String} urlString 
*/
ImagePrintMessage.prototype.setUrlString = function(urlString) {
  this.urlString = urlString;
};

/**
* Get the field value
* The url of an image.  The url must be accessible from the Clover device.
* @memberof remotemessage.ImagePrintMessage
* @return {String} 
*/
ImagePrintMessage.prototype.getUrlString = function() {
  return this.urlString;
};

/**
* Set the field value
* External print job ID assigned to this request
*
* @memberof remotemessage.ImagePrintMessage
* @param {String} externalPrintJobId 
*/
ImagePrintMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
  this.externalPrintJobId = externalPrintJobId;
};

/**
* Get the field value
* External print job ID assigned to this request
* @memberof remotemessage.ImagePrintMessage
* @return {String} 
*/
ImagePrintMessage.prototype.getExternalPrintJobId = function() {
  return this.externalPrintJobId;
};

/**
* Set the field value
* Printer to which the print job should be routed.
*
* @memberof remotemessage.ImagePrintMessage
* @param {printer.Printer} printer 
*/
ImagePrintMessage.prototype.setPrinter = function(printer) {
  this.printer = printer;
};

/**
* Get the field value
* Printer to which the print job should be routed.
* @memberof remotemessage.ImagePrintMessage
* @return {printer.Printer} 
*/
ImagePrintMessage.prototype.getPrinter = function() {
  return this.printer;
};

ImagePrintMessage._meta_ =  {fields:  {}};
ImagePrintMessage._meta_._class_ =  ImagePrintMessage;
ImagePrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ImagePrintMessage._meta_.fields["png"] = {};
ImagePrintMessage._meta_.fields["png"].type = Object;
ImagePrintMessage._meta_.fields["urlString"] = {};
ImagePrintMessage._meta_.fields["urlString"].type = String;
ImagePrintMessage._meta_.fields["externalPrintJobId"] = {};
ImagePrintMessage._meta_.fields["externalPrintJobId"].type = String;
ImagePrintMessage._meta_.fields["printer"] = {};
ImagePrintMessage._meta_.fields["printer"].type = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = ImagePrintMessage;
}



/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_KeyPress = __webpack_require__(33);

/**
* @constructor
* @memberof remotemessage
*/
var KeyPressEnum = function() {
  this._class_ = KeyPressEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotemessage.KeyPressEnum
* @param {remotemessage.KeyPress} status 
*/
KeyPressEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.KeyPressEnum
* @return {remotemessage.KeyPress} 
*/
KeyPressEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotemessage.KeyPressEnum
* @private
*/
KeyPressEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

KeyPressEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

KeyPressEnum._meta_ =  {fields:  {}};
KeyPressEnum._meta_._class_ =  KeyPressEnum;
KeyPressEnum._meta_.fields["status"] = {};
KeyPressEnum._meta_.fields["status"].type = remotemessage_KeyPress;

//
// Expose the module.
//
if (true) {
module.exports = KeyPressEnum;
}



/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_KeyPress = __webpack_require__(33);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var KeyPressMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = KeyPressMessage;
  this.setMethod(remotemessage_Method["KEY_PRESS"]);
  this.keyPress = undefined;
};

KeyPressMessage.prototype = Object.create(remotemessage_Message.prototype);
KeyPressMessage.prototype.constructor = KeyPressMessage;

/**
* Set the field value
* @memberof remotemessage.KeyPressMessage
* @param {remotemessage.KeyPress} keyPress 
*/
KeyPressMessage.prototype.setKeyPress = function(keyPress) {
  this.keyPress = keyPress;
};

/**
* Get the field value
* @memberof remotemessage.KeyPressMessage
* @return {remotemessage.KeyPress} 
*/
KeyPressMessage.prototype.getKeyPress = function() {
  return this.keyPress;
};

KeyPressMessage._meta_ =  {fields:  {}};
KeyPressMessage._meta_._class_ =  KeyPressMessage;
KeyPressMessage._meta_._superMeta_ = remotemessage_Message._meta_;
KeyPressMessage._meta_.fields["keyPress"] = {};
KeyPressMessage._meta_.fields["keyPress"].type = remotemessage_KeyPress;

//
// Expose the module.
//
if (true) {
module.exports = KeyPressMessage;
}



/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var LastMessageRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = LastMessageRequestMessage;
  this.setMethod(remotemessage_Method["LAST_MSG_REQUEST"]);
};

LastMessageRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
LastMessageRequestMessage.prototype.constructor = LastMessageRequestMessage;

LastMessageRequestMessage._meta_ =  {fields:  {}};
LastMessageRequestMessage._meta_._class_ =  LastMessageRequestMessage;
LastMessageRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = LastMessageRequestMessage;
}



/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var LastMessageResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = LastMessageResponseMessage;
  this.setMethod(remotemessage_Method["LAST_MSG_RESPONSE"]);
  this.request = undefined;
  this.response = undefined;
};

LastMessageResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
LastMessageResponseMessage.prototype.constructor = LastMessageResponseMessage;

/**
* Set the field value
* The last transactional request the device recorded
*
* @memberof remotemessage.LastMessageResponseMessage
* @param {remotemessage.Message} request 
*/
LastMessageResponseMessage.prototype.setRequest = function(request) {
  this.request = request;
};

/**
* Get the field value
* The last transactional request the device recorded
* @memberof remotemessage.LastMessageResponseMessage
* @return {remotemessage.Message} 
*/
LastMessageResponseMessage.prototype.getRequest = function() {
  return this.request;
};

/**
* Set the field value
* The last transactional response the device recorded
*
* @memberof remotemessage.LastMessageResponseMessage
* @param {remotemessage.Message} response 
*/
LastMessageResponseMessage.prototype.setResponse = function(response) {
  this.response = response;
};

/**
* Get the field value
* The last transactional response the device recorded
* @memberof remotemessage.LastMessageResponseMessage
* @return {remotemessage.Message} 
*/
LastMessageResponseMessage.prototype.getResponse = function() {
  return this.response;
};

LastMessageResponseMessage._meta_ =  {fields:  {}};
LastMessageResponseMessage._meta_._class_ =  LastMessageResponseMessage;
LastMessageResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
LastMessageResponseMessage._meta_.fields["request"] = {};
LastMessageResponseMessage._meta_.fields["request"].type = remotemessage_Message;
LastMessageResponseMessage._meta_.fields["response"] = {};
LastMessageResponseMessage._meta_.fields["response"].type = remotemessage_Message;

//
// Expose the module.
//
if (true) {
module.exports = LastMessageResponseMessage;
}



/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_LogLevelEnum = __webpack_require__(144);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var LogMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = LogMessage;
  this.setMethod(remotemessage_Method["LOG_MESSAGE"]);
  this.logLevel = undefined;
  this.messages = undefined;
};

LogMessage.prototype = Object.create(remotemessage_Message.prototype);
LogMessage.prototype.constructor = LogMessage;

/**
* Set the field value
* @memberof remotemessage.LogMessage
* @param {remotemessage.LogLevelEnum} logLevel 
*/
LogMessage.prototype.setLogLevel = function(logLevel) {
  this.logLevel = logLevel;
};

/**
* Get the field value
* @memberof remotemessage.LogMessage
* @return {remotemessage.LogLevelEnum} 
*/
LogMessage.prototype.getLogLevel = function() {
  return this.logLevel;
};

/**
* Set the field value
* @memberof remotemessage.LogMessage
* @param {Object.<String,String>} messages A map of <String> to <>
*/
LogMessage.prototype.setMessages = function(messages) {
  this.messages = messages;
};

/**
* Get the field value
* @memberof remotemessage.LogMessage
* @return {Object.<String,String>} A map of <String> to <>
*/
LogMessage.prototype.getMessages = function() {
  return this.messages;
};

LogMessage._meta_ =  {fields:  {}};
LogMessage._meta_._class_ =  LogMessage;
LogMessage._meta_._superMeta_ = remotemessage_Message._meta_;
LogMessage._meta_.fields["logLevel"] = {};
LogMessage._meta_.fields["logLevel"].type = remotemessage_LogLevelEnum;
LogMessage._meta_.fields["messages"] = {};
LogMessage._meta_.fields["messages"].type = Object;

//
// Expose the module.
//
if (true) {
module.exports = LogMessage;
}



/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var printer_Printer = __webpack_require__(9);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OpenCashDrawerMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OpenCashDrawerMessage;
  this.setMethod(remotemessage_Method["OPEN_CASH_DRAWER"]);
  this.reason = undefined;
  this.printer = undefined;
};

OpenCashDrawerMessage.prototype = Object.create(remotemessage_Message.prototype);
OpenCashDrawerMessage.prototype.constructor = OpenCashDrawerMessage;

/**
* Set the field value
* The reason the cash drawer was opened.
*
* @memberof remotemessage.OpenCashDrawerMessage
* @param {String} reason 
*/
OpenCashDrawerMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* The reason the cash drawer was opened.
* @memberof remotemessage.OpenCashDrawerMessage
* @return {String} 
*/
OpenCashDrawerMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* The ID of the specific drawer to open.
*
* @memberof remotemessage.OpenCashDrawerMessage
* @param {printer.Printer} printer 
*/
OpenCashDrawerMessage.prototype.setPrinter = function(printer) {
  this.printer = printer;
};

/**
* Get the field value
* The ID of the specific drawer to open.
* @memberof remotemessage.OpenCashDrawerMessage
* @return {printer.Printer} 
*/
OpenCashDrawerMessage.prototype.getPrinter = function() {
  return this.printer;
};

OpenCashDrawerMessage._meta_ =  {fields:  {}};
OpenCashDrawerMessage._meta_._class_ =  OpenCashDrawerMessage;
OpenCashDrawerMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OpenCashDrawerMessage._meta_.fields["reason"] = {};
OpenCashDrawerMessage._meta_.fields["reason"].type = String;
OpenCashDrawerMessage._meta_.fields["printer"] = {};
OpenCashDrawerMessage._meta_.fields["printer"].type = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = OpenCashDrawerMessage;
}



/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_AddDiscountAction = __webpack_require__(138);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderActionAddDiscountMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderActionAddDiscountMessage;
  this.setMethod(remotemessage_Method["ORDER_ACTION_ADD_DISCOUNT"]);
  this.addDiscountAction = undefined;
};

OrderActionAddDiscountMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderActionAddDiscountMessage.prototype.constructor = OrderActionAddDiscountMessage;

/**
* Set the field value
* @memberof remotemessage.OrderActionAddDiscountMessage
* @param {remotemessage.AddDiscountAction} addDiscountAction 
*/
OrderActionAddDiscountMessage.prototype.setAddDiscountAction = function(addDiscountAction) {
  this.addDiscountAction = addDiscountAction;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionAddDiscountMessage
* @return {remotemessage.AddDiscountAction} 
*/
OrderActionAddDiscountMessage.prototype.getAddDiscountAction = function() {
  return this.addDiscountAction;
};

OrderActionAddDiscountMessage._meta_ =  {fields:  {}};
OrderActionAddDiscountMessage._meta_._class_ =  OrderActionAddDiscountMessage;
OrderActionAddDiscountMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderActionAddDiscountMessage._meta_.fields["addDiscountAction"] = {};
OrderActionAddDiscountMessage._meta_.fields["addDiscountAction"].type = remotemessage_AddDiscountAction;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionAddDiscountMessage;
}



/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_AddLineItemAction = __webpack_require__(139);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderActionAddLineItemMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderActionAddLineItemMessage;
  this.setMethod(remotemessage_Method["ORDER_ACTION_ADD_LINE_ITEM"]);
  this.addLineItemAction = undefined;
};

OrderActionAddLineItemMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderActionAddLineItemMessage.prototype.constructor = OrderActionAddLineItemMessage;

/**
* Set the field value
* @memberof remotemessage.OrderActionAddLineItemMessage
* @param {remotemessage.AddLineItemAction} addLineItemAction 
*/
OrderActionAddLineItemMessage.prototype.setAddLineItemAction = function(addLineItemAction) {
  this.addLineItemAction = addLineItemAction;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionAddLineItemMessage
* @return {remotemessage.AddLineItemAction} 
*/
OrderActionAddLineItemMessage.prototype.getAddLineItemAction = function() {
  return this.addLineItemAction;
};

OrderActionAddLineItemMessage._meta_ =  {fields:  {}};
OrderActionAddLineItemMessage._meta_._class_ =  OrderActionAddLineItemMessage;
OrderActionAddLineItemMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderActionAddLineItemMessage._meta_.fields["addLineItemAction"] = {};
OrderActionAddLineItemMessage._meta_.fields["addLineItemAction"].type = remotemessage_AddLineItemAction;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionAddLineItemMessage;
}



/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_RemoveDiscountAction = __webpack_require__(145);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderActionRemoveDiscountMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderActionRemoveDiscountMessage;
  this.setMethod(remotemessage_Method["ORDER_ACTION_REMOVE_DISCOUNT"]);
  this.removeDiscountAction = undefined;
};

OrderActionRemoveDiscountMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderActionRemoveDiscountMessage.prototype.constructor = OrderActionRemoveDiscountMessage;

/**
* Set the field value
* @memberof remotemessage.OrderActionRemoveDiscountMessage
* @param {remotemessage.RemoveDiscountAction} removeDiscountAction 
*/
OrderActionRemoveDiscountMessage.prototype.setRemoveDiscountAction = function(removeDiscountAction) {
  this.removeDiscountAction = removeDiscountAction;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionRemoveDiscountMessage
* @return {remotemessage.RemoveDiscountAction} 
*/
OrderActionRemoveDiscountMessage.prototype.getRemoveDiscountAction = function() {
  return this.removeDiscountAction;
};

OrderActionRemoveDiscountMessage._meta_ =  {fields:  {}};
OrderActionRemoveDiscountMessage._meta_._class_ =  OrderActionRemoveDiscountMessage;
OrderActionRemoveDiscountMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderActionRemoveDiscountMessage._meta_.fields["removeDiscountAction"] = {};
OrderActionRemoveDiscountMessage._meta_.fields["removeDiscountAction"].type = remotemessage_RemoveDiscountAction;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionRemoveDiscountMessage;
}



/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_RemoveLineItemAction = __webpack_require__(146);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderActionRemoveLineItemMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderActionRemoveLineItemMessage;
  this.setMethod(remotemessage_Method["ORDER_ACTION_REMOVE_LINE_ITEM"]);
  this.removeLineItemAction = undefined;
};

OrderActionRemoveLineItemMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderActionRemoveLineItemMessage.prototype.constructor = OrderActionRemoveLineItemMessage;

/**
* Set the field value
* @memberof remotemessage.OrderActionRemoveLineItemMessage
* @param {remotemessage.RemoveLineItemAction} removeLineItemAction 
*/
OrderActionRemoveLineItemMessage.prototype.setRemoveLineItemAction = function(removeLineItemAction) {
  this.removeLineItemAction = removeLineItemAction;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionRemoveLineItemMessage
* @return {remotemessage.RemoveLineItemAction} 
*/
OrderActionRemoveLineItemMessage.prototype.getRemoveLineItemAction = function() {
  return this.removeLineItemAction;
};

OrderActionRemoveLineItemMessage._meta_ =  {fields:  {}};
OrderActionRemoveLineItemMessage._meta_._class_ =  OrderActionRemoveLineItemMessage;
OrderActionRemoveLineItemMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderActionRemoveLineItemMessage._meta_.fields["removeLineItemAction"] = {};
OrderActionRemoveLineItemMessage._meta_.fields["removeLineItemAction"].type = remotemessage_RemoveLineItemAction;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionRemoveLineItemMessage;
}



/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_OrderActionResponse = __webpack_require__(147);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderActionResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderActionResponseMessage;
  this.setMethod(remotemessage_Method["ORDER_ACTION_RESPONSE"]);
  this.orderActionResponse = undefined;
};

OrderActionResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderActionResponseMessage.prototype.constructor = OrderActionResponseMessage;

/**
* Set the field value
* @memberof remotemessage.OrderActionResponseMessage
* @param {remotemessage.OrderActionResponse} orderActionResponse 
*/
OrderActionResponseMessage.prototype.setOrderActionResponse = function(orderActionResponse) {
  this.orderActionResponse = orderActionResponse;
};

/**
* Get the field value
* @memberof remotemessage.OrderActionResponseMessage
* @return {remotemessage.OrderActionResponse} 
*/
OrderActionResponseMessage.prototype.getOrderActionResponse = function() {
  return this.orderActionResponse;
};

OrderActionResponseMessage._meta_ =  {fields:  {}};
OrderActionResponseMessage._meta_._class_ =  OrderActionResponseMessage;
OrderActionResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderActionResponseMessage._meta_.fields["orderActionResponse"] = {};
OrderActionResponseMessage._meta_.fields["orderActionResponse"].type = remotemessage_OrderActionResponse;

//
// Expose the module.
//
if (true) {
module.exports = OrderActionResponseMessage;
}



/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var order_operation_DiscountsAddedOperation = __webpack_require__(118);
var order_operation_OrderDeletedOperation = __webpack_require__(122);
var remotemessage_Message = __webpack_require__(1);
var order_operation_LineItemsAddedOperation = __webpack_require__(120);
var order_operation_LineItemsDeletedOperation = __webpack_require__(121);
var order_DisplayOrder = __webpack_require__(105);
var order_operation_DiscountsDeletedOperation = __webpack_require__(119);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var OrderUpdateMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = OrderUpdateMessage;
  this.setMethod(remotemessage_Method["SHOW_ORDER_SCREEN"]);
  this.order = undefined;
  this.lineItemsAddedOperation = undefined;
  this.lineItemsDeletedOperation = undefined;
  this.discountsAddedOperation = undefined;
  this.discountsDeletedOperation = undefined;
  this.orderDeletedOperation = undefined;
};

OrderUpdateMessage.prototype = Object.create(remotemessage_Message.prototype);
OrderUpdateMessage.prototype.constructor = OrderUpdateMessage;

/**
* Set the field value
* The order that is to be displayed.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.DisplayOrder} order 
*/
OrderUpdateMessage.prototype.setOrder = function(order) {
  this.order = order;
};

/**
* Get the field value
* The order that is to be displayed.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.DisplayOrder} 
*/
OrderUpdateMessage.prototype.getOrder = function() {
  return this.order;
};

/**
* Set the field value
* Items that were added to the display order.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.operation.LineItemsAddedOperation} lineItemsAddedOperation 
*/
OrderUpdateMessage.prototype.setLineItemsAddedOperation = function(lineItemsAddedOperation) {
  this.lineItemsAddedOperation = lineItemsAddedOperation;
};

/**
* Get the field value
* Items that were added to the display order.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.operation.LineItemsAddedOperation} 
*/
OrderUpdateMessage.prototype.getLineItemsAddedOperation = function() {
  return this.lineItemsAddedOperation;
};

/**
* Set the field value
* Items that were added to the display order.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.operation.LineItemsDeletedOperation} lineItemsDeletedOperation 
*/
OrderUpdateMessage.prototype.setLineItemsDeletedOperation = function(lineItemsDeletedOperation) {
  this.lineItemsDeletedOperation = lineItemsDeletedOperation;
};

/**
* Get the field value
* Items that were added to the display order.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.operation.LineItemsDeletedOperation} 
*/
OrderUpdateMessage.prototype.getLineItemsDeletedOperation = function() {
  return this.lineItemsDeletedOperation;
};

/**
* Set the field value
* Items that were added to the display order.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.operation.DiscountsAddedOperation} discountsAddedOperation 
*/
OrderUpdateMessage.prototype.setDiscountsAddedOperation = function(discountsAddedOperation) {
  this.discountsAddedOperation = discountsAddedOperation;
};

/**
* Get the field value
* Items that were added to the display order.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.operation.DiscountsAddedOperation} 
*/
OrderUpdateMessage.prototype.getDiscountsAddedOperation = function() {
  return this.discountsAddedOperation;
};

/**
* Set the field value
* Items that were added to the display order.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.operation.DiscountsDeletedOperation} discountsDeletedOperation 
*/
OrderUpdateMessage.prototype.setDiscountsDeletedOperation = function(discountsDeletedOperation) {
  this.discountsDeletedOperation = discountsDeletedOperation;
};

/**
* Get the field value
* Items that were added to the display order.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.operation.DiscountsDeletedOperation} 
*/
OrderUpdateMessage.prototype.getDiscountsDeletedOperation = function() {
  return this.discountsDeletedOperation;
};

/**
* Set the field value
* Items that were added to the display order.
*
* @memberof remotemessage.OrderUpdateMessage
* @param {order.operation.OrderDeletedOperation} orderDeletedOperation 
*/
OrderUpdateMessage.prototype.setOrderDeletedOperation = function(orderDeletedOperation) {
  this.orderDeletedOperation = orderDeletedOperation;
};

/**
* Get the field value
* Items that were added to the display order.
* @memberof remotemessage.OrderUpdateMessage
* @return {order.operation.OrderDeletedOperation} 
*/
OrderUpdateMessage.prototype.getOrderDeletedOperation = function() {
  return this.orderDeletedOperation;
};

OrderUpdateMessage._meta_ =  {fields:  {}};
OrderUpdateMessage._meta_._class_ =  OrderUpdateMessage;
OrderUpdateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
OrderUpdateMessage._meta_.fields["order"] = {};
OrderUpdateMessage._meta_.fields["order"].type = order_DisplayOrder;
OrderUpdateMessage._meta_.fields["lineItemsAddedOperation"] = {};
OrderUpdateMessage._meta_.fields["lineItemsAddedOperation"].type = order_operation_LineItemsAddedOperation;
OrderUpdateMessage._meta_.fields["lineItemsDeletedOperation"] = {};
OrderUpdateMessage._meta_.fields["lineItemsDeletedOperation"].type = order_operation_LineItemsDeletedOperation;
OrderUpdateMessage._meta_.fields["discountsAddedOperation"] = {};
OrderUpdateMessage._meta_.fields["discountsAddedOperation"].type = order_operation_DiscountsAddedOperation;
OrderUpdateMessage._meta_.fields["discountsDeletedOperation"] = {};
OrderUpdateMessage._meta_.fields["discountsDeletedOperation"].type = order_operation_DiscountsDeletedOperation;
OrderUpdateMessage._meta_.fields["orderDeletedOperation"] = {};
OrderUpdateMessage._meta_.fields["orderDeletedOperation"].type = order_operation_OrderDeletedOperation;

//
// Expose the module.
//
if (true) {
module.exports = OrderUpdateMessage;
}



/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PairingCodeMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PairingCodeMessage;
  this.setMethod(remotemessage_Method["PAIRING_CODE"]);
  this.pairingCode = undefined;
};

PairingCodeMessage.prototype = Object.create(remotemessage_Message.prototype);
PairingCodeMessage.prototype.constructor = PairingCodeMessage;

/**
* Set the field value
* The pairing code to display.
*
* @memberof remotemessage.PairingCodeMessage
* @param {String} pairingCode 
*/
PairingCodeMessage.prototype.setPairingCode = function(pairingCode) {
  this.pairingCode = pairingCode;
};

/**
* Get the field value
* The pairing code to display.
* @memberof remotemessage.PairingCodeMessage
* @return {String} 
*/
PairingCodeMessage.prototype.getPairingCode = function() {
  return this.pairingCode;
};

PairingCodeMessage._meta_ =  {fields:  {}};
PairingCodeMessage._meta_._class_ =  PairingCodeMessage;
PairingCodeMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PairingCodeMessage._meta_.fields["pairingCode"] = {};
PairingCodeMessage._meta_.fields["pairingCode"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PairingCodeMessage;
}



/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_PairingRequestMessage = __webpack_require__(148);
var remotemessage_PairingState = __webpack_require__(149);

/**
* @constructor
* @augments remotemessage.PairingRequestMessage
* @memberof remotemessage
*/
var PairingResponseMessage = function() {
  remotemessage_PairingRequestMessage.call(this);
  this._superClass_ = remotemessage_PairingRequestMessage;
  this._class_ = PairingResponseMessage;
  this.setMethod(remotemessage_Method["PAIRING_RESPONSE"]);
  this.pairingState = undefined;
  this.millis = undefined;
};

PairingResponseMessage.prototype = Object.create(remotemessage_PairingRequestMessage.prototype);
PairingResponseMessage.prototype.constructor = PairingResponseMessage;

/**
* Set the field value
* The state of the pairing flow
*
* @memberof remotemessage.PairingResponseMessage
* @param {remotemessage.PairingState} pairingState 
*/
PairingResponseMessage.prototype.setPairingState = function(pairingState) {
  this.pairingState = pairingState;
};

/**
* Get the field value
* The state of the pairing flow
* @memberof remotemessage.PairingResponseMessage
* @return {remotemessage.PairingState} 
*/
PairingResponseMessage.prototype.getPairingState = function() {
  return this.pairingState;
};

/**
* Set the field value
* A timestamp of when the authentication token was obtained
*
* @memberof remotemessage.PairingResponseMessage
* @param {Number} millis must be a long integer
*/
PairingResponseMessage.prototype.setMillis = function(millis) {
  this.millis = millis;
};

/**
* Get the field value
* A timestamp of when the authentication token was obtained
* @memberof remotemessage.PairingResponseMessage
* @return {Number} must be a long integer
*/
PairingResponseMessage.prototype.getMillis = function() {
  return this.millis;
};

PairingResponseMessage._meta_ =  {fields:  {}};
PairingResponseMessage._meta_._class_ =  PairingResponseMessage;
PairingResponseMessage._meta_._superMeta_ = remotemessage_PairingRequestMessage._meta_;
PairingResponseMessage._meta_.fields["pairingState"] = {};
PairingResponseMessage._meta_.fields["pairingState"].type = remotemessage_PairingState;
PairingResponseMessage._meta_.fields["millis"] = {};
PairingResponseMessage._meta_.fields["millis"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = PairingResponseMessage;
}



/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PartialAuthMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PartialAuthMessage;
  this.setMethod(remotemessage_Method["PARTIAL_AUTH"]);
  this.partialAuthAmount = undefined;
};

PartialAuthMessage.prototype = Object.create(remotemessage_Message.prototype);
PartialAuthMessage.prototype.constructor = PartialAuthMessage;

/**
* Set the field value
* Amount authorized
*
* @memberof remotemessage.PartialAuthMessage
* @param {Number} partialAuthAmount must be a long integer
*/
PartialAuthMessage.prototype.setPartialAuthAmount = function(partialAuthAmount) {
  this.partialAuthAmount = partialAuthAmount;
};

/**
* Get the field value
* Amount authorized
* @memberof remotemessage.PartialAuthMessage
* @return {Number} must be a long integer
*/
PartialAuthMessage.prototype.getPartialAuthAmount = function() {
  return this.partialAuthAmount;
};

PartialAuthMessage._meta_ =  {fields:  {}};
PartialAuthMessage._meta_._class_ =  PartialAuthMessage;
PartialAuthMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PartialAuthMessage._meta_.fields["partialAuthAmount"] = {};
PartialAuthMessage._meta_.fields["partialAuthAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = PartialAuthMessage;
}



/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PaymentConfirmedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PaymentConfirmedMessage;
  this.setMethod(remotemessage_Method["PAYMENT_CONFIRMED"]);
  this.payment = undefined;
};

PaymentConfirmedMessage.prototype = Object.create(remotemessage_Message.prototype);
PaymentConfirmedMessage.prototype.constructor = PaymentConfirmedMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.PaymentConfirmedMessage
* @param {payments.Payment} payment 
*/
PaymentConfirmedMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.PaymentConfirmedMessage
* @return {payments.Payment} 
*/
PaymentConfirmedMessage.prototype.getPayment = function() {
  return this.payment;
};

PaymentConfirmedMessage._meta_ =  {fields:  {}};
PaymentConfirmedMessage._meta_._class_ =  PaymentConfirmedMessage;
PaymentConfirmedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PaymentConfirmedMessage._meta_.fields["payment"] = {};
PaymentConfirmedMessage._meta_.fields["payment"].type = payments_Payment;

//
// Expose the module.
//
if (true) {
module.exports = PaymentConfirmedMessage;
}



/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var order_VoidReason = __webpack_require__(14);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PaymentRejectedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PaymentRejectedMessage;
  this.setMethod(remotemessage_Method["PAYMENT_REJECTED"]);
  this.payment = undefined;
  this.reason = undefined;
};

PaymentRejectedMessage.prototype = Object.create(remotemessage_Message.prototype);
PaymentRejectedMessage.prototype.constructor = PaymentRejectedMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.PaymentRejectedMessage
* @param {payments.Payment} payment 
*/
PaymentRejectedMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.PaymentRejectedMessage
* @return {payments.Payment} 
*/
PaymentRejectedMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* The reason the payment is being rejected
*
* @memberof remotemessage.PaymentRejectedMessage
* @param {order.VoidReason} reason 
*/
PaymentRejectedMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* The reason the payment is being rejected
* @memberof remotemessage.PaymentRejectedMessage
* @return {order.VoidReason} 
*/
PaymentRejectedMessage.prototype.getReason = function() {
  return this.reason;
};

PaymentRejectedMessage._meta_ =  {fields:  {}};
PaymentRejectedMessage._meta_._class_ =  PaymentRejectedMessage;
PaymentRejectedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PaymentRejectedMessage._meta_.fields["payment"] = {};
PaymentRejectedMessage._meta_.fields["payment"].type = payments_Payment;
PaymentRejectedMessage._meta_.fields["reason"] = {};
PaymentRejectedMessage._meta_.fields["reason"].type = order_VoidReason;

//
// Expose the module.
//
if (true) {
module.exports = PaymentRejectedMessage;
}



/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var order_VoidReason = __webpack_require__(14);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PaymentVoidedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PaymentVoidedMessage;
  this.setMethod(remotemessage_Method["PAYMENT_VOIDED"]);
  this.payment = undefined;
  this.voidReason = undefined;
};

PaymentVoidedMessage.prototype = Object.create(remotemessage_Message.prototype);
PaymentVoidedMessage.prototype.constructor = PaymentVoidedMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.PaymentVoidedMessage
* @param {payments.Payment} payment 
*/
PaymentVoidedMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.PaymentVoidedMessage
* @return {payments.Payment} 
*/
PaymentVoidedMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof remotemessage.PaymentVoidedMessage
* @param {order.VoidReason} voidReason 
*/
PaymentVoidedMessage.prototype.setVoidReason = function(voidReason) {
  this.voidReason = voidReason;
};

/**
* Get the field value
* @memberof remotemessage.PaymentVoidedMessage
* @return {order.VoidReason} 
*/
PaymentVoidedMessage.prototype.getVoidReason = function() {
  return this.voidReason;
};

PaymentVoidedMessage._meta_ =  {fields:  {}};
PaymentVoidedMessage._meta_._class_ =  PaymentVoidedMessage;
PaymentVoidedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PaymentVoidedMessage._meta_.fields["payment"] = {};
PaymentVoidedMessage._meta_.fields["payment"].type = payments_Payment;
PaymentVoidedMessage._meta_.fields["voidReason"] = {};
PaymentVoidedMessage._meta_.fields["voidReason"].type = order_VoidReason;

//
// Expose the module.
//
if (true) {
module.exports = PaymentVoidedMessage;
}



/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/** Request to get the status of a print job. */
/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PrintJobStatusRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PrintJobStatusRequestMessage;
  this.setMethod(remotemessage_Method["PRINT_JOB_STATUS_REQUEST"]);
  this.externalPrintJobId = undefined;
};

PrintJobStatusRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
PrintJobStatusRequestMessage.prototype.constructor = PrintJobStatusRequestMessage;

/**
* Set the field value
* External print job ID to retrieve status for
*
* @memberof remotemessage.PrintJobStatusRequestMessage
* @param {String} externalPrintJobId 
*/
PrintJobStatusRequestMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
  this.externalPrintJobId = externalPrintJobId;
};

/**
* Get the field value
* External print job ID to retrieve status for
* @memberof remotemessage.PrintJobStatusRequestMessage
* @return {String} 
*/
PrintJobStatusRequestMessage.prototype.getExternalPrintJobId = function() {
  return this.externalPrintJobId;
};

PrintJobStatusRequestMessage._meta_ =  {fields:  {}};
PrintJobStatusRequestMessage._meta_._class_ =  PrintJobStatusRequestMessage;
PrintJobStatusRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PrintJobStatusRequestMessage._meta_.fields["externalPrintJobId"] = {};
PrintJobStatusRequestMessage._meta_.fields["externalPrintJobId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PrintJobStatusRequestMessage;
}



/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var printer_PrintJobStatus = __webpack_require__(64);
var remotemessage_Message = __webpack_require__(1);

/** contains the status of the requested print job. */
/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var PrintJobStatusResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = PrintJobStatusResponseMessage;
  this.setMethod(remotemessage_Method["PRINT_JOB_STATUS_RESPONSE"]);
  this.externalPrintJobId = undefined;
  this.status = undefined;
};

PrintJobStatusResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
PrintJobStatusResponseMessage.prototype.constructor = PrintJobStatusResponseMessage;

/**
* Set the field value
* External print job ID that status was retrieved for
*
* @memberof remotemessage.PrintJobStatusResponseMessage
* @param {String} externalPrintJobId 
*/
PrintJobStatusResponseMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
  this.externalPrintJobId = externalPrintJobId;
};

/**
* Get the field value
* External print job ID that status was retrieved for
* @memberof remotemessage.PrintJobStatusResponseMessage
* @return {String} 
*/
PrintJobStatusResponseMessage.prototype.getExternalPrintJobId = function() {
  return this.externalPrintJobId;
};

/**
* Set the field value
* The current status of the requested print job
*
* @memberof remotemessage.PrintJobStatusResponseMessage
* @param {printer.PrintJobStatus} status 
*/
PrintJobStatusResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* The current status of the requested print job
* @memberof remotemessage.PrintJobStatusResponseMessage
* @return {printer.PrintJobStatus} 
*/
PrintJobStatusResponseMessage.prototype.getStatus = function() {
  return this.status;
};

PrintJobStatusResponseMessage._meta_ =  {fields:  {}};
PrintJobStatusResponseMessage._meta_._class_ =  PrintJobStatusResponseMessage;
PrintJobStatusResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
PrintJobStatusResponseMessage._meta_.fields["externalPrintJobId"] = {};
PrintJobStatusResponseMessage._meta_.fields["externalPrintJobId"].type = String;
PrintJobStatusResponseMessage._meta_.fields["status"] = {};
PrintJobStatusResponseMessage._meta_.fields["status"].type = printer_PrintJobStatus;

//
// Expose the module.
//
if (true) {
module.exports = PrintJobStatusResponseMessage;
}



/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_QueryStatus = __webpack_require__(67);

/**
* @constructor
* @memberof remotemessage
*/
var QueryStatusEnum = function() {
  this._class_ = QueryStatusEnum;
  this.queryStatus = undefined;
};


/**
* Set the field value
* @memberof remotemessage.QueryStatusEnum
* @param {remotemessage.QueryStatus} queryStatus 
*/
QueryStatusEnum.prototype.setQueryStatus = function(queryStatus) {
  this.queryStatus = queryStatus;
};

/**
* Get the field value
* @memberof remotemessage.QueryStatusEnum
* @return {remotemessage.QueryStatus} 
*/
QueryStatusEnum.prototype.getQueryStatus = function() {
  return this.queryStatus;
};

/**
* @memberof remotemessage.QueryStatusEnum
* @private
*/
QueryStatusEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

QueryStatusEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

QueryStatusEnum._meta_ =  {fields:  {}};
QueryStatusEnum._meta_._class_ =  QueryStatusEnum;
QueryStatusEnum._meta_.fields["queryStatus"] = {};
QueryStatusEnum._meta_.fields["queryStatus"].type = remotemessage_QueryStatus;

//
// Expose the module.
//
if (true) {
module.exports = QueryStatusEnum;
}



/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RefundRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RefundRequestMessage;
  this.setMethod(remotemessage_Method["REFUND_REQUEST"]);
  this.fullRefund = undefined;
  this.amount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
};

RefundRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
RefundRequestMessage.prototype.constructor = RefundRequestMessage;

/**
* Set the field value
* If true, then it is a full refund.  The amount will be ignored.
*
* @memberof remotemessage.RefundRequestMessage
* @param {Boolean} fullRefund 
*/
RefundRequestMessage.prototype.setFullRefund = function(fullRefund) {
  this.fullRefund = fullRefund;
};

/**
* Get the field value
* If true, then it is a full refund.  The amount will be ignored.
* @memberof remotemessage.RefundRequestMessage
* @return {Boolean} 
*/
RefundRequestMessage.prototype.getFullRefund = function() {
  return this.fullRefund;
};

/**
* Set the field value
* Amount of refund.  Used in partial refunds.
*
* @memberof remotemessage.RefundRequestMessage
* @param {Number} amount must be a long integer
*/
RefundRequestMessage.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount of refund.  Used in partial refunds.
* @memberof remotemessage.RefundRequestMessage
* @return {Number} must be a long integer
*/
RefundRequestMessage.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.RefundRequestMessage
* @param {String} orderId 
*/
RefundRequestMessage.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.RefundRequestMessage
* @return {String} 
*/
RefundRequestMessage.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.RefundRequestMessage
* @param {String} paymentId 
*/
RefundRequestMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.RefundRequestMessage
* @return {String} 
*/
RefundRequestMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

RefundRequestMessage._meta_ =  {fields:  {}};
RefundRequestMessage._meta_._class_ =  RefundRequestMessage;
RefundRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RefundRequestMessage._meta_.fields["fullRefund"] = {};
RefundRequestMessage._meta_.fields["fullRefund"].type = Boolean;
RefundRequestMessage._meta_.fields["amount"] = {};
RefundRequestMessage._meta_.fields["amount"].type = Number;
RefundRequestMessage._meta_.fields["orderId"] = {};
RefundRequestMessage._meta_.fields["orderId"].type = String;
RefundRequestMessage._meta_.fields["paymentId"] = {};
RefundRequestMessage._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RefundRequestMessage;
}



/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_TxState = __webpack_require__(34);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_ErrorCode = __webpack_require__(66);
var payments_Refund = __webpack_require__(10);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RefundResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RefundResponseMessage;
  this.setMethod(remotemessage_Method["REFUND_RESPONSE"]);
  this.orderId = undefined;
  this.paymentId = undefined;
  this.refund = undefined;
  this.reason = undefined;
  this.message = undefined;
  this.code = undefined;
};

RefundResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
RefundResponseMessage.prototype.constructor = RefundResponseMessage;

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.RefundResponseMessage
* @param {String} orderId 
*/
RefundResponseMessage.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.RefundResponseMessage
* @return {String} 
*/
RefundResponseMessage.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.RefundResponseMessage
* @param {String} paymentId 
*/
RefundResponseMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.RefundResponseMessage
* @return {String} 
*/
RefundResponseMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* The refund
*
* @memberof remotemessage.RefundResponseMessage
* @param {payments.Refund} refund 
*/
RefundResponseMessage.prototype.setRefund = function(refund) {
  this.refund = refund;
};

/**
* Get the field value
* The refund
* @memberof remotemessage.RefundResponseMessage
* @return {payments.Refund} 
*/
RefundResponseMessage.prototype.getRefund = function() {
  return this.refund;
};

/**
* Set the field value
* Detail code if an error is encountered
*
* @memberof remotemessage.RefundResponseMessage
* @param {remotemessage.ErrorCode} reason 
*/
RefundResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Detail code if an error is encountered
* @memberof remotemessage.RefundResponseMessage
* @return {remotemessage.ErrorCode} 
*/
RefundResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* Detail message
*
* @memberof remotemessage.RefundResponseMessage
* @param {String} message 
*/
RefundResponseMessage.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* Detail message
* @memberof remotemessage.RefundResponseMessage
* @return {String} 
*/
RefundResponseMessage.prototype.getMessage = function() {
  return this.message;
};

/**
* Set the field value
* Transaction state (success|fail)
*
* @memberof remotemessage.RefundResponseMessage
* @param {remotemessage.TxState} code 
*/
RefundResponseMessage.prototype.setCode = function(code) {
  this.code = code;
};

/**
* Get the field value
* Transaction state (success|fail)
* @memberof remotemessage.RefundResponseMessage
* @return {remotemessage.TxState} 
*/
RefundResponseMessage.prototype.getCode = function() {
  return this.code;
};

RefundResponseMessage._meta_ =  {fields:  {}};
RefundResponseMessage._meta_._class_ =  RefundResponseMessage;
RefundResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RefundResponseMessage._meta_.fields["orderId"] = {};
RefundResponseMessage._meta_.fields["orderId"].type = String;
RefundResponseMessage._meta_.fields["paymentId"] = {};
RefundResponseMessage._meta_.fields["paymentId"].type = String;
RefundResponseMessage._meta_.fields["refund"] = {};
RefundResponseMessage._meta_.fields["refund"].type = payments_Refund;
RefundResponseMessage._meta_.fields["reason"] = {};
RefundResponseMessage._meta_.fields["reason"].type = remotemessage_ErrorCode;
RefundResponseMessage._meta_.fields["message"] = {};
RefundResponseMessage._meta_.fields["message"].type = String;
RefundResponseMessage._meta_.fields["code"] = {};
RefundResponseMessage._meta_.fields["code"].type = remotemessage_TxState;

//
// Expose the module.
//
if (true) {
module.exports = RefundResponseMessage;
}



/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/** Errors that are encountered that cannot be recovered from are passed using this class.  This is intended to be used to aid integrators and Clover support in troubleshooting systems integration with devices. */
/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RemoteError = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RemoteError;
  this.setMethod(remotemessage_Method["REMOTE_ERROR"]);
  this.errorDetail = undefined;
  this.errorMessage = undefined;
  this.errorCode = undefined;
};

RemoteError.prototype = Object.create(remotemessage_Message.prototype);
RemoteError.prototype.constructor = RemoteError;

/**
* Set the field value
* Detailed information on the error.  This is engineering information for troubleshooting.
*
* @memberof remotemessage.RemoteError
* @param {String|Null} errorDetail 
*/
RemoteError.prototype.setErrorDetail = function(errorDetail) {
  this.errorDetail = errorDetail;
};

/**
* Get the field value
* Detailed information on the error.  This is engineering information for troubleshooting.
* @memberof remotemessage.RemoteError
* @return {String|Null} 
*/
RemoteError.prototype.getErrorDetail = function() {
  return this.errorDetail;
};

/**
* Set the field value
* A concise description of the error
*
* @memberof remotemessage.RemoteError
* @param {String} errorMessage 
*/
RemoteError.prototype.setErrorMessage = function(errorMessage) {
  this.errorMessage = errorMessage;
};

/**
* Get the field value
* A concise description of the error
* @memberof remotemessage.RemoteError
* @return {String} 
*/
RemoteError.prototype.getErrorMessage = function() {
  return this.errorMessage;
};

/**
* Set the field value
* If available, the code for the error encountered.
*
* @memberof remotemessage.RemoteError
* @param {Number|Null} errorCode must be a long integer, 
*/
RemoteError.prototype.setErrorCode = function(errorCode) {
  this.errorCode = errorCode;
};

/**
* Get the field value
* If available, the code for the error encountered.
* @memberof remotemessage.RemoteError
* @return {Number|Null} must be a long integer, 
*/
RemoteError.prototype.getErrorCode = function() {
  return this.errorCode;
};

RemoteError._meta_ =  {fields:  {}};
RemoteError._meta_._class_ =  RemoteError;
RemoteError._meta_._superMeta_ = remotemessage_Message._meta_;
RemoteError._meta_.fields["errorDetail"] = {};
RemoteError._meta_.fields["errorDetail"].type = String;
RemoteError._meta_.fields["errorMessage"] = {};
RemoteError._meta_.fields["errorMessage"].type = String;
RemoteError._meta_.fields["errorCode"] = {};
RemoteError._meta_.fields["errorCode"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = RemoteError;
}



/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_RemoteMessageType = __webpack_require__(150);

/**
* @constructor
* @memberof remotemessage
*/
var RemoteMessage = function() {
  this._class_ = RemoteMessage;
  this.id = undefined;
  this.type = undefined;
  this.packageName = undefined;
  this.method = undefined;
  this.payload = undefined;
  this.remoteSourceSDK = undefined;
  this.remoteApplicationID = undefined;
  this.version = undefined;
  this.fragmentIndex = undefined;
  this.lastFragment = undefined;
  this.attachmentEncoding = undefined;
  this.attachment = undefined;
};


/**
* Set the field value
* Identifier for the message
*
* @memberof remotemessage.RemoteMessage
* @param {String} id 
*/
RemoteMessage.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Identifier for the message
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* @memberof remotemessage.RemoteMessage
* @param {remotemessage.RemoteMessageType} type 
*/
RemoteMessage.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof remotemessage.RemoteMessage
* @return {remotemessage.RemoteMessageType} 
*/
RemoteMessage.prototype.getType = function() {
  return this.type;
};

/**
* Set the field value
* The package name of the sending Clover api
*
* @memberof remotemessage.RemoteMessage
* @param {String} packageName 
*/
RemoteMessage.prototype.setPackageName = function(packageName) {
  this.packageName = packageName;
};

/**
* Get the field value
* The package name of the sending Clover api
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getPackageName = function() {
  return this.packageName;
};

/**
* Set the field value
* The name of the business message being sent
*
* @memberof remotemessage.RemoteMessage
* @param {remotemessage.Method} method 
*/
RemoteMessage.prototype.setMethod = function(method) {
  this.method = method;
};

/**
* Get the field value
* The name of the business message being sent
* @memberof remotemessage.RemoteMessage
* @return {remotemessage.Method} 
*/
RemoteMessage.prototype.getMethod = function() {
  return this.method;
};

/**
* Set the field value
* The payload message being sent.  Interpreted based on the method.
*
* @memberof remotemessage.RemoteMessage
* @param {String} payload 
*/
RemoteMessage.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* The payload message being sent.  Interpreted based on the method.
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getPayload = function() {
  return this.payload;
};

/**
* Set the field value
* The identifier for the source SDK.  This identifies the connector.
*
* @memberof remotemessage.RemoteMessage
* @param {String} remoteSourceSDK 
*/
RemoteMessage.prototype.setRemoteSourceSDK = function(remoteSourceSDK) {
  this.remoteSourceSDK = remoteSourceSDK;
};

/**
* Get the field value
* The identifier for the source SDK.  This identifies the connector.
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getRemoteSourceSDK = function() {
  return this.remoteSourceSDK;
};

/**
* Set the field value
* The identifier for the sending application.  This identifies the app.
*
* @memberof remotemessage.RemoteMessage
* @param {String} remoteApplicationID 
*/
RemoteMessage.prototype.setRemoteApplicationID = function(remoteApplicationID) {
  this.remoteApplicationID = remoteApplicationID;
};

/**
* Get the field value
* The identifier for the sending application.  This identifies the app.
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getRemoteApplicationID = function() {
  return this.remoteApplicationID;
};

/**
* Set the field value
* The Remote Message version.
*
* @memberof remotemessage.RemoteMessage
* @param {Number} version must be an integer
*/
RemoteMessage.prototype.setVersion = function(version) {
  this.version = version;
};

/**
* Get the field value
* The Remote Message version.
* @memberof remotemessage.RemoteMessage
* @return {Number} must be an integer
*/
RemoteMessage.prototype.getVersion = function() {
  return this.version;
};

/**
* Set the field value
* The order of fragments when message is split for large attachments.
*
* @memberof remotemessage.RemoteMessage
* @param {Number} fragmentIndex must be an integer
*/
RemoteMessage.prototype.setFragmentIndex = function(fragmentIndex) {
  this.fragmentIndex = fragmentIndex;
};

/**
* Get the field value
* The order of fragments when message is split for large attachments.
* @memberof remotemessage.RemoteMessage
* @return {Number} must be an integer
*/
RemoteMessage.prototype.getFragmentIndex = function() {
  return this.fragmentIndex;
};

/**
* Set the field value
* If this is the final fragment in a series.
*
* @memberof remotemessage.RemoteMessage
* @param {Boolean} lastFragment 
*/
RemoteMessage.prototype.setLastFragment = function(lastFragment) {
  this.lastFragment = lastFragment;
};

/**
* Get the field value
* If this is the final fragment in a series.
* @memberof remotemessage.RemoteMessage
* @return {Boolean} 
*/
RemoteMessage.prototype.getLastFragment = function() {
  return this.lastFragment;
};

/**
* Set the field value
* The type of encoding used for the attachment, typically BASE64.
*
* @memberof remotemessage.RemoteMessage
* @param {String} attachmentEncoding 
*/
RemoteMessage.prototype.setAttachmentEncoding = function(attachmentEncoding) {
  this.attachmentEncoding = attachmentEncoding;
};

/**
* Get the field value
* The type of encoding used for the attachment, typically BASE64.
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getAttachmentEncoding = function() {
  return this.attachmentEncoding;
};

/**
* Set the field value
* The encoded attachment.
*
* @memberof remotemessage.RemoteMessage
* @param {String} attachment 
*/
RemoteMessage.prototype.setAttachment = function(attachment) {
  this.attachment = attachment;
};

/**
* Get the field value
* The encoded attachment.
* @memberof remotemessage.RemoteMessage
* @return {String} 
*/
RemoteMessage.prototype.getAttachment = function() {
  return this.attachment;
};

/**
* @memberof remotemessage.RemoteMessage
* @private
*/
RemoteMessage.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

RemoteMessage.prototype.toString = function() {
  return JSON.stringify(this);
};

RemoteMessage._meta_ =  {fields:  {}};
RemoteMessage._meta_._class_ =  RemoteMessage;
RemoteMessage._meta_.fields["id"] = {};
RemoteMessage._meta_.fields["id"].type = String;
RemoteMessage._meta_.fields["type"] = {};
RemoteMessage._meta_.fields["type"].type = remotemessage_RemoteMessageType;
RemoteMessage._meta_.fields["packageName"] = {};
RemoteMessage._meta_.fields["packageName"].type = String;
RemoteMessage._meta_.fields["method"] = {};
RemoteMessage._meta_.fields["method"].type = remotemessage_Method;
RemoteMessage._meta_.fields["payload"] = {};
RemoteMessage._meta_.fields["payload"].type = String;
RemoteMessage._meta_.fields["remoteSourceSDK"] = {};
RemoteMessage._meta_.fields["remoteSourceSDK"].type = String;
RemoteMessage._meta_.fields["remoteApplicationID"] = {};
RemoteMessage._meta_.fields["remoteApplicationID"].type = String;
RemoteMessage._meta_.fields["version"] = {};
RemoteMessage._meta_.fields["version"].type = Number;
RemoteMessage._meta_.fields["fragmentIndex"] = {};
RemoteMessage._meta_.fields["fragmentIndex"].type = Number;
RemoteMessage._meta_.fields["lastFragment"] = {};
RemoteMessage._meta_.fields["lastFragment"].type = Boolean;
RemoteMessage._meta_.fields["attachmentEncoding"] = {};
RemoteMessage._meta_.fields["attachmentEncoding"].type = String;
RemoteMessage._meta_.fields["attachment"] = {};
RemoteMessage._meta_.fields["attachment"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RemoteMessage;
}



/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var remotemessage_ExternalDeviceState = __webpack_require__(32);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ResetDeviceResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ResetDeviceResponseMessage;
  this.setMethod(remotemessage_Method["RESET_DEVICE_RESPONSE"]);
  this.reason = undefined;
  this.status = undefined;
  this.state = undefined;
};

ResetDeviceResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
ResetDeviceResponseMessage.prototype.constructor = ResetDeviceResponseMessage;

/**
* Set the field value
* May be populated when the operation fails.
*
* @memberof remotemessage.ResetDeviceResponseMessage
* @param {String} reason 
*/
ResetDeviceResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* May be populated when the operation fails.
* @memberof remotemessage.ResetDeviceResponseMessage
* @return {String} 
*/
ResetDeviceResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* @memberof remotemessage.ResetDeviceResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
ResetDeviceResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.ResetDeviceResponseMessage
* @return {remotemessage.ResultStatus} 
*/
ResetDeviceResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* High level state of the connected device.
*
* @memberof remotemessage.ResetDeviceResponseMessage
* @param {remotemessage.ExternalDeviceState} state 
*/
ResetDeviceResponseMessage.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* High level state of the connected device.
* @memberof remotemessage.ResetDeviceResponseMessage
* @return {remotemessage.ExternalDeviceState} 
*/
ResetDeviceResponseMessage.prototype.getState = function() {
  return this.state;
};

ResetDeviceResponseMessage._meta_ =  {fields:  {}};
ResetDeviceResponseMessage._meta_._class_ =  ResetDeviceResponseMessage;
ResetDeviceResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ResetDeviceResponseMessage._meta_.fields["reason"] = {};
ResetDeviceResponseMessage._meta_.fields["reason"].type = String;
ResetDeviceResponseMessage._meta_.fields["status"] = {};
ResetDeviceResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
ResetDeviceResponseMessage._meta_.fields["state"] = {};
ResetDeviceResponseMessage._meta_.fields["state"].type = remotemessage_ExternalDeviceState;

//
// Expose the module.
//
if (true) {
module.exports = ResetDeviceResponseMessage;
}



/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ResetMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ResetMessage;
  this.setMethod(remotemessage_Method["RESET"]);
};

ResetMessage.prototype = Object.create(remotemessage_Message.prototype);
ResetMessage.prototype.constructor = ResetMessage;

ResetMessage._meta_ =  {fields:  {}};
ResetMessage._meta_._class_ =  ResetMessage;
ResetMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = ResetMessage;
}



/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_ResultStatus = __webpack_require__(8);

/**
* @constructor
* @memberof remotemessage
*/
var ResultStatusEnum = function() {
  this._class_ = ResultStatusEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotemessage.ResultStatusEnum
* @param {remotemessage.ResultStatus} status 
*/
ResultStatusEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.ResultStatusEnum
* @return {remotemessage.ResultStatus} 
*/
ResultStatusEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotemessage.ResultStatusEnum
* @private
*/
ResultStatusEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ResultStatusEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ResultStatusEnum._meta_ =  {fields:  {}};
ResultStatusEnum._meta_._class_ =  ResultStatusEnum;
ResultStatusEnum._meta_.fields["status"] = {};
ResultStatusEnum._meta_.fields["status"].type = remotemessage_ResultStatus;

//
// Expose the module.
//
if (true) {
module.exports = ResultStatusEnum;
}



/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrieveCustomActivitiesRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrieveCustomActivitiesRequestMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_CUSTOM_ACTIVITIES_REQUEST"]);
  this.filters = undefined;
};

RetrieveCustomActivitiesRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrieveCustomActivitiesRequestMessage.prototype.constructor = RetrieveCustomActivitiesRequestMessage;

/**
* Set the field value
* List of category names to filter the results on.
*
* @memberof remotemessage.RetrieveCustomActivitiesRequestMessage
* @param {Array.<String>} filters An array of 
*/
RetrieveCustomActivitiesRequestMessage.prototype.setFilters = function(filters) {
  this.filters = filters;
};

/**
* Get the field value
* List of category names to filter the results on.
* @memberof remotemessage.RetrieveCustomActivitiesRequestMessage
* @return {Array.<String>} An array of 
*/
RetrieveCustomActivitiesRequestMessage.prototype.getFilters = function() {
  return this.filters;
};

RetrieveCustomActivitiesRequestMessage._meta_ =  {fields:  {}};
RetrieveCustomActivitiesRequestMessage._meta_._class_ =  RetrieveCustomActivitiesRequestMessage;
RetrieveCustomActivitiesRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrieveCustomActivitiesRequestMessage._meta_.fields["filters"] = {};
RetrieveCustomActivitiesRequestMessage._meta_.fields["filters"].type = Array;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveCustomActivitiesRequestMessage;
}



/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var custom_CustomActivity = __webpack_require__(287);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrieveCustomActivitiesResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrieveCustomActivitiesResponseMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE"]);
  this.activities = undefined;
};

RetrieveCustomActivitiesResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrieveCustomActivitiesResponseMessage.prototype.constructor = RetrieveCustomActivitiesResponseMessage;

/**
* Set the field value
* Custom activities that met the request filtering requirements.
*
* @memberof remotemessage.RetrieveCustomActivitiesResponseMessage
* @param {Array.<custom.CustomActivity>} activities An array of 
*/
RetrieveCustomActivitiesResponseMessage.prototype.setActivities = function(activities) {
  this.activities = activities;
};

/**
* Get the field value
* Custom activities that met the request filtering requirements.
* @memberof remotemessage.RetrieveCustomActivitiesResponseMessage
* @return {Array.<custom.CustomActivity>} An array of 
*/
RetrieveCustomActivitiesResponseMessage.prototype.getActivities = function() {
  return this.activities;
};

RetrieveCustomActivitiesResponseMessage._meta_ =  {fields:  {}};
RetrieveCustomActivitiesResponseMessage._meta_._class_ =  RetrieveCustomActivitiesResponseMessage;
RetrieveCustomActivitiesResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"] = {};
RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"].type = Array;
RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"].elementType = custom_CustomActivity;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveCustomActivitiesResponseMessage;
}



/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof custom
*/
var CustomActivity = function() {
  this._class_ = CustomActivity;
  this.action = undefined;
  this.categories = undefined;
};


/**
* Set the field value
* Action for the custom activity
*
* @memberof custom.CustomActivity
* @param {String} action 
*/
CustomActivity.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* Action for the custom activity
* @memberof custom.CustomActivity
* @return {String} 
*/
CustomActivity.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* List of categories for the specified action.
*
* @memberof custom.CustomActivity
* @param {Array.<String>} categories An array of 
*/
CustomActivity.prototype.setCategories = function(categories) {
  this.categories = categories;
};

/**
* Get the field value
* List of categories for the specified action.
* @memberof custom.CustomActivity
* @return {Array.<String>} An array of 
*/
CustomActivity.prototype.getCategories = function() {
  return this.categories;
};

/**
* @memberof custom.CustomActivity
* @private
*/
CustomActivity.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CustomActivity.prototype.toString = function() {
  return JSON.stringify(this);
};

CustomActivity._meta_ =  {fields:  {}};
CustomActivity._meta_._class_ =  CustomActivity;
CustomActivity._meta_.fields["action"] = {};
CustomActivity._meta_.fields["action"].type = String;
CustomActivity._meta_.fields["categories"] = {};
CustomActivity._meta_.fields["categories"].type = Array;

//
// Expose the module.
//
if (true) {
module.exports = CustomActivity;
}



/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrieveDeviceStatusRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrieveDeviceStatusRequestMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_DEVICE_STATUS_REQUEST"]);
  this.sendLastMessage = false;
};

RetrieveDeviceStatusRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrieveDeviceStatusRequestMessage.prototype.constructor = RetrieveDeviceStatusRequestMessage;

/**
* Set the field value
* Send last message, if true
*
* @memberof remotemessage.RetrieveDeviceStatusRequestMessage
* @param {Boolean} sendLastMessage 
*/
RetrieveDeviceStatusRequestMessage.prototype.setSendLastMessage = function(sendLastMessage) {
  this.sendLastMessage = sendLastMessage;
};

/**
* Get the field value
* Send last message, if true
* @memberof remotemessage.RetrieveDeviceStatusRequestMessage
* @return {Boolean} 
*/
RetrieveDeviceStatusRequestMessage.prototype.getSendLastMessage = function() {
  return this.sendLastMessage;
};

RetrieveDeviceStatusRequestMessage._meta_ =  {fields:  {}};
RetrieveDeviceStatusRequestMessage._meta_._class_ =  RetrieveDeviceStatusRequestMessage;
RetrieveDeviceStatusRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrieveDeviceStatusRequestMessage._meta_.fields["sendLastMessage"] = {};
RetrieveDeviceStatusRequestMessage._meta_.fields["sendLastMessage"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveDeviceStatusRequestMessage;
}



/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var remotemessage_ExternalDeviceSubState = __webpack_require__(142);
var remotemessage_ExternalDeviceState = __webpack_require__(32);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_ExternalDeviceStateData = __webpack_require__(141);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrieveDeviceStatusResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrieveDeviceStatusResponseMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_DEVICE_STATUS_RESPONSE"]);
  this.reason = undefined;
  this.status = undefined;
  this.state = undefined;
  this.substate = undefined;
  this.data = undefined;
};

RetrieveDeviceStatusResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrieveDeviceStatusResponseMessage.prototype.constructor = RetrieveDeviceStatusResponseMessage;

/**
* Set the field value
* May be populated when the operation fails.
*
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @param {String} reason 
*/
RetrieveDeviceStatusResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* May be populated when the operation fails.
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @return {String} 
*/
RetrieveDeviceStatusResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
RetrieveDeviceStatusResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @return {remotemessage.ResultStatus} 
*/
RetrieveDeviceStatusResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* High level state of the connected device.
*
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @param {remotemessage.ExternalDeviceState} state 
*/
RetrieveDeviceStatusResponseMessage.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* High level state of the connected device.
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @return {remotemessage.ExternalDeviceState} 
*/
RetrieveDeviceStatusResponseMessage.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* Substate of the connected device.
*
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @param {remotemessage.ExternalDeviceSubState} substate 
*/
RetrieveDeviceStatusResponseMessage.prototype.setSubstate = function(substate) {
  this.substate = substate;
};

/**
* Get the field value
* Substate of the connected device.
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @return {remotemessage.ExternalDeviceSubState} 
*/
RetrieveDeviceStatusResponseMessage.prototype.getSubstate = function() {
  return this.substate;
};

/**
* Set the field value
* Additional data elements supplementing the state of the connected device.
*
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @param {remotemessage.ExternalDeviceStateData} data 
*/
RetrieveDeviceStatusResponseMessage.prototype.setData = function(data) {
  this.data = data;
};

/**
* Get the field value
* Additional data elements supplementing the state of the connected device.
* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
* @return {remotemessage.ExternalDeviceStateData} 
*/
RetrieveDeviceStatusResponseMessage.prototype.getData = function() {
  return this.data;
};

RetrieveDeviceStatusResponseMessage._meta_ =  {fields:  {}};
RetrieveDeviceStatusResponseMessage._meta_._class_ =  RetrieveDeviceStatusResponseMessage;
RetrieveDeviceStatusResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrieveDeviceStatusResponseMessage._meta_.fields["reason"] = {};
RetrieveDeviceStatusResponseMessage._meta_.fields["reason"].type = String;
RetrieveDeviceStatusResponseMessage._meta_.fields["status"] = {};
RetrieveDeviceStatusResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
RetrieveDeviceStatusResponseMessage._meta_.fields["state"] = {};
RetrieveDeviceStatusResponseMessage._meta_.fields["state"].type = remotemessage_ExternalDeviceState;
RetrieveDeviceStatusResponseMessage._meta_.fields["substate"] = {};
RetrieveDeviceStatusResponseMessage._meta_.fields["substate"].type = remotemessage_ExternalDeviceSubState;
RetrieveDeviceStatusResponseMessage._meta_.fields["data"] = {};
RetrieveDeviceStatusResponseMessage._meta_.fields["data"].type = remotemessage_ExternalDeviceStateData;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveDeviceStatusResponseMessage;
}



/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/** Request to retrieve a payment made to a specific device. */
/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrievePaymentRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrievePaymentRequestMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_PAYMENT_REQUEST"]);
  this.externalPaymentId = undefined;
};

RetrievePaymentRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrievePaymentRequestMessage.prototype.constructor = RetrievePaymentRequestMessage;

/**
* Set the field value
* The externalPaymentId used when a payment was created
*
* @memberof remotemessage.RetrievePaymentRequestMessage
* @param {String} externalPaymentId 
*/
RetrievePaymentRequestMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* The externalPaymentId used when a payment was created
* @memberof remotemessage.RetrievePaymentRequestMessage
* @return {String} 
*/
RetrievePaymentRequestMessage.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

RetrievePaymentRequestMessage._meta_ =  {fields:  {}};
RetrievePaymentRequestMessage._meta_._class_ =  RetrievePaymentRequestMessage;
RetrievePaymentRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrievePaymentRequestMessage._meta_.fields["externalPaymentId"] = {};
RetrievePaymentRequestMessage._meta_.fields["externalPaymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePaymentRequestMessage;
}



/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);
var remotemessage_QueryStatus = __webpack_require__(67);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrievePaymentResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrievePaymentResponseMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_PAYMENT_RESPONSE"]);
  this.reason = undefined;
  this.externalPaymentId = undefined;
  this.queryStatus = undefined;
  this.payment = undefined;
};

RetrievePaymentResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrievePaymentResponseMessage.prototype.constructor = RetrievePaymentResponseMessage;

/**
* Set the field value
* May be populated when the operation fails.
*
* @memberof remotemessage.RetrievePaymentResponseMessage
* @param {String} reason 
*/
RetrievePaymentResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* May be populated when the operation fails.
* @memberof remotemessage.RetrievePaymentResponseMessage
* @return {String} 
*/
RetrievePaymentResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* The externalPaymentId used when a payment was created
*
* @memberof remotemessage.RetrievePaymentResponseMessage
* @param {String} externalPaymentId 
*/
RetrievePaymentResponseMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* The externalPaymentId used when a payment was created
* @memberof remotemessage.RetrievePaymentResponseMessage
* @return {String} 
*/
RetrievePaymentResponseMessage.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* The status of the query
*
* @memberof remotemessage.RetrievePaymentResponseMessage
* @param {remotemessage.QueryStatus} queryStatus 
*/
RetrievePaymentResponseMessage.prototype.setQueryStatus = function(queryStatus) {
  this.queryStatus = queryStatus;
};

/**
* Get the field value
* The status of the query
* @memberof remotemessage.RetrievePaymentResponseMessage
* @return {remotemessage.QueryStatus} 
*/
RetrievePaymentResponseMessage.prototype.getQueryStatus = function() {
  return this.queryStatus;
};

/**
* Set the field value
* Payment information
*
* @memberof remotemessage.RetrievePaymentResponseMessage
* @param {payments.Payment} payment 
*/
RetrievePaymentResponseMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* Payment information
* @memberof remotemessage.RetrievePaymentResponseMessage
* @return {payments.Payment} 
*/
RetrievePaymentResponseMessage.prototype.getPayment = function() {
  return this.payment;
};

RetrievePaymentResponseMessage._meta_ =  {fields:  {}};
RetrievePaymentResponseMessage._meta_._class_ =  RetrievePaymentResponseMessage;
RetrievePaymentResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrievePaymentResponseMessage._meta_.fields["reason"] = {};
RetrievePaymentResponseMessage._meta_.fields["reason"].type = String;
RetrievePaymentResponseMessage._meta_.fields["externalPaymentId"] = {};
RetrievePaymentResponseMessage._meta_.fields["externalPaymentId"].type = String;
RetrievePaymentResponseMessage._meta_.fields["queryStatus"] = {};
RetrievePaymentResponseMessage._meta_.fields["queryStatus"].type = remotemessage_QueryStatus;
RetrievePaymentResponseMessage._meta_.fields["payment"] = {};
RetrievePaymentResponseMessage._meta_.fields["payment"].type = payments_Payment;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePaymentResponseMessage;
}



/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrievePendingPaymentsMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrievePendingPaymentsMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_PENDING_PAYMENTS"]);
};

RetrievePendingPaymentsMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrievePendingPaymentsMessage.prototype.constructor = RetrievePendingPaymentsMessage;

RetrievePendingPaymentsMessage._meta_ =  {fields:  {}};
RetrievePendingPaymentsMessage._meta_._class_ =  RetrievePendingPaymentsMessage;
RetrievePendingPaymentsMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePendingPaymentsMessage;
}



/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var base_PendingPaymentEntry = __webpack_require__(42);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var RetrievePendingPaymentsResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = RetrievePendingPaymentsResponseMessage;
  this.setMethod(remotemessage_Method["RETRIEVE_PENDING_PAYMENTS_RESPONSE"]);
  this.status = undefined;
  this.pendingPaymentEntries = undefined;
};

RetrievePendingPaymentsResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
RetrievePendingPaymentsResponseMessage.prototype.constructor = RetrievePendingPaymentsResponseMessage;

/**
* Set the field value
* The status of the result
*
* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
RetrievePendingPaymentsResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* The status of the result
* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
* @return {remotemessage.ResultStatus} 
*/
RetrievePendingPaymentsResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The pending payments.
*
* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
* @param {Array.<base.PendingPaymentEntry>} pendingPaymentEntries An array of 
*/
RetrievePendingPaymentsResponseMessage.prototype.setPendingPaymentEntries = function(pendingPaymentEntries) {
  this.pendingPaymentEntries = pendingPaymentEntries;
};

/**
* Get the field value
* The pending payments.
* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
* @return {Array.<base.PendingPaymentEntry>} An array of 
*/
RetrievePendingPaymentsResponseMessage.prototype.getPendingPaymentEntries = function() {
  return this.pendingPaymentEntries;
};

RetrievePendingPaymentsResponseMessage._meta_ =  {fields:  {}};
RetrievePendingPaymentsResponseMessage._meta_._class_ =  RetrievePendingPaymentsResponseMessage;
RetrievePendingPaymentsResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
RetrievePendingPaymentsResponseMessage._meta_.fields["status"] = {};
RetrievePendingPaymentsResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"] = {};
RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"].type = Array;
RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"].elementType = base_PendingPaymentEntry;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePendingPaymentsResponseMessage;
}



/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ShowPaymentReceiptOptionsMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ShowPaymentReceiptOptionsMessage;
  this.setMethod(remotemessage_Method["SHOW_PAYMENT_RECEIPT_OPTIONS"]);
  this.orderId = undefined;
  this.paymentId = undefined;
};

ShowPaymentReceiptOptionsMessage.prototype = Object.create(remotemessage_Message.prototype);
ShowPaymentReceiptOptionsMessage.prototype.constructor = ShowPaymentReceiptOptionsMessage;

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
* @param {String} orderId 
*/
ShowPaymentReceiptOptionsMessage.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
* @return {String} 
*/
ShowPaymentReceiptOptionsMessage.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
* @param {String} paymentId 
*/
ShowPaymentReceiptOptionsMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
* @return {String} 
*/
ShowPaymentReceiptOptionsMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

ShowPaymentReceiptOptionsMessage._meta_ =  {fields:  {}};
ShowPaymentReceiptOptionsMessage._meta_._class_ =  ShowPaymentReceiptOptionsMessage;
ShowPaymentReceiptOptionsMessage._meta_._superMeta_ = remotemessage_Message._meta_;
ShowPaymentReceiptOptionsMessage._meta_.fields["orderId"] = {};
ShowPaymentReceiptOptionsMessage._meta_.fields["orderId"].type = String;
ShowPaymentReceiptOptionsMessage._meta_.fields["paymentId"] = {};
ShowPaymentReceiptOptionsMessage._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = ShowPaymentReceiptOptionsMessage;
}



/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ShutDownMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ShutDownMessage;
  this.setMethod(remotemessage_Method["SHUTDOWN"]);
};

ShutDownMessage.prototype = Object.create(remotemessage_Message.prototype);
ShutDownMessage.prototype.constructor = ShutDownMessage;

ShutDownMessage._meta_ =  {fields:  {}};
ShutDownMessage._meta_._class_ =  ShutDownMessage;
ShutDownMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = ShutDownMessage;
}



/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var SignatureVerifiedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = SignatureVerifiedMessage;
  this.setMethod(remotemessage_Method["SIGNATURE_VERIFIED"]);
  this.payment = undefined;
  this.verified = undefined;
};

SignatureVerifiedMessage.prototype = Object.create(remotemessage_Message.prototype);
SignatureVerifiedMessage.prototype.constructor = SignatureVerifiedMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.SignatureVerifiedMessage
* @param {payments.Payment} payment 
*/
SignatureVerifiedMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.SignatureVerifiedMessage
* @return {payments.Payment} 
*/
SignatureVerifiedMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* If true the signature is verified
*
* @memberof remotemessage.SignatureVerifiedMessage
* @param {Boolean} verified 
*/
SignatureVerifiedMessage.prototype.setVerified = function(verified) {
  this.verified = verified;
};

/**
* Get the field value
* If true the signature is verified
* @memberof remotemessage.SignatureVerifiedMessage
* @return {Boolean} 
*/
SignatureVerifiedMessage.prototype.getVerified = function() {
  return this.verified;
};

SignatureVerifiedMessage._meta_ =  {fields:  {}};
SignatureVerifiedMessage._meta_._class_ =  SignatureVerifiedMessage;
SignatureVerifiedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
SignatureVerifiedMessage._meta_.fields["payment"] = {};
SignatureVerifiedMessage._meta_.fields["payment"].type = payments_Payment;
SignatureVerifiedMessage._meta_.fields["verified"] = {};
SignatureVerifiedMessage._meta_.fields["verified"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = SignatureVerifiedMessage;
}



/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TerminalMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TerminalMessage;
  this.setMethod(remotemessage_Method["TERMINAL_MESSAGE"]);
  this.text = undefined;
};

TerminalMessage.prototype = Object.create(remotemessage_Message.prototype);
TerminalMessage.prototype.constructor = TerminalMessage;

/**
* Set the field value
* The message to display.
*
* @memberof remotemessage.TerminalMessage
* @param {String} text 
*/
TerminalMessage.prototype.setText = function(text) {
  this.text = text;
};

/**
* Get the field value
* The message to display.
* @memberof remotemessage.TerminalMessage
* @return {String} 
*/
TerminalMessage.prototype.getText = function() {
  return this.text;
};

TerminalMessage._meta_ =  {fields:  {}};
TerminalMessage._meta_._class_ =  TerminalMessage;
TerminalMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TerminalMessage._meta_.fields["text"] = {};
TerminalMessage._meta_.fields["text"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TerminalMessage;
}



/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var printer_Printer = __webpack_require__(9);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TextPrintMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TextPrintMessage;
  this.setMethod(remotemessage_Method["PRINT_TEXT"]);
  this.textLines = undefined;
  this.externalPrintJobId = undefined;
  this.printer = undefined;
};

TextPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
TextPrintMessage.prototype.constructor = TextPrintMessage;

/**
* Set the field value
* @memberof remotemessage.TextPrintMessage
* @param {Array.<String>} textLines An array of 
*/
TextPrintMessage.prototype.setTextLines = function(textLines) {
  this.textLines = textLines;
};

/**
* Get the field value
* @memberof remotemessage.TextPrintMessage
* @return {Array.<String>} An array of 
*/
TextPrintMessage.prototype.getTextLines = function() {
  return this.textLines;
};

/**
* Set the field value
* External print job ID assigned to this request
*
* @memberof remotemessage.TextPrintMessage
* @param {String} externalPrintJobId 
*/
TextPrintMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
  this.externalPrintJobId = externalPrintJobId;
};

/**
* Get the field value
* External print job ID assigned to this request
* @memberof remotemessage.TextPrintMessage
* @return {String} 
*/
TextPrintMessage.prototype.getExternalPrintJobId = function() {
  return this.externalPrintJobId;
};

/**
* Set the field value
* Printer to which the print job should be routed.
*
* @memberof remotemessage.TextPrintMessage
* @param {printer.Printer} printer 
*/
TextPrintMessage.prototype.setPrinter = function(printer) {
  this.printer = printer;
};

/**
* Get the field value
* Printer to which the print job should be routed.
* @memberof remotemessage.TextPrintMessage
* @return {printer.Printer} 
*/
TextPrintMessage.prototype.getPrinter = function() {
  return this.printer;
};

TextPrintMessage._meta_ =  {fields:  {}};
TextPrintMessage._meta_._class_ =  TextPrintMessage;
TextPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TextPrintMessage._meta_.fields["textLines"] = {};
TextPrintMessage._meta_.fields["textLines"].type = Array;
TextPrintMessage._meta_.fields["externalPrintJobId"] = {};
TextPrintMessage._meta_.fields["externalPrintJobId"].type = String;
TextPrintMessage._meta_.fields["printer"] = {};
TextPrintMessage._meta_.fields["printer"].type = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = TextPrintMessage;
}



/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var ThankYouMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = ThankYouMessage;
  this.setMethod(remotemessage_Method["SHOW_THANK_YOU_SCREEN"]);
};

ThankYouMessage.prototype = Object.create(remotemessage_Message.prototype);
ThankYouMessage.prototype.constructor = ThankYouMessage;

ThankYouMessage._meta_ =  {fields:  {}};
ThankYouMessage._meta_._class_ =  ThankYouMessage;
ThankYouMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = ThankYouMessage;
}



/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TipAddedMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TipAddedMessage;
  this.setMethod(remotemessage_Method["TIP_ADDED"]);
  this.tipAmount = undefined;
};

TipAddedMessage.prototype = Object.create(remotemessage_Message.prototype);
TipAddedMessage.prototype.constructor = TipAddedMessage;

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotemessage.TipAddedMessage
* @param {Number} tipAmount must be a long integer
*/
TipAddedMessage.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotemessage.TipAddedMessage
* @return {Number} must be a long integer
*/
TipAddedMessage.prototype.getTipAmount = function() {
  return this.tipAmount;
};

TipAddedMessage._meta_ =  {fields:  {}};
TipAddedMessage._meta_._class_ =  TipAddedMessage;
TipAddedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TipAddedMessage._meta_.fields["tipAmount"] = {};
TipAddedMessage._meta_.fields["tipAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = TipAddedMessage;
}



/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TipAdjustMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TipAdjustMessage;
  this.setMethod(remotemessage_Method["TIP_ADJUST"]);
  this.tipAmount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
};

TipAdjustMessage.prototype = Object.create(remotemessage_Message.prototype);
TipAdjustMessage.prototype.constructor = TipAdjustMessage;

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotemessage.TipAdjustMessage
* @param {Number} tipAmount must be a long integer
*/
TipAdjustMessage.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotemessage.TipAdjustMessage
* @return {Number} must be a long integer
*/
TipAdjustMessage.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.TipAdjustMessage
* @param {String} orderId 
*/
TipAdjustMessage.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.TipAdjustMessage
* @return {String} 
*/
TipAdjustMessage.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.TipAdjustMessage
* @param {String} paymentId 
*/
TipAdjustMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.TipAdjustMessage
* @return {String} 
*/
TipAdjustMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

TipAdjustMessage._meta_ =  {fields:  {}};
TipAdjustMessage._meta_._class_ =  TipAdjustMessage;
TipAdjustMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TipAdjustMessage._meta_.fields["tipAmount"] = {};
TipAdjustMessage._meta_.fields["tipAmount"].type = Number;
TipAdjustMessage._meta_.fields["orderId"] = {};
TipAdjustMessage._meta_.fields["orderId"].type = String;
TipAdjustMessage._meta_.fields["paymentId"] = {};
TipAdjustMessage._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TipAdjustMessage;
}



/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TipAdjustResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TipAdjustResponseMessage;
  this.setMethod(remotemessage_Method["TIP_ADJUST_RESPONSE"]);
  this.success = undefined;
  this.amount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
};

TipAdjustResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
TipAdjustResponseMessage.prototype.constructor = TipAdjustResponseMessage;

/**
* Set the field value
* If true the tip adjustment succeeded
*
* @memberof remotemessage.TipAdjustResponseMessage
* @param {Boolean} success 
*/
TipAdjustResponseMessage.prototype.setSuccess = function(success) {
  this.success = success;
};

/**
* Get the field value
* If true the tip adjustment succeeded
* @memberof remotemessage.TipAdjustResponseMessage
* @return {Boolean} 
*/
TipAdjustResponseMessage.prototype.getSuccess = function() {
  return this.success;
};

/**
* Set the field value
* Amount of tip
*
* @memberof remotemessage.TipAdjustResponseMessage
* @param {Number} amount must be a long integer
*/
TipAdjustResponseMessage.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount of tip
* @memberof remotemessage.TipAdjustResponseMessage
* @return {Number} must be a long integer
*/
TipAdjustResponseMessage.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Unique identifier for a order
*
* @memberof remotemessage.TipAdjustResponseMessage
* @param {String} orderId 
*/
TipAdjustResponseMessage.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier for a order
* @memberof remotemessage.TipAdjustResponseMessage
* @return {String} 
*/
TipAdjustResponseMessage.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotemessage.TipAdjustResponseMessage
* @param {String} paymentId 
*/
TipAdjustResponseMessage.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotemessage.TipAdjustResponseMessage
* @return {String} 
*/
TipAdjustResponseMessage.prototype.getPaymentId = function() {
  return this.paymentId;
};

TipAdjustResponseMessage._meta_ =  {fields:  {}};
TipAdjustResponseMessage._meta_._class_ =  TipAdjustResponseMessage;
TipAdjustResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TipAdjustResponseMessage._meta_.fields["success"] = {};
TipAdjustResponseMessage._meta_.fields["success"].type = Boolean;
TipAdjustResponseMessage._meta_.fields["amount"] = {};
TipAdjustResponseMessage._meta_.fields["amount"].type = Number;
TipAdjustResponseMessage._meta_.fields["orderId"] = {};
TipAdjustResponseMessage._meta_.fields["orderId"].type = String;
TipAdjustResponseMessage._meta_.fields["paymentId"] = {};
TipAdjustResponseMessage._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TipAdjustResponseMessage;
}



/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_PayIntent = __webpack_require__(65);
var remotemessage_Message = __webpack_require__(1);
var order_Order = __webpack_require__(49);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TxStartRequestMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TxStartRequestMessage;
  this.setMethod(remotemessage_Method["TX_START"]);
  this.suppressOnScreenTips = undefined;
  this.order = undefined;
  this.payIntent = undefined;
  this.requestInfo = undefined;
};

TxStartRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
TxStartRequestMessage.prototype.constructor = TxStartRequestMessage;

/**
* Set the field value
* If true, then tips on the screen should not be displayed.
*
* @memberof remotemessage.TxStartRequestMessage
* @param {Boolean} suppressOnScreenTips 
*/
TxStartRequestMessage.prototype.setSuppressOnScreenTips = function(suppressOnScreenTips) {
  this.suppressOnScreenTips = suppressOnScreenTips;
};

/**
* Get the field value
* If true, then tips on the screen should not be displayed.
* @memberof remotemessage.TxStartRequestMessage
* @return {Boolean} 
*/
TxStartRequestMessage.prototype.getSuppressOnScreenTips = function() {
  return this.suppressOnScreenTips;
};

/**
* Set the field value
* The order
*
* @memberof remotemessage.TxStartRequestMessage
* @param {order.Order} order 
*/
TxStartRequestMessage.prototype.setOrder = function(order) {
  this.order = order;
};

/**
* Get the field value
* The order
* @memberof remotemessage.TxStartRequestMessage
* @return {order.Order} 
*/
TxStartRequestMessage.prototype.getOrder = function() {
  return this.order;
};

/**
* Set the field value
* The payIntent
*
* @memberof remotemessage.TxStartRequestMessage
* @param {remotemessage.PayIntent} payIntent 
*/
TxStartRequestMessage.prototype.setPayIntent = function(payIntent) {
  this.payIntent = payIntent;
};

/**
* Get the field value
* The payIntent
* @memberof remotemessage.TxStartRequestMessage
* @return {remotemessage.PayIntent} 
*/
TxStartRequestMessage.prototype.getPayIntent = function() {
  return this.payIntent;
};

/**
* Set the field value
* Extra information to include with the request, like type of request
*
* @memberof remotemessage.TxStartRequestMessage
* @param {String} requestInfo 
*/
TxStartRequestMessage.prototype.setRequestInfo = function(requestInfo) {
  this.requestInfo = requestInfo;
};

/**
* Get the field value
* Extra information to include with the request, like type of request
* @memberof remotemessage.TxStartRequestMessage
* @return {String} 
*/
TxStartRequestMessage.prototype.getRequestInfo = function() {
  return this.requestInfo;
};

TxStartRequestMessage._meta_ =  {fields:  {}};
TxStartRequestMessage._meta_._class_ =  TxStartRequestMessage;
TxStartRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TxStartRequestMessage._meta_.fields["suppressOnScreenTips"] = {};
TxStartRequestMessage._meta_.fields["suppressOnScreenTips"].type = Boolean;
TxStartRequestMessage._meta_.fields["order"] = {};
TxStartRequestMessage._meta_.fields["order"].type = order_Order;
TxStartRequestMessage._meta_.fields["payIntent"] = {};
TxStartRequestMessage._meta_.fields["payIntent"].type = remotemessage_PayIntent;
TxStartRequestMessage._meta_.fields["requestInfo"] = {};
TxStartRequestMessage._meta_.fields["requestInfo"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TxStartRequestMessage;
}



/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_TxStartResponseResult = __webpack_require__(151);
var order_Order = __webpack_require__(49);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TxStartResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TxStartResponseMessage;
  this.setMethod(remotemessage_Method["TX_START_RESPONSE"]);
  this.success = undefined;
  this.order = undefined;
  this.externalPaymentId = undefined;
  this.result = undefined;
  this.requestInfo = undefined;
};

TxStartResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
TxStartResponseMessage.prototype.constructor = TxStartResponseMessage;

/**
* Set the field value
* Deprecated
*
* @memberof remotemessage.TxStartResponseMessage
* @param {Boolean} success 
*/
TxStartResponseMessage.prototype.setSuccess = function(success) {
  this.success = success;
};

/**
* Get the field value
* Deprecated
* @memberof remotemessage.TxStartResponseMessage
* @return {Boolean} 
*/
TxStartResponseMessage.prototype.getSuccess = function() {
  return this.success;
};

/**
* Set the field value
* The order
*
* @memberof remotemessage.TxStartResponseMessage
* @param {order.Order} order 
*/
TxStartResponseMessage.prototype.setOrder = function(order) {
  this.order = order;
};

/**
* Get the field value
* The order
* @memberof remotemessage.TxStartResponseMessage
* @return {order.Order} 
*/
TxStartResponseMessage.prototype.getOrder = function() {
  return this.order;
};

/**
* Set the field value
* The external id provided in the initiating pay intent
*
* @memberof remotemessage.TxStartResponseMessage
* @param {String} externalPaymentId 
*/
TxStartResponseMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* The external id provided in the initiating pay intent
* @memberof remotemessage.TxStartResponseMessage
* @return {String} 
*/
TxStartResponseMessage.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* @memberof remotemessage.TxStartResponseMessage
* @param {remotemessage.TxStartResponseResult} result 
*/
TxStartResponseMessage.prototype.setResult = function(result) {
  this.result = result;
};

/**
* Get the field value
* @memberof remotemessage.TxStartResponseMessage
* @return {remotemessage.TxStartResponseResult} 
*/
TxStartResponseMessage.prototype.getResult = function() {
  return this.result;
};

/**
* Set the field value
* Extra information to include with the request, like type of request
*
* @memberof remotemessage.TxStartResponseMessage
* @param {String} requestInfo 
*/
TxStartResponseMessage.prototype.setRequestInfo = function(requestInfo) {
  this.requestInfo = requestInfo;
};

/**
* Get the field value
* Extra information to include with the request, like type of request
* @memberof remotemessage.TxStartResponseMessage
* @return {String} 
*/
TxStartResponseMessage.prototype.getRequestInfo = function() {
  return this.requestInfo;
};

TxStartResponseMessage._meta_ =  {fields:  {}};
TxStartResponseMessage._meta_._class_ =  TxStartResponseMessage;
TxStartResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TxStartResponseMessage._meta_.fields["success"] = {};
TxStartResponseMessage._meta_.fields["success"].type = Boolean;
TxStartResponseMessage._meta_.fields["order"] = {};
TxStartResponseMessage._meta_.fields["order"].type = order_Order;
TxStartResponseMessage._meta_.fields["externalPaymentId"] = {};
TxStartResponseMessage._meta_.fields["externalPaymentId"].type = String;
TxStartResponseMessage._meta_.fields["result"] = {};
TxStartResponseMessage._meta_.fields["result"].type = remotemessage_TxStartResponseResult;
TxStartResponseMessage._meta_.fields["requestInfo"] = {};
TxStartResponseMessage._meta_.fields["requestInfo"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TxStartResponseMessage;
}



/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_TxState = __webpack_require__(34);

/**
* @constructor
* @memberof remotemessage
*/
var TxStateEnum = function() {
  this._class_ = TxStateEnum;
  this.txState = undefined;
};


/**
* Set the field value
* @memberof remotemessage.TxStateEnum
* @param {remotemessage.TxState} txState 
*/
TxStateEnum.prototype.setTxState = function(txState) {
  this.txState = txState;
};

/**
* Get the field value
* @memberof remotemessage.TxStateEnum
* @return {remotemessage.TxState} 
*/
TxStateEnum.prototype.getTxState = function() {
  return this.txState;
};

/**
* @memberof remotemessage.TxStateEnum
* @private
*/
TxStateEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TxStateEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

TxStateEnum._meta_ =  {fields:  {}};
TxStateEnum._meta_._class_ =  TxStateEnum;
TxStateEnum._meta_.fields["txState"] = {};
TxStateEnum._meta_.fields["txState"].type = remotemessage_TxState;

//
// Expose the module.
//
if (true) {
module.exports = TxStateEnum;
}



/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_TxState = __webpack_require__(34);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var TxStateMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = TxStateMessage;
  this.setMethod(remotemessage_Method["TX_STATE"]);
  this.txState = undefined;
};

TxStateMessage.prototype = Object.create(remotemessage_Message.prototype);
TxStateMessage.prototype.constructor = TxStateMessage;

/**
* Set the field value
* Transaction state
*
* @memberof remotemessage.TxStateMessage
* @param {remotemessage.TxState} txState 
*/
TxStateMessage.prototype.setTxState = function(txState) {
  this.txState = txState;
};

/**
* Get the field value
* Transaction state
* @memberof remotemessage.TxStateMessage
* @return {remotemessage.TxState} 
*/
TxStateMessage.prototype.getTxState = function() {
  return this.txState;
};

TxStateMessage._meta_ =  {fields:  {}};
TxStateMessage._meta_._class_ =  TxStateMessage;
TxStateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
TxStateMessage._meta_.fields["txState"] = {};
TxStateMessage._meta_.fields["txState"].type = remotemessage_TxState;

//
// Expose the module.
//
if (true) {
module.exports = TxStateMessage;
}



/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_UiDirection = __webpack_require__(152);
var remotemessage_InputOption = __webpack_require__(143);
var remotemessage_Message = __webpack_require__(1);
var remotemessage_UiState = __webpack_require__(153);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var UiStateMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = UiStateMessage;
  this.setMethod(remotemessage_Method["UI_STATE"]);
  this.uiText = undefined;
  this.uiDirection = undefined;
  this.inputOptions = undefined;
  this.uiState = undefined;
};

UiStateMessage.prototype = Object.create(remotemessage_Message.prototype);
UiStateMessage.prototype.constructor = UiStateMessage;

/**
* Set the field value
* The text for the UI
*
* @memberof remotemessage.UiStateMessage
* @param {String} uiText 
*/
UiStateMessage.prototype.setUiText = function(uiText) {
  this.uiText = uiText;
};

/**
* Get the field value
* The text for the UI
* @memberof remotemessage.UiStateMessage
* @return {String} 
*/
UiStateMessage.prototype.getUiText = function() {
  return this.uiText;
};

/**
* Set the field value
* @memberof remotemessage.UiStateMessage
* @param {remotemessage.UiDirection} uiDirection 
*/
UiStateMessage.prototype.setUiDirection = function(uiDirection) {
  this.uiDirection = uiDirection;
};

/**
* Get the field value
* @memberof remotemessage.UiStateMessage
* @return {remotemessage.UiDirection} 
*/
UiStateMessage.prototype.getUiDirection = function() {
  return this.uiDirection;
};

/**
* Set the field value
* @memberof remotemessage.UiStateMessage
* @param {Array.<remotemessage.InputOption>} inputOptions An array of 
*/
UiStateMessage.prototype.setInputOptions = function(inputOptions) {
  this.inputOptions = inputOptions;
};

/**
* Get the field value
* @memberof remotemessage.UiStateMessage
* @return {Array.<remotemessage.InputOption>} An array of 
*/
UiStateMessage.prototype.getInputOptions = function() {
  return this.inputOptions;
};

/**
* Set the field value
* @memberof remotemessage.UiStateMessage
* @param {remotemessage.UiState} uiState 
*/
UiStateMessage.prototype.setUiState = function(uiState) {
  this.uiState = uiState;
};

/**
* Get the field value
* @memberof remotemessage.UiStateMessage
* @return {remotemessage.UiState} 
*/
UiStateMessage.prototype.getUiState = function() {
  return this.uiState;
};

UiStateMessage._meta_ =  {fields:  {}};
UiStateMessage._meta_._class_ =  UiStateMessage;
UiStateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
UiStateMessage._meta_.fields["uiText"] = {};
UiStateMessage._meta_.fields["uiText"].type = String;
UiStateMessage._meta_.fields["uiDirection"] = {};
UiStateMessage._meta_.fields["uiDirection"].type = remotemessage_UiDirection;
UiStateMessage._meta_.fields["inputOptions"] = {};
UiStateMessage._meta_.fields["inputOptions"].type = Array;
UiStateMessage._meta_.fields["inputOptions"].elementType = remotemessage_InputOption;
UiStateMessage._meta_.fields["uiState"] = {};
UiStateMessage._meta_.fields["uiState"].type = remotemessage_UiState;

//
// Expose the module.
//
if (true) {
module.exports = UiStateMessage;
}



/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var VaultCardMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = VaultCardMessage;
  this.setMethod(remotemessage_Method["VAULT_CARD"]);
  this.cardEntryMethods = undefined;
};

VaultCardMessage.prototype = Object.create(remotemessage_Message.prototype);
VaultCardMessage.prototype.constructor = VaultCardMessage;

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotemessage.VaultCardMessage
* @param {Number} cardEntryMethods must be an integer
*/
VaultCardMessage.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotemessage.VaultCardMessage
* @return {Number} must be an integer
*/
VaultCardMessage.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

VaultCardMessage._meta_ =  {fields:  {}};
VaultCardMessage._meta_._class_ =  VaultCardMessage;
VaultCardMessage._meta_._superMeta_ = remotemessage_Message._meta_;
VaultCardMessage._meta_.fields["cardEntryMethods"] = {};
VaultCardMessage._meta_.fields["cardEntryMethods"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = VaultCardMessage;
}



/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_ResultStatus = __webpack_require__(8);
var remotemessage_Message = __webpack_require__(1);
var payments_VaultedCard = __webpack_require__(11);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var VaultCardResponseMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = VaultCardResponseMessage;
  this.setMethod(remotemessage_Method["VAULT_CARD_RESPONSE"]);
  this.reason = undefined;
  this.status = undefined;
  this.card = undefined;
};

VaultCardResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
VaultCardResponseMessage.prototype.constructor = VaultCardResponseMessage;

/**
* Set the field value
* May be populated when the operation fails.
*
* @memberof remotemessage.VaultCardResponseMessage
* @param {String} reason 
*/
VaultCardResponseMessage.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* May be populated when the operation fails.
* @memberof remotemessage.VaultCardResponseMessage
* @return {String} 
*/
VaultCardResponseMessage.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* @memberof remotemessage.VaultCardResponseMessage
* @param {remotemessage.ResultStatus} status 
*/
VaultCardResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotemessage.VaultCardResponseMessage
* @return {remotemessage.ResultStatus} 
*/
VaultCardResponseMessage.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The card that was vaulted.
*
* @memberof remotemessage.VaultCardResponseMessage
* @param {payments.VaultedCard} card 
*/
VaultCardResponseMessage.prototype.setCard = function(card) {
  this.card = card;
};

/**
* Get the field value
* The card that was vaulted.
* @memberof remotemessage.VaultCardResponseMessage
* @return {payments.VaultedCard} 
*/
VaultCardResponseMessage.prototype.getCard = function() {
  return this.card;
};

VaultCardResponseMessage._meta_ =  {fields:  {}};
VaultCardResponseMessage._meta_._class_ =  VaultCardResponseMessage;
VaultCardResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
VaultCardResponseMessage._meta_.fields["reason"] = {};
VaultCardResponseMessage._meta_.fields["reason"].type = String;
VaultCardResponseMessage._meta_.fields["status"] = {};
VaultCardResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
VaultCardResponseMessage._meta_.fields["card"] = {};
VaultCardResponseMessage._meta_.fields["card"].type = payments_VaultedCard;

//
// Expose the module.
//
if (true) {
module.exports = VaultCardResponseMessage;
}



/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);
var base_Signature = __webpack_require__(17);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var VerifySignatureMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = VerifySignatureMessage;
  this.setMethod(remotemessage_Method["VERIFY_SIGNATURE"]);
  this.payment = undefined;
  this.signature = undefined;
};

VerifySignatureMessage.prototype = Object.create(remotemessage_Message.prototype);
VerifySignatureMessage.prototype.constructor = VerifySignatureMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.VerifySignatureMessage
* @param {payments.Payment} payment 
*/
VerifySignatureMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.VerifySignatureMessage
* @return {payments.Payment} 
*/
VerifySignatureMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* A signature
*
* @memberof remotemessage.VerifySignatureMessage
* @param {base.Signature} signature 
*/
VerifySignatureMessage.prototype.setSignature = function(signature) {
  this.signature = signature;
};

/**
* Get the field value
* A signature
* @memberof remotemessage.VerifySignatureMessage
* @return {base.Signature} 
*/
VerifySignatureMessage.prototype.getSignature = function() {
  return this.signature;
};

VerifySignatureMessage._meta_ =  {fields:  {}};
VerifySignatureMessage._meta_._class_ =  VerifySignatureMessage;
VerifySignatureMessage._meta_._superMeta_ = remotemessage_Message._meta_;
VerifySignatureMessage._meta_.fields["payment"] = {};
VerifySignatureMessage._meta_.fields["payment"].type = payments_Payment;
VerifySignatureMessage._meta_.fields["signature"] = {};
VerifySignatureMessage._meta_.fields["signature"].type = base_Signature;

//
// Expose the module.
//
if (true) {
module.exports = VerifySignatureMessage;
}



/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var order_VoidReason = __webpack_require__(14);
var remotemessage_Message = __webpack_require__(1);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var VoidPaymentMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = VoidPaymentMessage;
  this.setMethod(remotemessage_Method["VOID_PAYMENT"]);
  this.payment = undefined;
  this.voidReason = undefined;
};

VoidPaymentMessage.prototype = Object.create(remotemessage_Message.prototype);
VoidPaymentMessage.prototype.constructor = VoidPaymentMessage;

/**
* Set the field value
* A payment
*
* @memberof remotemessage.VoidPaymentMessage
* @param {payments.Payment} payment 
*/
VoidPaymentMessage.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment
* @memberof remotemessage.VoidPaymentMessage
* @return {payments.Payment} 
*/
VoidPaymentMessage.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof remotemessage.VoidPaymentMessage
* @param {order.VoidReason} voidReason 
*/
VoidPaymentMessage.prototype.setVoidReason = function(voidReason) {
  this.voidReason = voidReason;
};

/**
* Get the field value
* @memberof remotemessage.VoidPaymentMessage
* @return {order.VoidReason} 
*/
VoidPaymentMessage.prototype.getVoidReason = function() {
  return this.voidReason;
};

VoidPaymentMessage._meta_ =  {fields:  {}};
VoidPaymentMessage._meta_._class_ =  VoidPaymentMessage;
VoidPaymentMessage._meta_._superMeta_ = remotemessage_Message._meta_;
VoidPaymentMessage._meta_.fields["payment"] = {};
VoidPaymentMessage._meta_.fields["payment"].type = payments_Payment;
VoidPaymentMessage._meta_.fields["voidReason"] = {};
VoidPaymentMessage._meta_.fields["voidReason"].type = order_VoidReason;

//
// Expose the module.
//
if (true) {
module.exports = VoidPaymentMessage;
}



/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotemessage_Method = __webpack_require__(0);
var remotemessage_Message = __webpack_require__(1);

/**
* @constructor
* @augments remotemessage.Message
* @memberof remotemessage
*/
var WelcomeMessage = function() {
  remotemessage_Message.call(this);
  this._superClass_ = remotemessage_Message;
  this._class_ = WelcomeMessage;
  this.setMethod(remotemessage_Method["SHOW_WELCOME_SCREEN"]);
};

WelcomeMessage.prototype = Object.create(remotemessage_Message.prototype);
WelcomeMessage.prototype.constructor = WelcomeMessage;

WelcomeMessage._meta_ =  {fields:  {}};
WelcomeMessage._meta_._class_ =  WelcomeMessage;
WelcomeMessage._meta_._superMeta_ = remotemessage_Message._meta_;

//
// Expose the module.
//
if (true) {
module.exports = WelcomeMessage;
}



/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {


module.exports.remotepay = remotepay;
/**
* @namespace remotepay
*/
function remotepay() {}


remotepay.ActivityMessage = __webpack_require__(68);
remotepay.AuthRequest = __webpack_require__(314);
remotepay.AuthResponse = __webpack_require__(315);
remotepay.BaseRequest = __webpack_require__(3);
remotepay.BaseResponse = __webpack_require__(5);
remotepay.CapturePreAuthRequest = __webpack_require__(316);
remotepay.CapturePreAuthResponse = __webpack_require__(317);
remotepay.CardInfoRequest = __webpack_require__(318);
remotepay.CardInfoResponse = __webpack_require__(319);
remotepay.CloseoutRequest = __webpack_require__(320);
remotepay.CloseoutResponse = __webpack_require__(321);
remotepay.CloverDeviceErrorEvent = __webpack_require__(322);
remotepay.CloverDeviceEvent = __webpack_require__(323);
remotepay.ConfirmPaymentRequest = __webpack_require__(324);
remotepay.CustomActivityRequest = __webpack_require__(325);
remotepay.CustomActivityResponse = __webpack_require__(326);
remotepay.DeviceErrorEventCode = __webpack_require__(70);
remotepay.DeviceEventEnum = __webpack_require__(327);
remotepay.DeviceEventState = __webpack_require__(71);
remotepay.DeviceInfo = __webpack_require__(157);
remotepay.DisplayReceiptOptionsRequest = __webpack_require__(328);
remotepay.ErrorType = __webpack_require__(155);
remotepay.ExternalDeviceState = __webpack_require__(36);
remotepay.ExternalDeviceStateData = __webpack_require__(158);
remotepay.ExternalDeviceStateEnum = __webpack_require__(329);
remotepay.ICloverConnector = __webpack_require__(330);
remotepay.ICloverConnectorListener = __webpack_require__(331);
remotepay.Img = __webpack_require__(159);
remotepay.InputOption = __webpack_require__(156);
remotepay.KeyPress = __webpack_require__(72);
remotepay.KeyPressEnum = __webpack_require__(332);
remotepay.ManualRefundRequest = __webpack_require__(333);
remotepay.ManualRefundResponse = __webpack_require__(334);
remotepay.MerchantInfo = __webpack_require__(335);
remotepay.MessageFromActivity = __webpack_require__(336);
remotepay.MessageToActivity = __webpack_require__(337);
remotepay.OpenCashDrawerRequest = __webpack_require__(338);
remotepay.PaymentResponse = __webpack_require__(35);
remotepay.PlatformError = __webpack_require__(154);
remotepay.PreAuthRequest = __webpack_require__(339);
remotepay.PreAuthResponse = __webpack_require__(340);
remotepay.PrintJobStatusRequest = __webpack_require__(341);
remotepay.PrintJobStatusResponse = __webpack_require__(342);
remotepay.PrintRequest = __webpack_require__(343);
remotepay.QueryStatus = __webpack_require__(73);
remotepay.QueryStatusEnum = __webpack_require__(344);
remotepay.ReadCardDataRequest = __webpack_require__(345);
remotepay.ReadCardDataResponse = __webpack_require__(346);
remotepay.RefundPaymentRequest = __webpack_require__(347);
remotepay.RefundPaymentResponse = __webpack_require__(348);
remotepay.ResetDeviceResponse = __webpack_require__(349);
remotepay.ResponseCode = __webpack_require__(69);
remotepay.ResponseCodeEnum = __webpack_require__(350);
remotepay.ResultStatus = __webpack_require__(74);
remotepay.ResultStatusEnum = __webpack_require__(351);
remotepay.RetrieveDeviceStatusRequest = __webpack_require__(352);
remotepay.RetrieveDeviceStatusResponse = __webpack_require__(353);
remotepay.RetrievePaymentRequest = __webpack_require__(354);
remotepay.RetrievePaymentResponse = __webpack_require__(355);
remotepay.RetrievePendingPaymentsResponse = __webpack_require__(356);
remotepay.RetrievePrintersRequest = __webpack_require__(357);
remotepay.RetrievePrintersResponse = __webpack_require__(358);
remotepay.SaleRequest = __webpack_require__(359);
remotepay.SaleResponse = __webpack_require__(360);
remotepay.TipAdded = __webpack_require__(361);
remotepay.TipAdjustAuthRequest = __webpack_require__(362);
remotepay.TipAdjustAuthResponse = __webpack_require__(363);
remotepay.TransactionRequest = __webpack_require__(22);
remotepay.TransactionType = __webpack_require__(12);
remotepay.TransactionTypeEnum = __webpack_require__(364);
remotepay.VaultCardRequest = __webpack_require__(365);
remotepay.VaultCardResponse = __webpack_require__(366);
remotepay.VerifySignatureRequest = __webpack_require__(367);
remotepay.VoidCreditRequest = __webpack_require__(368);
remotepay.VoidCreditResponse = __webpack_require__(369);
remotepay.VoidPaymentRequest = __webpack_require__(370);
remotepay.VoidPaymentResponse = __webpack_require__(371);

//
// Expose the module.
//
if (true) {
  module.exports = remotepay;
}
    

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_TransactionType = __webpack_require__(12);
var remotepay_TransactionRequest = __webpack_require__(22);

/** A authorization request */
/**
* @constructor
* @augments remotepay.TransactionRequest
* @memberof remotepay
*/
var AuthRequest = function() {
  remotepay_TransactionRequest.call(this);
  this._superClass_ = remotepay_TransactionRequest;
  this._class_ = AuthRequest;
  this.setType(remotepay_TransactionType["PAYMENT"]);
  this.tippableAmount = undefined;
  this.disableCashback = undefined;
  this.taxAmount = undefined;
  this.allowOfflinePayment = undefined;
  this.forceOfflinePayment = undefined;
  this.approveOfflinePaymentWithoutPrompt = undefined;
};

AuthRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
AuthRequest.prototype.constructor = AuthRequest;

/**
* Set the field value
* Total amount used when calculating tips
*
* @memberof remotepay.AuthRequest
* @param {Number|Null} tippableAmount must be a long integer, 
*/
AuthRequest.prototype.setTippableAmount = function(tippableAmount) {
  this.tippableAmount = tippableAmount;
};

/**
* Get the field value
* Total amount used when calculating tips
* @memberof remotepay.AuthRequest
* @return {Number|Null} must be a long integer, 
*/
AuthRequest.prototype.getTippableAmount = function() {
  return this.tippableAmount;
};

/**
* Set the field value
* Do not allow cash back
*
* @memberof remotepay.AuthRequest
* @param {Boolean|Null} disableCashback 
*/
AuthRequest.prototype.setDisableCashback = function(disableCashback) {
  this.disableCashback = disableCashback;
};

/**
* Get the field value
* Do not allow cash back
* @memberof remotepay.AuthRequest
* @return {Boolean|Null} 
*/
AuthRequest.prototype.getDisableCashback = function() {
  return this.disableCashback;
};

/**
* Set the field value
* Amount paid in tax
*
* @memberof remotepay.AuthRequest
* @param {Number|Null} taxAmount must be a long integer, 
*/
AuthRequest.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Amount paid in tax
* @memberof remotepay.AuthRequest
* @return {Number|Null} must be a long integer, 
*/
AuthRequest.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* If true then offline payments can be accepted
*
* @memberof remotepay.AuthRequest
* @param {Boolean|Null} allowOfflinePayment 
*/
AuthRequest.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
  this.allowOfflinePayment = allowOfflinePayment;
};

/**
* Get the field value
* If true then offline payments can be accepted
* @memberof remotepay.AuthRequest
* @return {Boolean|Null} 
*/
AuthRequest.prototype.getAllowOfflinePayment = function() {
  return this.allowOfflinePayment;
};

/**
* Set the field value
* If true then payment will be taken offline, regardless of connection status
*
* @memberof remotepay.AuthRequest
* @param {Boolean|Null} forceOfflinePayment 
*/
AuthRequest.prototype.setForceOfflinePayment = function(forceOfflinePayment) {
  this.forceOfflinePayment = forceOfflinePayment;
};

/**
* Get the field value
* If true then payment will be taken offline, regardless of connection status
* @memberof remotepay.AuthRequest
* @return {Boolean|Null} 
*/
AuthRequest.prototype.getForceOfflinePayment = function() {
  return this.forceOfflinePayment;
};

/**
* Set the field value
* If true then offline payments will be approved without a prompt.  Currently must be true.
*
* @memberof remotepay.AuthRequest
* @param {Boolean|Null} approveOfflinePaymentWithoutPrompt 
*/
AuthRequest.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
};

/**
* Get the field value
* If true then offline payments will be approved without a prompt.  Currently must be true.
* @memberof remotepay.AuthRequest
* @return {Boolean|Null} 
*/
AuthRequest.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
  return this.approveOfflinePaymentWithoutPrompt;
};

AuthRequest._meta_ =  {fields:  {}};
AuthRequest._meta_._class_ =  AuthRequest;
AuthRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;
AuthRequest._meta_.fields["tippableAmount"] = {};
AuthRequest._meta_.fields["tippableAmount"].type = Number;
AuthRequest._meta_.fields["disableCashback"] = {};
AuthRequest._meta_.fields["disableCashback"].type = Boolean;
AuthRequest._meta_.fields["taxAmount"] = {};
AuthRequest._meta_.fields["taxAmount"].type = Number;
AuthRequest._meta_.fields["allowOfflinePayment"] = {};
AuthRequest._meta_.fields["allowOfflinePayment"].type = Boolean;
AuthRequest._meta_.fields["forceOfflinePayment"] = {};
AuthRequest._meta_.fields["forceOfflinePayment"].type = Boolean;
AuthRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
AuthRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = AuthRequest;
}



/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_PaymentResponse = __webpack_require__(35);

/** The response to an authorization request */
/**
* @constructor
* @augments remotepay.PaymentResponse
* @memberof remotepay
*/
var AuthResponse = function() {
  remotepay_PaymentResponse.call(this);
  this._superClass_ = remotepay_PaymentResponse;
  this._class_ = AuthResponse;
};

AuthResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
AuthResponse.prototype.constructor = AuthResponse;

AuthResponse._meta_ =  {fields:  {}};
AuthResponse._meta_._class_ =  AuthResponse;
AuthResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

//
// Expose the module.
//
if (true) {
module.exports = AuthResponse;
}



/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Captures a previously made pre auth */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var CapturePreAuthRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = CapturePreAuthRequest;
  this.amount = undefined;
  this.tipAmount = undefined;
  this.paymentId = undefined;
};

CapturePreAuthRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
CapturePreAuthRequest.prototype.constructor = CapturePreAuthRequest;

/**
* Set the field value
* Total amount paid
*
* @memberof remotepay.CapturePreAuthRequest
* @param {Number} amount must be a long integer
*/
CapturePreAuthRequest.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotepay.CapturePreAuthRequest
* @return {Number} must be a long integer
*/
CapturePreAuthRequest.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotepay.CapturePreAuthRequest
* @param {Number|Null} tipAmount must be a long integer, 
*/
CapturePreAuthRequest.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotepay.CapturePreAuthRequest
* @return {Number|Null} must be a long integer, 
*/
CapturePreAuthRequest.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotepay.CapturePreAuthRequest
* @param {String} paymentId 
*/
CapturePreAuthRequest.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotepay.CapturePreAuthRequest
* @return {String} 
*/
CapturePreAuthRequest.prototype.getPaymentId = function() {
  return this.paymentId;
};

CapturePreAuthRequest._meta_ =  {fields:  {}};
CapturePreAuthRequest._meta_._class_ =  CapturePreAuthRequest;
CapturePreAuthRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
CapturePreAuthRequest._meta_.fields["amount"] = {};
CapturePreAuthRequest._meta_.fields["amount"].type = Number;
CapturePreAuthRequest._meta_.fields["tipAmount"] = {};
CapturePreAuthRequest._meta_.fields["tipAmount"].type = Number;
CapturePreAuthRequest._meta_.fields["paymentId"] = {};
CapturePreAuthRequest._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CapturePreAuthRequest;
}



/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);

/** The result of an attempt to capture a previously made pre auth */
/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var CapturePreAuthResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = CapturePreAuthResponse;
  this.paymentId = undefined;
  this.amount = undefined;
  this.tipAmount = undefined;
};

CapturePreAuthResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
CapturePreAuthResponse.prototype.constructor = CapturePreAuthResponse;

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotepay.CapturePreAuthResponse
* @param {String} paymentId 
*/
CapturePreAuthResponse.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotepay.CapturePreAuthResponse
* @return {String} 
*/
CapturePreAuthResponse.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* Total amount paid
*
* @memberof remotepay.CapturePreAuthResponse
* @param {Number} amount must be a long integer
*/
CapturePreAuthResponse.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotepay.CapturePreAuthResponse
* @return {Number} must be a long integer
*/
CapturePreAuthResponse.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Included tip
*
* @memberof remotepay.CapturePreAuthResponse
* @param {Number} tipAmount must be a long integer
*/
CapturePreAuthResponse.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Included tip
* @memberof remotepay.CapturePreAuthResponse
* @return {Number} must be a long integer
*/
CapturePreAuthResponse.prototype.getTipAmount = function() {
  return this.tipAmount;
};

CapturePreAuthResponse._meta_ =  {fields:  {}};
CapturePreAuthResponse._meta_._class_ =  CapturePreAuthResponse;
CapturePreAuthResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
CapturePreAuthResponse._meta_.fields["paymentId"] = {};
CapturePreAuthResponse._meta_.fields["paymentId"].type = String;
CapturePreAuthResponse._meta_.fields["amount"] = {};
CapturePreAuthResponse._meta_.fields["amount"].type = Number;
CapturePreAuthResponse._meta_.fields["tipAmount"] = {};
CapturePreAuthResponse._meta_.fields["tipAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = CapturePreAuthResponse;
}



/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var CardInfoRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = CardInfoRequest;
  this.cardEntryMethods = undefined;
};

CardInfoRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
CardInfoRequest.prototype.constructor = CardInfoRequest;

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotepay.CardInfoRequest
* @param {Number} cardEntryMethods must be an integer
*/
CardInfoRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotepay.CardInfoRequest
* @return {Number} must be an integer
*/
CardInfoRequest.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

CardInfoRequest._meta_ =  {fields:  {}};
CardInfoRequest._meta_._class_ =  CardInfoRequest;
CardInfoRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
CardInfoRequest._meta_.fields["cardEntryMethods"] = {};
CardInfoRequest._meta_.fields["cardEntryMethods"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = CardInfoRequest;
}



/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);
var payments_VaultedCard = __webpack_require__(11);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var CardInfoResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = CardInfoResponse;
  this.card = undefined;
};

CardInfoResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
CardInfoResponse.prototype.constructor = CardInfoResponse;

/**
* Set the field value
* The card that was vaulted.
*
* @memberof remotepay.CardInfoResponse
* @param {payments.VaultedCard} card 
*/
CardInfoResponse.prototype.setCard = function(card) {
  this.card = card;
};

/**
* Get the field value
* The card that was vaulted.
* @memberof remotepay.CardInfoResponse
* @return {payments.VaultedCard} 
*/
CardInfoResponse.prototype.getCard = function() {
  return this.card;
};

CardInfoResponse._meta_ =  {fields:  {}};
CardInfoResponse._meta_._class_ =  CardInfoResponse;
CardInfoResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
CardInfoResponse._meta_.fields["card"] = {};
CardInfoResponse._meta_.fields["card"].type = payments_VaultedCard;

//
// Expose the module.
//
if (true) {
module.exports = CardInfoResponse;
}



/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Send a request for a closeout */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var CloseoutRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = CloseoutRequest;
  this.allowOpenTabs = "false";
  this.batchId = undefined;
};

CloseoutRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
CloseoutRequest.prototype.constructor = CloseoutRequest;

/**
* Set the field value
* Allow closeout if there are open tabs
*
* @memberof remotepay.CloseoutRequest
* @param {Boolean} allowOpenTabs 
*/
CloseoutRequest.prototype.setAllowOpenTabs = function(allowOpenTabs) {
  this.allowOpenTabs = allowOpenTabs;
};

/**
* Get the field value
* Allow closeout if there are open tabs
* @memberof remotepay.CloseoutRequest
* @return {Boolean} 
*/
CloseoutRequest.prototype.getAllowOpenTabs = function() {
  return this.allowOpenTabs;
};

/**
* Set the field value
* The batch id to close out.  If omitted, then the default current batch is used.
*
* @memberof remotepay.CloseoutRequest
* @param {String} batchId 
*/
CloseoutRequest.prototype.setBatchId = function(batchId) {
  this.batchId = batchId;
};

/**
* Get the field value
* The batch id to close out.  If omitted, then the default current batch is used.
* @memberof remotepay.CloseoutRequest
* @return {String} 
*/
CloseoutRequest.prototype.getBatchId = function() {
  return this.batchId;
};

CloseoutRequest._meta_ =  {fields:  {}};
CloseoutRequest._meta_._class_ =  CloseoutRequest;
CloseoutRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
CloseoutRequest._meta_.fields["allowOpenTabs"] = {};
CloseoutRequest._meta_.fields["allowOpenTabs"].type = Boolean;
CloseoutRequest._meta_.fields["batchId"] = {};
CloseoutRequest._meta_.fields["batchId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CloseoutRequest;
}



/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Batch = __webpack_require__(59);
var remotepay_BaseResponse = __webpack_require__(5);

/** The result of a request to do a closeout */
/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var CloseoutResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = CloseoutResponse;
  this.batch = undefined;
};

CloseoutResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
CloseoutResponse.prototype.constructor = CloseoutResponse;

/**
* Set the field value
* The batch that was closed out.
*
* @memberof remotepay.CloseoutResponse
* @param {payments.Batch} batch 
*/
CloseoutResponse.prototype.setBatch = function(batch) {
  this.batch = batch;
};

/**
* Get the field value
* The batch that was closed out.
* @memberof remotepay.CloseoutResponse
* @return {payments.Batch} 
*/
CloseoutResponse.prototype.getBatch = function() {
  return this.batch;
};

CloseoutResponse._meta_ =  {fields:  {}};
CloseoutResponse._meta_._class_ =  CloseoutResponse;
CloseoutResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
CloseoutResponse._meta_.fields["batch"] = {};
CloseoutResponse._meta_.fields["batch"].type = payments_Batch;

//
// Expose the module.
//
if (true) {
module.exports = CloseoutResponse;
}



/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_DeviceErrorEventCode = __webpack_require__(70);
var remotepay_PlatformError = __webpack_require__(154);
var remotepay_ErrorType = __webpack_require__(155);

/**
* @constructor
* @memberof remotepay
*/
var CloverDeviceErrorEvent = function() {
  this._class_ = CloverDeviceErrorEvent;
  this.message = undefined;
  this.code = undefined;
  this.cause = undefined;
  this.type = undefined;
};


/**
* Set the field value
* Description of the error.
*
* @memberof remotepay.CloverDeviceErrorEvent
* @param {String} message 
*/
CloverDeviceErrorEvent.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* Description of the error.
* @memberof remotepay.CloverDeviceErrorEvent
* @return {String} 
*/
CloverDeviceErrorEvent.prototype.getMessage = function() {
  return this.message;
};

/**
* Set the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @param {remotepay.DeviceErrorEventCode} code 
*/
CloverDeviceErrorEvent.prototype.setCode = function(code) {
  this.code = code;
};

/**
* Get the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @return {remotepay.DeviceErrorEventCode} 
*/
CloverDeviceErrorEvent.prototype.getCode = function() {
  return this.code;
};

/**
* Set the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @param {remotepay.PlatformError} cause 
*/
CloverDeviceErrorEvent.prototype.setCause = function(cause) {
  this.cause = cause;
};

/**
* Get the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @return {remotepay.PlatformError} 
*/
CloverDeviceErrorEvent.prototype.getCause = function() {
  return this.cause;
};

/**
* Set the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @param {remotepay.ErrorType} type 
*/
CloverDeviceErrorEvent.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* @memberof remotepay.CloverDeviceErrorEvent
* @return {remotepay.ErrorType} 
*/
CloverDeviceErrorEvent.prototype.getType = function() {
  return this.type;
};

/**
* @memberof remotepay.CloverDeviceErrorEvent
* @private
*/
CloverDeviceErrorEvent.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CloverDeviceErrorEvent.prototype.toString = function() {
  return JSON.stringify(this);
};

CloverDeviceErrorEvent._meta_ =  {fields:  {}};
CloverDeviceErrorEvent._meta_._class_ =  CloverDeviceErrorEvent;
CloverDeviceErrorEvent._meta_.fields["message"] = {};
CloverDeviceErrorEvent._meta_.fields["message"].type = String;
CloverDeviceErrorEvent._meta_.fields["code"] = {};
CloverDeviceErrorEvent._meta_.fields["code"].type = remotepay_DeviceErrorEventCode;
CloverDeviceErrorEvent._meta_.fields["cause"] = {};
CloverDeviceErrorEvent._meta_.fields["cause"].type = remotepay_PlatformError;
CloverDeviceErrorEvent._meta_.fields["type"] = {};
CloverDeviceErrorEvent._meta_.fields["type"].type = remotepay_ErrorType;

//
// Expose the module.
//
if (true) {
module.exports = CloverDeviceErrorEvent;
}



/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_DeviceEventState = __webpack_require__(71);
var remotepay_InputOption = __webpack_require__(156);

/**
* @constructor
* @memberof remotepay
*/
var CloverDeviceEvent = function() {
  this._class_ = CloverDeviceEvent;
  this.message = undefined;
  this.code = undefined;
  this.eventState = undefined;
  this.inputOptions = undefined;
};


/**
* Set the field value
* Identifier for the request
*
* @memberof remotepay.CloverDeviceEvent
* @param {String} message 
*/
CloverDeviceEvent.prototype.setMessage = function(message) {
  this.message = message;
};

/**
* Get the field value
* Identifier for the request
* @memberof remotepay.CloverDeviceEvent
* @return {String} 
*/
CloverDeviceEvent.prototype.getMessage = function() {
  return this.message;
};

/**
* Set the field value
* @memberof remotepay.CloverDeviceEvent
* @param {Number} code must be an integer
*/
CloverDeviceEvent.prototype.setCode = function(code) {
  this.code = code;
};

/**
* Get the field value
* @memberof remotepay.CloverDeviceEvent
* @return {Number} must be an integer
*/
CloverDeviceEvent.prototype.getCode = function() {
  return this.code;
};

/**
* Set the field value
* The event state
*
* @memberof remotepay.CloverDeviceEvent
* @param {remotepay.DeviceEventState} eventState 
*/
CloverDeviceEvent.prototype.setEventState = function(eventState) {
  this.eventState = eventState;
};

/**
* Get the field value
* The event state
* @memberof remotepay.CloverDeviceEvent
* @return {remotepay.DeviceEventState} 
*/
CloverDeviceEvent.prototype.getEventState = function() {
  return this.eventState;
};

/**
* Set the field value
* Available input options
*
* @memberof remotepay.CloverDeviceEvent
* @param {Array.<remotepay.InputOption>} inputOptions An array of 
*/
CloverDeviceEvent.prototype.setInputOptions = function(inputOptions) {
  this.inputOptions = inputOptions;
};

/**
* Get the field value
* Available input options
* @memberof remotepay.CloverDeviceEvent
* @return {Array.<remotepay.InputOption>} An array of 
*/
CloverDeviceEvent.prototype.getInputOptions = function() {
  return this.inputOptions;
};

/**
* @memberof remotepay.CloverDeviceEvent
* @private
*/
CloverDeviceEvent.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

CloverDeviceEvent.prototype.toString = function() {
  return JSON.stringify(this);
};

CloverDeviceEvent._meta_ =  {fields:  {}};
CloverDeviceEvent._meta_._class_ =  CloverDeviceEvent;
CloverDeviceEvent._meta_.fields["message"] = {};
CloverDeviceEvent._meta_.fields["message"].type = String;
CloverDeviceEvent._meta_.fields["code"] = {};
CloverDeviceEvent._meta_.fields["code"].type = Number;
CloverDeviceEvent._meta_.fields["eventState"] = {};
CloverDeviceEvent._meta_.fields["eventState"].type = remotepay_DeviceEventState;
CloverDeviceEvent._meta_.fields["inputOptions"] = {};
CloverDeviceEvent._meta_.fields["inputOptions"].type = Array;
CloverDeviceEvent._meta_.fields["inputOptions"].elementType = remotepay_InputOption;

//
// Expose the module.
//
if (true) {
module.exports = CloverDeviceEvent;
}



/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);
var base_Challenge = __webpack_require__(40);
var payments_Payment = __webpack_require__(4);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var ConfirmPaymentRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = ConfirmPaymentRequest;
  this.payment = undefined;
  this.challenges = undefined;
};

ConfirmPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
ConfirmPaymentRequest.prototype.constructor = ConfirmPaymentRequest;

/**
* Set the field value
* A payment that is being challenged
*
* @memberof remotepay.ConfirmPaymentRequest
* @param {payments.Payment} payment 
*/
ConfirmPaymentRequest.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* A payment that is being challenged
* @memberof remotepay.ConfirmPaymentRequest
* @return {payments.Payment} 
*/
ConfirmPaymentRequest.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* The challenges for the payment.
*
* @memberof remotepay.ConfirmPaymentRequest
* @param {Array.<base.Challenge>} challenges An array of 
*/
ConfirmPaymentRequest.prototype.setChallenges = function(challenges) {
  this.challenges = challenges;
};

/**
* Get the field value
* The challenges for the payment.
* @memberof remotepay.ConfirmPaymentRequest
* @return {Array.<base.Challenge>} An array of 
*/
ConfirmPaymentRequest.prototype.getChallenges = function() {
  return this.challenges;
};

ConfirmPaymentRequest._meta_ =  {fields:  {}};
ConfirmPaymentRequest._meta_._class_ =  ConfirmPaymentRequest;
ConfirmPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
ConfirmPaymentRequest._meta_.fields["payment"] = {};
ConfirmPaymentRequest._meta_.fields["payment"].type = payments_Payment;
ConfirmPaymentRequest._meta_.fields["challenges"] = {};
ConfirmPaymentRequest._meta_.fields["challenges"].type = Array;
ConfirmPaymentRequest._meta_.fields["challenges"].elementType = base_Challenge;

//
// Expose the module.
//
if (true) {
module.exports = ConfirmPaymentRequest;
}



/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Request to start a custom activity on a device. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var CustomActivityRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = CustomActivityRequest;
  this.action = undefined;
  this.payload = undefined;
  this.nonBlocking = undefined;
};

CustomActivityRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
CustomActivityRequest.prototype.constructor = CustomActivityRequest;

/**
* Set the field value
* The name of the action for this activity
*
* @memberof remotepay.CustomActivityRequest
* @param {String} action 
*/
CustomActivityRequest.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the action for this activity
* @memberof remotepay.CustomActivityRequest
* @return {String} 
*/
CustomActivityRequest.prototype.getAction = function() {
  return this.action;
};

/**
* Set the field value
* Data for this activity
*
* @memberof remotepay.CustomActivityRequest
* @param {String} payload 
*/
CustomActivityRequest.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Data for this activity
* @memberof remotepay.CustomActivityRequest
* @return {String} 
*/
CustomActivityRequest.prototype.getPayload = function() {
  return this.payload;
};

/**
* Set the field value
* If true, then the activity can be stopped in regular execution.
*
* @memberof remotepay.CustomActivityRequest
* @param {Boolean} nonBlocking 
*/
CustomActivityRequest.prototype.setNonBlocking = function(nonBlocking) {
  this.nonBlocking = nonBlocking;
};

/**
* Get the field value
* If true, then the activity can be stopped in regular execution.
* @memberof remotepay.CustomActivityRequest
* @return {Boolean} 
*/
CustomActivityRequest.prototype.getNonBlocking = function() {
  return this.nonBlocking;
};

CustomActivityRequest._meta_ =  {fields:  {}};
CustomActivityRequest._meta_._class_ =  CustomActivityRequest;
CustomActivityRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
CustomActivityRequest._meta_.fields["action"] = {};
CustomActivityRequest._meta_.fields["action"].type = String;
CustomActivityRequest._meta_.fields["payload"] = {};
CustomActivityRequest._meta_.fields["payload"].type = String;
CustomActivityRequest._meta_.fields["nonBlocking"] = {};
CustomActivityRequest._meta_.fields["nonBlocking"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = CustomActivityRequest;
}



/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var CustomActivityResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = CustomActivityResponse;
  this.payload = undefined;
  this.action = undefined;
};

CustomActivityResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
CustomActivityResponse.prototype.constructor = CustomActivityResponse;

/**
* Set the field value
* Response data for this activity
*
* @memberof remotepay.CustomActivityResponse
* @param {String} payload 
*/
CustomActivityResponse.prototype.setPayload = function(payload) {
  this.payload = payload;
};

/**
* Get the field value
* Response data for this activity
* @memberof remotepay.CustomActivityResponse
* @return {String} 
*/
CustomActivityResponse.prototype.getPayload = function() {
  return this.payload;
};

/**
* Set the field value
* The name of the action for this activity
*
* @memberof remotepay.CustomActivityResponse
* @param {String} action 
*/
CustomActivityResponse.prototype.setAction = function(action) {
  this.action = action;
};

/**
* Get the field value
* The name of the action for this activity
* @memberof remotepay.CustomActivityResponse
* @return {String} 
*/
CustomActivityResponse.prototype.getAction = function() {
  return this.action;
};

CustomActivityResponse._meta_ =  {fields:  {}};
CustomActivityResponse._meta_._class_ =  CustomActivityResponse;
CustomActivityResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
CustomActivityResponse._meta_.fields["payload"] = {};
CustomActivityResponse._meta_.fields["payload"].type = String;
CustomActivityResponse._meta_.fields["action"] = {};
CustomActivityResponse._meta_.fields["action"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = CustomActivityResponse;
}



/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_DeviceErrorEventCode = __webpack_require__(70);
var remotepay_DeviceEventState = __webpack_require__(71);

/**
* @constructor
* @memberof remotepay
*/
var DeviceEventEnum = function() {
  this._class_ = DeviceEventEnum;
  this.deviceErrorEventCode = undefined;
  this.deviceEventState = undefined;
};


/**
* Set the field value
* @memberof remotepay.DeviceEventEnum
* @param {remotepay.DeviceErrorEventCode} deviceErrorEventCode 
*/
DeviceEventEnum.prototype.setDeviceErrorEventCode = function(deviceErrorEventCode) {
  this.deviceErrorEventCode = deviceErrorEventCode;
};

/**
* Get the field value
* @memberof remotepay.DeviceEventEnum
* @return {remotepay.DeviceErrorEventCode} 
*/
DeviceEventEnum.prototype.getDeviceErrorEventCode = function() {
  return this.deviceErrorEventCode;
};

/**
* Set the field value
* @memberof remotepay.DeviceEventEnum
* @param {remotepay.DeviceEventState} deviceEventState 
*/
DeviceEventEnum.prototype.setDeviceEventState = function(deviceEventState) {
  this.deviceEventState = deviceEventState;
};

/**
* Get the field value
* @memberof remotepay.DeviceEventEnum
* @return {remotepay.DeviceEventState} 
*/
DeviceEventEnum.prototype.getDeviceEventState = function() {
  return this.deviceEventState;
};

/**
* @memberof remotepay.DeviceEventEnum
* @private
*/
DeviceEventEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DeviceEventEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

DeviceEventEnum._meta_ =  {fields:  {}};
DeviceEventEnum._meta_._class_ =  DeviceEventEnum;
DeviceEventEnum._meta_.fields["deviceErrorEventCode"] = {};
DeviceEventEnum._meta_.fields["deviceErrorEventCode"].type = remotepay_DeviceErrorEventCode;
DeviceEventEnum._meta_.fields["deviceEventState"] = {};
DeviceEventEnum._meta_.fields["deviceEventState"].type = remotepay_DeviceEventState;

//
// Expose the module.
//
if (true) {
module.exports = DeviceEventEnum;
}



/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var DisplayReceiptOptionsRequest = function() {
  this._class_ = DisplayReceiptOptionsRequest;
  this.orderId = undefined;
  this.paymentId = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.DisplayReceiptOptionsRequest
* @param {String} orderId 
*/
DisplayReceiptOptionsRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.DisplayReceiptOptionsRequest
* @return {String} 
*/
DisplayReceiptOptionsRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.DisplayReceiptOptionsRequest
* @param {String} paymentId 
*/
DisplayReceiptOptionsRequest.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.DisplayReceiptOptionsRequest
* @return {String} 
*/
DisplayReceiptOptionsRequest.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* @memberof remotepay.DisplayReceiptOptionsRequest
* @private
*/
DisplayReceiptOptionsRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

DisplayReceiptOptionsRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

DisplayReceiptOptionsRequest._meta_ =  {fields:  {}};
DisplayReceiptOptionsRequest._meta_._class_ =  DisplayReceiptOptionsRequest;
DisplayReceiptOptionsRequest._meta_.fields["orderId"] = {};
DisplayReceiptOptionsRequest._meta_.fields["orderId"].type = String;
DisplayReceiptOptionsRequest._meta_.fields["paymentId"] = {};
DisplayReceiptOptionsRequest._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = DisplayReceiptOptionsRequest;
}



/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ExternalDeviceState = __webpack_require__(36);

/**
* @constructor
* @memberof remotepay
*/
var ExternalDeviceStateEnum = function() {
  this._class_ = ExternalDeviceStateEnum;
  this.state = undefined;
};


/**
* Set the field value
* @memberof remotepay.ExternalDeviceStateEnum
* @param {remotepay.ExternalDeviceState} state 
*/
ExternalDeviceStateEnum.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* @memberof remotepay.ExternalDeviceStateEnum
* @return {remotepay.ExternalDeviceState} 
*/
ExternalDeviceStateEnum.prototype.getState = function() {
  return this.state;
};

/**
* @memberof remotepay.ExternalDeviceStateEnum
* @private
*/
ExternalDeviceStateEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ExternalDeviceStateEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ExternalDeviceStateEnum._meta_ =  {fields:  {}};
ExternalDeviceStateEnum._meta_._class_ =  ExternalDeviceStateEnum;
ExternalDeviceStateEnum._meta_.fields["state"] = {};
ExternalDeviceStateEnum._meta_.fields["state"].type = remotepay_ExternalDeviceState;

//
// Expose the module.
//
if (true) {
module.exports = ExternalDeviceStateEnum;
}



/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


 /**
 *  Interface to the Clover remote-pay API.
 *
 *  Defines the interface used to interact with remote pay
 *  adapters.
 */
/**
* @constructor
* @memberof remotepay
*/
var ICloverConnector = function() {
};


/**
* Send a signature acceptance
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.VerifySignatureRequest} request 
* @return void
*/
ICloverConnector.prototype.acceptSignature = function(request) {
};

/**
* Accepts a payment that has been challenged.
* @memberof remotepay.ICloverConnector
*
* @param {payments.Payment} payment 
* @return void
*/
ICloverConnector.prototype.acceptPayment = function(payment) {
};

/**
* Rejects a payment that has been challenged.
* @memberof remotepay.ICloverConnector
*
* @param {payments.Payment} payment 
* @param {base.Challenge} challenge 
* @return void
*/
ICloverConnector.prototype.rejectPayment = function(payment, challenge) {
};

/**
* Request an authorization operation.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.AuthRequest} authRequest 
* @return void
*/
ICloverConnector.prototype.auth = function(authRequest) {
};

/**
* Request a preauth operation.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.PreAuthRequest} preAuthRequest 
* @return void
*/
ICloverConnector.prototype.preAuth = function(preAuthRequest) {
};

/**
* Request a cancel be sent to the device.
  * @deprecated - use {@link #invokeInputOption(InputOption)}, or {@link #resetDevice()}.  The cancel() functionality is dependant upon the presence of a 'cancel' input option being present on the screen, and the terminology is confusing.  A call to this function sends a 'cancel' button press, but the device may not be in a state where it can respond to the button press.
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.cancel = function() {
};

/**
* Request a preauth be captured.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.CapturePreAuthRequest} capturePreAuthRequest 
* @return void
*/
ICloverConnector.prototype.capturePreAuth = function(capturePreAuthRequest) {
};

/**
* Request a closeout.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.CloseoutRequest} closeoutRequest 
* @return void
*/
ICloverConnector.prototype.closeout = function(closeoutRequest) {
};

/**
* Incompatibility between sdks!  Old cloud had this.
  * Show the customer facing receipt option screen for the specified payment
  *
  * @deprecated - use #displayPaymentReceiptOptions(string orderId, string paymentId)
* @memberof remotepay.ICloverConnector
*
* @param {String} orderId 
* @param {String} paymentId 
* @return void
*/
ICloverConnector.prototype.showPaymentReceiptOptions = function(orderId, paymentId) {
};

/**
* Show the customer facing receipt option screen for the specified payment
* @memberof remotepay.ICloverConnector
*
* @param {String} orderId 
* @param {String} paymentId 
* @return void
*/
ICloverConnector.prototype.displayPaymentReceiptOptions = function(orderId, paymentId) {
};

/**
* Display order information on the screen. Calls to this method will cause the DisplayOrder
  * to show on the clover device. If a DisplayOrder is already showing on the Clover device,
  * it will replace the existing DisplayOrder on the device.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.showDisplayOrder = function(order) {
};

/**
* Removes the Display order information on the screen.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.removeDisplayOrder = function(order) {
};

/**
* Notify device of a discount being added to the order. The discount will then reflect in the displayOrder.
  * Note: This is independent of a discount being added to a display line item.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayDiscount} discount 
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.discountAddedToDisplayOrder = function(discount, order) {
};

/**
* Notify device of a discount being removed to the order. The discount will then reflect in the displayOrder.
  * Note: This is independent of a discount being removed to a display line item.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayDiscount} discount 
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.discountRemovedFromDisplayOrder = function(discount, order) {
};

/**
* Notify device of a line item being added to the order. The line item will then reflect in the displayOrder.
  * Note: This is independent of a line item being added to a display line item.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayLineItem} lineItem 
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.lineItemAddedToDisplayOrder = function(lineItem, order) {
};

/**
* Notify device of a line item being removed to the order. The line item will then reflect in the displayOrder.
  * Note: This is independent of a line item being removed to a display line item.
* @memberof remotepay.ICloverConnector
*
* @param {order.DisplayLineItem} lineItem 
* @param {order.DisplayOrder} order 
* @return void
*/
ICloverConnector.prototype.lineItemRemovedFromDisplayOrder = function(lineItem, order) {
};

/**
* Destroy the connector.  After this is called, the connection to the device is severed, and this object is
  * no longer usable
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.dispose = function() {
};

/**
* Send a keystroke to the device.  When in non secure displays are on the device, this can be used to
  * act in the role of the user to 'press' available keys.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.InputOption} io 
* @return void
*/
ICloverConnector.prototype.invokeInputOption = function(io) {
};

/**
* Do a refund to a card.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.ManualRefundRequest} request 
* @return void
*/
ICloverConnector.prototype.manualRefund = function(request) {
};

/**
* Do a refund on a previously made payment.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.RefundPaymentRequest} request 
* @return void
*/
ICloverConnector.prototype.refundPayment = function(request) {
};

/**
* Open the first cash drawer that is found connected to the clover device.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.OpenCashDrawerRequest} request 
* @return void
*/
ICloverConnector.prototype.openCashDrawer = function(request) {
};

/**
* Print the passed image. bitmap is a language specific object that represents an image.
  * @deprecated - use {@link #printImageFromURL()}.  This functionality is severely limited because of transport limitations.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.Img} bitmap 
* @return void
*/
ICloverConnector.prototype.printImage = function(bitmap) {
};

/**
* Print an image on the clover device that is found at the passed url.
* @memberof remotepay.ICloverConnector
*
* @param {String} imgUrl 
* @return void
*/
ICloverConnector.prototype.printImageFromURL = function(imgUrl) {
};

/**
* Print text on the clover device printer.
* @memberof remotepay.ICloverConnector
*
* @param {Array.<String>} messages An array of 
* @return void
*/
ICloverConnector.prototype.printText = function(messages) {
};

/**
* Print text or an image on the clover device printer.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.PrintRequest} request 
* @return void
*/
ICloverConnector.prototype.print = function(request) {
};

/**
* Reject a signature
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.VerifySignatureRequest} request 
* @return void
*/
ICloverConnector.prototype.rejectSignature = function(request) {
};

/**
* Send a message to the device to reset back to the welcome screen.  Can be used when the device is in
  * an unknown state. Will trigger an onResetDevice callback
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.resetDevice = function() {
};

/**
* Begin a sale transaction.
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.SaleRequest} request 
* @return void
*/
ICloverConnector.prototype.sale = function(request) {
};

/**
* Show a text message on the device.
* @memberof remotepay.ICloverConnector
*
* @param {String} message 
* @return void
*/
ICloverConnector.prototype.showMessage = function(message) {
};

/**
* Show the thank you display on the device.
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.showThankYouScreen = function() {
};

/**
* Show the welcome display on the device.
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.showWelcomeScreen = function() {
};

/**
* Tip adjust an existing auth
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.TipAdjustAuthRequest} request 
* @return void
*/
ICloverConnector.prototype.tipAdjustAuth = function(request) {
};

/**
* Vault a card using optional cardEntryMethods
* @memberof remotepay.ICloverConnector
*
* @param {Number} cardEntryMethods must be an integer
* @return void
*/
ICloverConnector.prototype.vaultCard = function(cardEntryMethods) {
};

/**
* Void a payment
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.VoidPaymentRequest} request 
* @return void
*/
ICloverConnector.prototype.voidPayment = function(request) {
};

/**
* Starts communication with the device.  This is called after the connector is created and listeners are added to the connector.
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.initializeConnection = function() {
};

/**
* Used to request a list of pending payments that have been taken offline, but
  * haven't processed yet. will trigger an onRetrievePendingPaymentsResponse callback
* @memberof remotepay.ICloverConnector
*
* @return void
*/
ICloverConnector.prototype.retrievePendingPayments = function() {
};

/**
* Sends a request to read card information and call back with the information collected.
  * @see ICloverConnectorListener.onReadCardDataResponse(ReadCardDataResponse)
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.ReadCardDataRequest} request 
* @return void
*/
ICloverConnector.prototype.readCardData = function(request) {
};

/**
* @param request a message that is sent to an existing running custom activity
  * @see ICloverConnectorListener.onMessageFromActivity(MessageFromActivity)
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.MessageToActivity} request 
* @return void
*/
ICloverConnector.prototype.sendMessageToActivity = function(request) {
};

/**
*  Start a custom activity on a device
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.CustomActivityRequest} request 
* @return void
*/
ICloverConnector.prototype.startCustomActivity = function(request) {
};

/**
* retrieve the status of the device, and conditionally re-send the last message
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.RetrieveDeviceStatusRequest} request 
* @return {Null} 
*/
ICloverConnector.prototype.retrieveDeviceStatus = function(request) {
  return null;
};

/**
* Sends a request to get a payment.  Only valid for payments made in the past 24 hours on the device queried
  * @see ICloverConnectorListener.onRetrievePaymentResponse(RetrievePaymentResponse)
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.RetrievePaymentRequest} request 
* @return void
*/
ICloverConnector.prototype.retrievePayment = function(request) {
};

/**
* Sends a request to get printers attached to the device.
  * @see ICloverConnectorListener.onRetrievePrintersResponse(RetrievePrintersResponse)
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.RetrievePrintersRequest} request 
* @return void
*/
ICloverConnector.prototype.retrievePrinters = function(request) {
};

/**
* Sends a request to get the current status of a print job.
  * @see ICloverConnectorListener.onPrintJobStatusResponse(PrintJobStatusResponse)
* @memberof remotepay.ICloverConnector
*
* @param {remotepay.PrintJobStatusRequest} request 
* @return void
*/
ICloverConnector.prototype.retrievePrintJobStatus = function(request) {
};


//
// Expose the module.
//
if (true) {
module.exports = ICloverConnector;
}



/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


 /**
 *  Interface to the Clover remote-pay API.
 *
 *  Defines the interface used to interact with remote pay
 *  adapters.
 */
/**
* @constructor
* @memberof remotepay
*/
var ICloverConnectorListener = function() {
};


/**
* Called when the device disconnects
  * @deprecated - use {@link #onDeviceDisconnected()}
* @memberof remotepay.ICloverConnectorListener
*
* @return void
*/
ICloverConnectorListener.prototype.onDisconnected = function() {
};

/**
* Called when the device disconnects
* @memberof remotepay.ICloverConnectorListener
*
* @return void
*/
ICloverConnectorListener.prototype.onDeviceDisconnected = function() {
};

/**
* Called when the device connects
  * @deprecated - use {@link #onDeviceConnected()}
* @memberof remotepay.ICloverConnectorListener
*
* @return void
*/
ICloverConnectorListener.prototype.onConnected = function() {
};

/**
* Called when the device connects
* @memberof remotepay.ICloverConnectorListener
*
* @return void
*/
ICloverConnectorListener.prototype.onDeviceConnected = function() {
};

/**
* Called when the device is ready to respond to requests.
  * @deprecated - use {@link #onDeviceReady()}
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.MerchantInfo} merchantInfo 
* @return void
*/
ICloverConnectorListener.prototype.onReady = function(merchantInfo) {
};

/**
* Called when the device is ready to respond to requests.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.MerchantInfo} merchantInfo 
* @return void
*/
ICloverConnectorListener.prototype.onDeviceReady = function(merchantInfo) {
};

/**
* Will be called when a screen or activity changes on the Mini. The CloverDeviceEvent passed in will contain
  * an event type, a description and a list of available InputOptions.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CloverDeviceEvent} deviceEvent 
* @return void
*/
ICloverConnectorListener.prototype.onDeviceActivityStart = function(deviceEvent) {
};

/**
* Will be called when leaving a screen or activity on the Mini. The CloverDeviceEvent passed in will contain an event type and description. Note: The Start and End events are not guaranteed to process in order, so the event type should be used to make sure the start and end events are paired.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CloverDeviceEvent} deviceEvent 
* @return void
*/
ICloverConnectorListener.prototype.onDeviceActivityEnd = function(deviceEvent) {
};

/**
* Will be called when an error occurs when trying to send messages to the device
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CloverDeviceErrorEvent} deviceErrorEvent 
* @return void
*/
ICloverConnectorListener.prototype.onDeviceError = function(deviceErrorEvent) {
};

/**
* Will be called, one or more times, at the completion of an auth transaction request, with the same results as a SaleResponse. Note: An auth transaction may come back as a final sale, depending on the payment gateway. The AuthResponse has a boolean isAuth to determine if it can still be tip adjusted.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.AuthResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onAuthResponse = function(response) {
};

/**
* Will be called after a tip adjust request and contains the tipAmount if successful
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.TipAdjustAuthResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onTipAdjustAuthResponse = function(response) {
};

/**
* Will be called after a capture pre-auth request and contains the new Amount and TipAmount if successful
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CapturePreAuthResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onCapturePreAuthResponse = function(response) {
};

/**
* Will be called, passing in the Payment and Signature, if the user provides an on-screen signature, that needs to be accepted or rejected for a payment.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.VerifySignatureRequest} request 
* @return void
*/
ICloverConnectorListener.prototype.onVerifySignatureRequest = function(request) {
};

/**
* Will be called, passing in the Payment, if some type of confirmation is required to accept a payment.  To accept and continue, CloverConnector.acceptPayment should be called, passing in the payment from the request.  To reject the payment, CloverConnector.rejectpayment should be called, passing in one of the VoidReason objects from the corresponding Challenge in the ConfirmPaymentRequest.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.ConfirmPaymentRequest} request 
* @return void
*/
ICloverConnectorListener.prototype.onConfirmPaymentRequest = function(request) {
};

/**
* Can get called multiple times at various stages. The Reason will contain information about what was successful or what failed.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CloseoutResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onCloseoutResponse = function(response) {
};

/**
* Will be called, one or more times, at the completion of a sale transaction request, with either a SUCCESS or CANCEL code. A SUCCESS will also have the payment object. The payment object can be the full amount or partial amount of the sale request. Note: A sale transaction my come back as a tip adjustable auth, depending on the payment gateway. The SaleResponse has a boolean isSale to determine if it is final or will be finalized during closeout.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.SaleResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onSaleResponse = function(response) {
};

/**
* Will be called at the completion of a manual refund request, with either a SUCCESS or CANCEL code. If successful, the ManualRefundResponse will have a Credit object associated with the relevant payment information.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.ManualRefundResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onManualRefundResponse = function(response) {
};

/**
* Will be called after a refund payment request and contains the Refund if successful. The Refund contains the original paymentId as reference
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.RefundPaymentResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onRefundPaymentResponse = function(response) {
};

/**
* Will be called when a tip is added on the device screen
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.TipAdded} tipAdded 
* @return void
*/
ICloverConnectorListener.prototype.onTipAdded = function(tipAdded) {
};

/**
* Will be called after a void payment request and contains the voided paymentId
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.VoidPaymentResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onVoidPaymentResponse = function(response) {
};

/**
* will be called at the completion of a vault card request, with either a SUCCESS or CANCEL code. If successful, the response will contain a payment with a token value unique for the card and merchant that can be used for future Sale or Auth requests.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.VaultCardResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onVaultCardResponse = function(response) {
};

/**
* Will be called, one or more times, at the complete of a pre-auth transaction request, with
  * the same results as a SaleResponse. Note: The isPreAuth boolean on the PreAuthResponse verifies
  * if CapturePreAuth can be called for the returned payment.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.PreAuthResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onPreAuthResponse = function(response) {
};

/**
* Called in response to a retrievePendingPayment(...) request.
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.RetrievePendingPaymentsResponse} retrievePendingPaymentResponse 
* @return void
*/
ICloverConnectorListener.prototype.onRetrievePendingPaymentsResponse = function(retrievePendingPaymentResponse) {
};

/**
* Called in response to a readCardData(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.ReadCardDataResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onReadCardDataResponse = function(response) {
};

/**
* Called when a message is sent from a custom activity
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.MessageFromActivity} message 
* @return void
*/
ICloverConnectorListener.prototype.onMessageFromActivity = function(message) {
};

/**
* Called in response to a customactivity(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.CustomActivityResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onCustomActivityResponse = function(response) {
};

/**
* Called in response to a RetrieveDeviceState request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.RetrieveDeviceStatusResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onRetrieveDeviceStatusResponse = function(response) {
};

/**
* Called in response to a resetDevice(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.ResetDeviceResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onResetDeviceResponse = function(response) {
};

/**
* Called in response to a retrievePayment(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.RetrievePaymentResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onRetrievePaymentResponse = function(response) {
};

/**
* Called in response to a retrievePrinters(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.RetrievePrintersResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onRetrievePrintersResponse = function(response) {
};

/**
* Called in response to a retrievePrintJobStatus(...) request
* @memberof remotepay.ICloverConnectorListener
*
* @param {remotepay.PrintJobStatusResponse} response 
* @return void
*/
ICloverConnectorListener.prototype.onPrintJobStatusResponse = function(response) {
};


//
// Expose the module.
//
if (true) {
module.exports = ICloverConnectorListener;
}



/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_KeyPress = __webpack_require__(72);

/**
* @constructor
* @memberof remotepay
*/
var KeyPressEnum = function() {
  this._class_ = KeyPressEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotepay.KeyPressEnum
* @param {remotepay.KeyPress} status 
*/
KeyPressEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotepay.KeyPressEnum
* @return {remotepay.KeyPress} 
*/
KeyPressEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotepay.KeyPressEnum
* @private
*/
KeyPressEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

KeyPressEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

KeyPressEnum._meta_ =  {fields:  {}};
KeyPressEnum._meta_._class_ =  KeyPressEnum;
KeyPressEnum._meta_.fields["status"] = {};
KeyPressEnum._meta_.fields["status"].type = remotepay_KeyPress;

//
// Expose the module.
//
if (true) {
module.exports = KeyPressEnum;
}



/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_TransactionType = __webpack_require__(12);
var remotepay_TransactionRequest = __webpack_require__(22);

/**
* @constructor
* @augments remotepay.TransactionRequest
* @memberof remotepay
*/
var ManualRefundRequest = function() {
  remotepay_TransactionRequest.call(this);
  this._superClass_ = remotepay_TransactionRequest;
  this._class_ = ManualRefundRequest;
  this.setType(remotepay_TransactionType["CREDIT"]);
};

ManualRefundRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
ManualRefundRequest.prototype.constructor = ManualRefundRequest;

ManualRefundRequest._meta_ =  {fields:  {}};
ManualRefundRequest._meta_._class_ =  ManualRefundRequest;
ManualRefundRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;

//
// Expose the module.
//
if (true) {
module.exports = ManualRefundRequest;
}



/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);
var payments_Credit = __webpack_require__(16);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var ManualRefundResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = ManualRefundResponse;
  this.credit = undefined;
};

ManualRefundResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
ManualRefundResponse.prototype.constructor = ManualRefundResponse;

/**
* Set the field value
* The credit that resulted from the request
*
* @memberof remotepay.ManualRefundResponse
* @param {payments.Credit} credit 
*/
ManualRefundResponse.prototype.setCredit = function(credit) {
  this.credit = credit;
};

/**
* Get the field value
* The credit that resulted from the request
* @memberof remotepay.ManualRefundResponse
* @return {payments.Credit} 
*/
ManualRefundResponse.prototype.getCredit = function() {
  return this.credit;
};

ManualRefundResponse._meta_ =  {fields:  {}};
ManualRefundResponse._meta_._class_ =  ManualRefundResponse;
ManualRefundResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
ManualRefundResponse._meta_.fields["credit"] = {};
ManualRefundResponse._meta_.fields["credit"].type = payments_Credit;

//
// Expose the module.
//
if (true) {
module.exports = ManualRefundResponse;
}



/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_DeviceInfo = __webpack_require__(157);

/**
* @constructor
* @memberof remotepay
*/
var MerchantInfo = function() {
  this._class_ = MerchantInfo;
  this.merchantID = undefined;
  this.merchantMID = undefined;
  this.merchantName = undefined;
  this.supportsAuths = true;
  this.supportsPreAuths = true;
  this.supportsSales = true;
  this.supportsVaultCards = true;
  this.supportsManualRefunds = true;
  this.supportsTipAdjust = true;
  this.deviceInfo = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.MerchantInfo
* @param {String} merchantID 
*/
MerchantInfo.prototype.setMerchantID = function(merchantID) {
  this.merchantID = merchantID;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.MerchantInfo
* @return {String} 
*/
MerchantInfo.prototype.getMerchantID = function() {
  return this.merchantID;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {String} merchantMID 
*/
MerchantInfo.prototype.setMerchantMID = function(merchantMID) {
  this.merchantMID = merchantMID;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {String} 
*/
MerchantInfo.prototype.getMerchantMID = function() {
  return this.merchantMID;
};

/**
* Set the field value
* Name of the merchant
*
* @memberof remotepay.MerchantInfo
* @param {String} merchantName 
*/
MerchantInfo.prototype.setMerchantName = function(merchantName) {
  this.merchantName = merchantName;
};

/**
* Get the field value
* Name of the merchant
* @memberof remotepay.MerchantInfo
* @return {String} 
*/
MerchantInfo.prototype.getMerchantName = function() {
  return this.merchantName;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsAuths 
*/
MerchantInfo.prototype.setSupportsAuths = function(supportsAuths) {
  this.supportsAuths = supportsAuths;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsAuths = function() {
  return this.supportsAuths;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsPreAuths 
*/
MerchantInfo.prototype.setSupportsPreAuths = function(supportsPreAuths) {
  this.supportsPreAuths = supportsPreAuths;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsPreAuths = function() {
  return this.supportsPreAuths;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsSales 
*/
MerchantInfo.prototype.setSupportsSales = function(supportsSales) {
  this.supportsSales = supportsSales;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsSales = function() {
  return this.supportsSales;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsVaultCards 
*/
MerchantInfo.prototype.setSupportsVaultCards = function(supportsVaultCards) {
  this.supportsVaultCards = supportsVaultCards;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsVaultCards = function() {
  return this.supportsVaultCards;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsManualRefunds 
*/
MerchantInfo.prototype.setSupportsManualRefunds = function(supportsManualRefunds) {
  this.supportsManualRefunds = supportsManualRefunds;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsManualRefunds = function() {
  return this.supportsManualRefunds;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {Boolean} supportsTipAdjust 
*/
MerchantInfo.prototype.setSupportsTipAdjust = function(supportsTipAdjust) {
  this.supportsTipAdjust = supportsTipAdjust;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {Boolean} 
*/
MerchantInfo.prototype.getSupportsTipAdjust = function() {
  return this.supportsTipAdjust;
};

/**
* Set the field value
* @memberof remotepay.MerchantInfo
* @param {remotepay.DeviceInfo} deviceInfo 
*/
MerchantInfo.prototype.setDeviceInfo = function(deviceInfo) {
  this.deviceInfo = deviceInfo;
};

/**
* Get the field value
* @memberof remotepay.MerchantInfo
* @return {remotepay.DeviceInfo} 
*/
MerchantInfo.prototype.getDeviceInfo = function() {
  return this.deviceInfo;
};

/**
* @memberof remotepay.MerchantInfo
* @private
*/
MerchantInfo.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

MerchantInfo.prototype.toString = function() {
  return JSON.stringify(this);
};

MerchantInfo._meta_ =  {fields:  {}};
MerchantInfo._meta_._class_ =  MerchantInfo;
MerchantInfo._meta_.fields["merchantID"] = {};
MerchantInfo._meta_.fields["merchantID"].type = String;
MerchantInfo._meta_.fields["merchantMID"] = {};
MerchantInfo._meta_.fields["merchantMID"].type = String;
MerchantInfo._meta_.fields["merchantName"] = {};
MerchantInfo._meta_.fields["merchantName"].type = String;
MerchantInfo._meta_.fields["supportsAuths"] = {};
MerchantInfo._meta_.fields["supportsAuths"].type = Boolean;
MerchantInfo._meta_.fields["supportsPreAuths"] = {};
MerchantInfo._meta_.fields["supportsPreAuths"].type = Boolean;
MerchantInfo._meta_.fields["supportsSales"] = {};
MerchantInfo._meta_.fields["supportsSales"].type = Boolean;
MerchantInfo._meta_.fields["supportsVaultCards"] = {};
MerchantInfo._meta_.fields["supportsVaultCards"].type = Boolean;
MerchantInfo._meta_.fields["supportsManualRefunds"] = {};
MerchantInfo._meta_.fields["supportsManualRefunds"].type = Boolean;
MerchantInfo._meta_.fields["supportsTipAdjust"] = {};
MerchantInfo._meta_.fields["supportsTipAdjust"].type = Boolean;
MerchantInfo._meta_.fields["deviceInfo"] = {};
MerchantInfo._meta_.fields["deviceInfo"].type = remotepay_DeviceInfo;

//
// Expose the module.
//
if (true) {
module.exports = MerchantInfo;
}



/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ActivityMessage = __webpack_require__(68);

/** A message sent to custom activities */
/**
* @constructor
* @augments remotepay.ActivityMessage
* @memberof remotepay
*/
var MessageFromActivity = function() {
  remotepay_ActivityMessage.call(this);
  this._superClass_ = remotepay_ActivityMessage;
  this._class_ = MessageFromActivity;
};

MessageFromActivity.prototype = Object.create(remotepay_ActivityMessage.prototype);
MessageFromActivity.prototype.constructor = MessageFromActivity;

MessageFromActivity._meta_ =  {fields:  {}};
MessageFromActivity._meta_._class_ =  MessageFromActivity;
MessageFromActivity._meta_._superMeta_ = remotepay_ActivityMessage._meta_;

//
// Expose the module.
//
if (true) {
module.exports = MessageFromActivity;
}



/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ActivityMessage = __webpack_require__(68);

/** A message sent to custom activities */
/**
* @constructor
* @augments remotepay.ActivityMessage
* @memberof remotepay
*/
var MessageToActivity = function() {
  remotepay_ActivityMessage.call(this);
  this._superClass_ = remotepay_ActivityMessage;
  this._class_ = MessageToActivity;
};

MessageToActivity.prototype = Object.create(remotepay_ActivityMessage.prototype);
MessageToActivity.prototype.constructor = MessageToActivity;

MessageToActivity._meta_ =  {fields:  {}};
MessageToActivity._meta_._class_ =  MessageToActivity;
MessageToActivity._meta_._superMeta_ = remotepay_ActivityMessage._meta_;

//
// Expose the module.
//
if (true) {
module.exports = MessageToActivity;
}



/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Request to open the cash drawer. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var OpenCashDrawerRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = OpenCashDrawerRequest;
  this.reason = undefined;
  this.deviceId = undefined;
};

OpenCashDrawerRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
OpenCashDrawerRequest.prototype.constructor = OpenCashDrawerRequest;

/**
* Set the field value
* Why the drawer is being opened.
*
* @memberof remotepay.OpenCashDrawerRequest
* @param {String} reason 
*/
OpenCashDrawerRequest.prototype.setReason = function(reason) {
  this.reason = reason;
};

/**
* Get the field value
* Why the drawer is being opened.
* @memberof remotepay.OpenCashDrawerRequest
* @return {String} 
*/
OpenCashDrawerRequest.prototype.getReason = function() {
  return this.reason;
};

/**
* Set the field value
* The ID of the drawer or attached printer.
*
* @memberof remotepay.OpenCashDrawerRequest
* @param {String|Null} deviceId 
*/
OpenCashDrawerRequest.prototype.setDeviceId = function(deviceId) {
  this.deviceId = deviceId;
};

/**
* Get the field value
* The ID of the drawer or attached printer.
* @memberof remotepay.OpenCashDrawerRequest
* @return {String|Null} 
*/
OpenCashDrawerRequest.prototype.getDeviceId = function() {
  return this.deviceId;
};

OpenCashDrawerRequest._meta_ =  {fields:  {}};
OpenCashDrawerRequest._meta_._class_ =  OpenCashDrawerRequest;
OpenCashDrawerRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
OpenCashDrawerRequest._meta_.fields["reason"] = {};
OpenCashDrawerRequest._meta_.fields["reason"].type = String;
OpenCashDrawerRequest._meta_.fields["deviceId"] = {};
OpenCashDrawerRequest._meta_.fields["deviceId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = OpenCashDrawerRequest;
}



/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_TransactionType = __webpack_require__(12);
var remotepay_TransactionRequest = __webpack_require__(22);

/**
* @constructor
* @augments remotepay.TransactionRequest
* @memberof remotepay
*/
var PreAuthRequest = function() {
  remotepay_TransactionRequest.call(this);
  this._superClass_ = remotepay_TransactionRequest;
  this._class_ = PreAuthRequest;
  this.setType(remotepay_TransactionType["AUTH"]);
};

PreAuthRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
PreAuthRequest.prototype.constructor = PreAuthRequest;

PreAuthRequest._meta_ =  {fields:  {}};
PreAuthRequest._meta_._class_ =  PreAuthRequest;
PreAuthRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;

//
// Expose the module.
//
if (true) {
module.exports = PreAuthRequest;
}



/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_PaymentResponse = __webpack_require__(35);

/**
* @constructor
* @augments remotepay.PaymentResponse
* @memberof remotepay
*/
var PreAuthResponse = function() {
  remotepay_PaymentResponse.call(this);
  this._superClass_ = remotepay_PaymentResponse;
  this._class_ = PreAuthResponse;
};

PreAuthResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
PreAuthResponse.prototype.constructor = PreAuthResponse;

PreAuthResponse._meta_ =  {fields:  {}};
PreAuthResponse._meta_._class_ =  PreAuthResponse;
PreAuthResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

//
// Expose the module.
//
if (true) {
module.exports = PreAuthResponse;
}



/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Request to get the status of a print job. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var PrintJobStatusRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = PrintJobStatusRequest;
  this.printRequestId = undefined;
};

PrintJobStatusRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
PrintJobStatusRequest.prototype.constructor = PrintJobStatusRequest;

/**
* Set the field value
* The ID of the print job
*
* @memberof remotepay.PrintJobStatusRequest
* @param {String} printRequestId 
*/
PrintJobStatusRequest.prototype.setPrintRequestId = function(printRequestId) {
  this.printRequestId = printRequestId;
};

/**
* Get the field value
* The ID of the print job
* @memberof remotepay.PrintJobStatusRequest
* @return {String} 
*/
PrintJobStatusRequest.prototype.getPrintRequestId = function() {
  return this.printRequestId;
};

PrintJobStatusRequest._meta_ =  {fields:  {}};
PrintJobStatusRequest._meta_._class_ =  PrintJobStatusRequest;
PrintJobStatusRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
PrintJobStatusRequest._meta_.fields["printRequestId"] = {};
PrintJobStatusRequest._meta_.fields["printRequestId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PrintJobStatusRequest;
}



/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var printer_PrintJobStatus = __webpack_require__(64);
var remotepay_BaseResponse = __webpack_require__(5);

/** contains the status of the requested print job */
/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var PrintJobStatusResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = PrintJobStatusResponse;
  this.status = undefined;
  this.printRequestId = undefined;
};

PrintJobStatusResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
PrintJobStatusResponse.prototype.constructor = PrintJobStatusResponse;

/**
* Set the field value
* The current status of the requested print job
*
* @memberof remotepay.PrintJobStatusResponse
* @param {printer.PrintJobStatus} status 
*/
PrintJobStatusResponse.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* The current status of the requested print job
* @memberof remotepay.PrintJobStatusResponse
* @return {printer.PrintJobStatus} 
*/
PrintJobStatusResponse.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The ID of the print job
*
* @memberof remotepay.PrintJobStatusResponse
* @param {String} printRequestId 
*/
PrintJobStatusResponse.prototype.setPrintRequestId = function(printRequestId) {
  this.printRequestId = printRequestId;
};

/**
* Get the field value
* The ID of the print job
* @memberof remotepay.PrintJobStatusResponse
* @return {String} 
*/
PrintJobStatusResponse.prototype.getPrintRequestId = function() {
  return this.printRequestId;
};

PrintJobStatusResponse._meta_ =  {fields:  {}};
PrintJobStatusResponse._meta_._class_ =  PrintJobStatusResponse;
PrintJobStatusResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
PrintJobStatusResponse._meta_.fields["status"] = {};
PrintJobStatusResponse._meta_.fields["status"].type = printer_PrintJobStatus;
PrintJobStatusResponse._meta_.fields["printRequestId"] = {};
PrintJobStatusResponse._meta_.fields["printRequestId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PrintJobStatusResponse;
}



/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);
var remotepay_Img = __webpack_require__(159);

/** Request to print an image, text, or an image from a URL. Current intention is to only have one. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var PrintRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = PrintRequest;
  this.image = undefined;
  this.text = undefined;
  this.imageUrl = undefined;
  this.printRequestId = undefined;
  this.printDeviceId = undefined;
};

PrintRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
PrintRequest.prototype.constructor = PrintRequest;

/**
* Set the field value
* The image to be printed (put in an array for future extensibility).
*
* @memberof remotepay.PrintRequest
* @param {Array.<remotepay.Img>} image An array of 
*/
PrintRequest.prototype.setImage = function(image) {
  this.image = image;
};

/**
* Get the field value
* The image to be printed (put in an array for future extensibility).
* @memberof remotepay.PrintRequest
* @return {Array.<remotepay.Img>} An array of 
*/
PrintRequest.prototype.getImage = function() {
  return this.image;
};

/**
* Set the field value
* The text to be printed.
*
* @memberof remotepay.PrintRequest
* @param {Array.<String>} text An array of 
*/
PrintRequest.prototype.setText = function(text) {
  this.text = text;
};

/**
* Get the field value
* The text to be printed.
* @memberof remotepay.PrintRequest
* @return {Array.<String>} An array of 
*/
PrintRequest.prototype.getText = function() {
  return this.text;
};

/**
* Set the field value
* The image URLs to be printed (put in an array for future extensibility).
*
* @memberof remotepay.PrintRequest
* @param {Array.<String>} imageUrl An array of 
*/
PrintRequest.prototype.setImageUrl = function(imageUrl) {
  this.imageUrl = imageUrl;
};

/**
* Get the field value
* The image URLs to be printed (put in an array for future extensibility).
* @memberof remotepay.PrintRequest
* @return {Array.<String>} An array of 
*/
PrintRequest.prototype.getImageUrl = function() {
  return this.imageUrl;
};

/**
* Set the field value
* The ID associated with the request (for Status checks and similar use).
*
* @memberof remotepay.PrintRequest
* @param {String|Null} printRequestId 
*/
PrintRequest.prototype.setPrintRequestId = function(printRequestId) {
  this.printRequestId = printRequestId;
};

/**
* Get the field value
* The ID associated with the request (for Status checks and similar use).
* @memberof remotepay.PrintRequest
* @return {String|Null} 
*/
PrintRequest.prototype.getPrintRequestId = function() {
  return this.printRequestId;
};

/**
* Set the field value
* The ID of the device the print job should print from.
*
* @memberof remotepay.PrintRequest
* @param {String|Null} printDeviceId 
*/
PrintRequest.prototype.setPrintDeviceId = function(printDeviceId) {
  this.printDeviceId = printDeviceId;
};

/**
* Get the field value
* The ID of the device the print job should print from.
* @memberof remotepay.PrintRequest
* @return {String|Null} 
*/
PrintRequest.prototype.getPrintDeviceId = function() {
  return this.printDeviceId;
};

PrintRequest._meta_ =  {fields:  {}};
PrintRequest._meta_._class_ =  PrintRequest;
PrintRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
PrintRequest._meta_.fields["image"] = {};
PrintRequest._meta_.fields["image"].type = Array;
PrintRequest._meta_.fields["image"].elementType = remotepay_Img;
PrintRequest._meta_.fields["text"] = {};
PrintRequest._meta_.fields["text"].type = Array;
PrintRequest._meta_.fields["imageUrl"] = {};
PrintRequest._meta_.fields["imageUrl"].type = Array;
PrintRequest._meta_.fields["printRequestId"] = {};
PrintRequest._meta_.fields["printRequestId"].type = String;
PrintRequest._meta_.fields["printDeviceId"] = {};
PrintRequest._meta_.fields["printDeviceId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = PrintRequest;
}



/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_QueryStatus = __webpack_require__(73);

/**
* @constructor
* @memberof remotepay
*/
var QueryStatusEnum = function() {
  this._class_ = QueryStatusEnum;
  this.queryStatus = undefined;
};


/**
* Set the field value
* @memberof remotepay.QueryStatusEnum
* @param {remotepay.QueryStatus} queryStatus 
*/
QueryStatusEnum.prototype.setQueryStatus = function(queryStatus) {
  this.queryStatus = queryStatus;
};

/**
* Get the field value
* @memberof remotepay.QueryStatusEnum
* @return {remotepay.QueryStatus} 
*/
QueryStatusEnum.prototype.getQueryStatus = function() {
  return this.queryStatus;
};

/**
* @memberof remotepay.QueryStatusEnum
* @private
*/
QueryStatusEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

QueryStatusEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

QueryStatusEnum._meta_ =  {fields:  {}};
QueryStatusEnum._meta_._class_ =  QueryStatusEnum;
QueryStatusEnum._meta_.fields["queryStatus"] = {};
QueryStatusEnum._meta_.fields["queryStatus"].type = remotepay_QueryStatus;

//
// Expose the module.
//
if (true) {
module.exports = QueryStatusEnum;
}



/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var ReadCardDataRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = ReadCardDataRequest;
  this.isForceSwipePinEntry = undefined;
  this.cardEntryMethods = undefined;
};

ReadCardDataRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
ReadCardDataRequest.prototype.constructor = ReadCardDataRequest;

/**
* Set the field value
* If true, then if the card is swiped, a pin entry must be done.
*
* @memberof remotepay.ReadCardDataRequest
* @param {Boolean} isForceSwipePinEntry 
*/
ReadCardDataRequest.prototype.setIsForceSwipePinEntry = function(isForceSwipePinEntry) {
  this.isForceSwipePinEntry = isForceSwipePinEntry;
};

/**
* Get the field value
* If true, then if the card is swiped, a pin entry must be done.
* @memberof remotepay.ReadCardDataRequest
* @return {Boolean} 
*/
ReadCardDataRequest.prototype.getIsForceSwipePinEntry = function() {
  return this.isForceSwipePinEntry;
};

/**
* Set the field value
* The bit mask of allowable card read types.
*
* @memberof remotepay.ReadCardDataRequest
* @param {Number} cardEntryMethods must be an integer
*/
ReadCardDataRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* The bit mask of allowable card read types.
* @memberof remotepay.ReadCardDataRequest
* @return {Number} must be an integer
*/
ReadCardDataRequest.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

ReadCardDataRequest._meta_ =  {fields:  {}};
ReadCardDataRequest._meta_._class_ =  ReadCardDataRequest;
ReadCardDataRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
ReadCardDataRequest._meta_.fields["isForceSwipePinEntry"] = {};
ReadCardDataRequest._meta_.fields["isForceSwipePinEntry"].type = Boolean;
ReadCardDataRequest._meta_.fields["cardEntryMethods"] = {};
ReadCardDataRequest._meta_.fields["cardEntryMethods"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = ReadCardDataRequest;
}



/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_CardData = __webpack_require__(39);
var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var ReadCardDataResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = ReadCardDataResponse;
  this.cardData = undefined;
};

ReadCardDataResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
ReadCardDataResponse.prototype.constructor = ReadCardDataResponse;

/**
* Set the field value
* The data for the card
*
* @memberof remotepay.ReadCardDataResponse
* @param {base.CardData} cardData 
*/
ReadCardDataResponse.prototype.setCardData = function(cardData) {
  this.cardData = cardData;
};

/**
* Get the field value
* The data for the card
* @memberof remotepay.ReadCardDataResponse
* @return {base.CardData} 
*/
ReadCardDataResponse.prototype.getCardData = function() {
  return this.cardData;
};

ReadCardDataResponse._meta_ =  {fields:  {}};
ReadCardDataResponse._meta_._class_ =  ReadCardDataResponse;
ReadCardDataResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
ReadCardDataResponse._meta_.fields["cardData"] = {};
ReadCardDataResponse._meta_.fields["cardData"].type = base_CardData;

//
// Expose the module.
//
if (true) {
module.exports = ReadCardDataResponse;
}



/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var RefundPaymentRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = RefundPaymentRequest;
  this.fullRefund = undefined;
  this.amount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
};

RefundPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
RefundPaymentRequest.prototype.constructor = RefundPaymentRequest;

/**
* Set the field value
* If true, then it is a full refund.  The amount will be ignored.
*
* @memberof remotepay.RefundPaymentRequest
* @param {Boolean} fullRefund 
*/
RefundPaymentRequest.prototype.setFullRefund = function(fullRefund) {
  this.fullRefund = fullRefund;
};

/**
* Get the field value
* If true, then it is a full refund.  The amount will be ignored.
* @memberof remotepay.RefundPaymentRequest
* @return {Boolean} 
*/
RefundPaymentRequest.prototype.getFullRefund = function() {
  return this.fullRefund;
};

/**
* Set the field value
* Amount to be refunded
*
* @memberof remotepay.RefundPaymentRequest
* @param {Number|Null} amount must be a long integer, 
*/
RefundPaymentRequest.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Amount to be refunded
* @memberof remotepay.RefundPaymentRequest
* @return {Number|Null} must be a long integer, 
*/
RefundPaymentRequest.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.RefundPaymentRequest
* @param {String} orderId 
*/
RefundPaymentRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.RefundPaymentRequest
* @return {String} 
*/
RefundPaymentRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.RefundPaymentRequest
* @param {String} paymentId 
*/
RefundPaymentRequest.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.RefundPaymentRequest
* @return {String} 
*/
RefundPaymentRequest.prototype.getPaymentId = function() {
  return this.paymentId;
};

RefundPaymentRequest._meta_ =  {fields:  {}};
RefundPaymentRequest._meta_._class_ =  RefundPaymentRequest;
RefundPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
RefundPaymentRequest._meta_.fields["fullRefund"] = {};
RefundPaymentRequest._meta_.fields["fullRefund"].type = Boolean;
RefundPaymentRequest._meta_.fields["amount"] = {};
RefundPaymentRequest._meta_.fields["amount"].type = Number;
RefundPaymentRequest._meta_.fields["orderId"] = {};
RefundPaymentRequest._meta_.fields["orderId"].type = String;
RefundPaymentRequest._meta_.fields["paymentId"] = {};
RefundPaymentRequest._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RefundPaymentRequest;
}



/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);
var payments_Refund = __webpack_require__(10);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var RefundPaymentResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = RefundPaymentResponse;
  this.orderId = undefined;
  this.paymentId = undefined;
  this.refund = undefined;
};

RefundPaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
RefundPaymentResponse.prototype.constructor = RefundPaymentResponse;

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.RefundPaymentResponse
* @param {String} orderId 
*/
RefundPaymentResponse.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.RefundPaymentResponse
* @return {String} 
*/
RefundPaymentResponse.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.RefundPaymentResponse
* @param {String} paymentId 
*/
RefundPaymentResponse.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.RefundPaymentResponse
* @return {String} 
*/
RefundPaymentResponse.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* The actual refund from the request
*
* @memberof remotepay.RefundPaymentResponse
* @param {payments.Refund} refund 
*/
RefundPaymentResponse.prototype.setRefund = function(refund) {
  this.refund = refund;
};

/**
* Get the field value
* The actual refund from the request
* @memberof remotepay.RefundPaymentResponse
* @return {payments.Refund} 
*/
RefundPaymentResponse.prototype.getRefund = function() {
  return this.refund;
};

RefundPaymentResponse._meta_ =  {fields:  {}};
RefundPaymentResponse._meta_._class_ =  RefundPaymentResponse;
RefundPaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
RefundPaymentResponse._meta_.fields["orderId"] = {};
RefundPaymentResponse._meta_.fields["orderId"].type = String;
RefundPaymentResponse._meta_.fields["paymentId"] = {};
RefundPaymentResponse._meta_.fields["paymentId"].type = String;
RefundPaymentResponse._meta_.fields["refund"] = {};
RefundPaymentResponse._meta_.fields["refund"].type = payments_Refund;

//
// Expose the module.
//
if (true) {
module.exports = RefundPaymentResponse;
}



/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ExternalDeviceState = __webpack_require__(36);
var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var ResetDeviceResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = ResetDeviceResponse;
  this.state = undefined;
};

ResetDeviceResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
ResetDeviceResponse.prototype.constructor = ResetDeviceResponse;

/**
* Set the field value
* High level state of the connected device.
*
* @memberof remotepay.ResetDeviceResponse
* @param {remotepay.ExternalDeviceState} state 
*/
ResetDeviceResponse.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* High level state of the connected device.
* @memberof remotepay.ResetDeviceResponse
* @return {remotepay.ExternalDeviceState} 
*/
ResetDeviceResponse.prototype.getState = function() {
  return this.state;
};

ResetDeviceResponse._meta_ =  {fields:  {}};
ResetDeviceResponse._meta_._class_ =  ResetDeviceResponse;
ResetDeviceResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
ResetDeviceResponse._meta_.fields["state"] = {};
ResetDeviceResponse._meta_.fields["state"].type = remotepay_ExternalDeviceState;

//
// Expose the module.
//
if (true) {
module.exports = ResetDeviceResponse;
}



/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ResponseCode = __webpack_require__(69);

/**
* @constructor
* @memberof remotepay
*/
var ResponseCodeEnum = function() {
  this._class_ = ResponseCodeEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotepay.ResponseCodeEnum
* @param {remotepay.ResponseCode} status 
*/
ResponseCodeEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotepay.ResponseCodeEnum
* @return {remotepay.ResponseCode} 
*/
ResponseCodeEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotepay.ResponseCodeEnum
* @private
*/
ResponseCodeEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ResponseCodeEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ResponseCodeEnum._meta_ =  {fields:  {}};
ResponseCodeEnum._meta_._class_ =  ResponseCodeEnum;
ResponseCodeEnum._meta_.fields["status"] = {};
ResponseCodeEnum._meta_.fields["status"].type = remotepay_ResponseCode;

//
// Expose the module.
//
if (true) {
module.exports = ResponseCodeEnum;
}



/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ResultStatus = __webpack_require__(74);

/**
* @constructor
* @memberof remotepay
*/
var ResultStatusEnum = function() {
  this._class_ = ResultStatusEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotepay.ResultStatusEnum
* @param {remotepay.ResultStatus} status 
*/
ResultStatusEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotepay.ResultStatusEnum
* @return {remotepay.ResultStatus} 
*/
ResultStatusEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotepay.ResultStatusEnum
* @private
*/
ResultStatusEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

ResultStatusEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

ResultStatusEnum._meta_ =  {fields:  {}};
ResultStatusEnum._meta_._class_ =  ResultStatusEnum;
ResultStatusEnum._meta_.fields["status"] = {};
ResultStatusEnum._meta_.fields["status"].type = remotepay_ResultStatus;

//
// Expose the module.
//
if (true) {
module.exports = ResultStatusEnum;
}



/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var RetrieveDeviceStatusRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = RetrieveDeviceStatusRequest;
  this.sendLastMessage = false;
};

RetrieveDeviceStatusRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
RetrieveDeviceStatusRequest.prototype.constructor = RetrieveDeviceStatusRequest;

/**
* Set the field value
* Send last message, if true
*
* @memberof remotepay.RetrieveDeviceStatusRequest
* @param {Boolean} sendLastMessage 
*/
RetrieveDeviceStatusRequest.prototype.setSendLastMessage = function(sendLastMessage) {
  this.sendLastMessage = sendLastMessage;
};

/**
* Get the field value
* Send last message, if true
* @memberof remotepay.RetrieveDeviceStatusRequest
* @return {Boolean} 
*/
RetrieveDeviceStatusRequest.prototype.getSendLastMessage = function() {
  return this.sendLastMessage;
};

RetrieveDeviceStatusRequest._meta_ =  {fields:  {}};
RetrieveDeviceStatusRequest._meta_._class_ =  RetrieveDeviceStatusRequest;
RetrieveDeviceStatusRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
RetrieveDeviceStatusRequest._meta_.fields["sendLastMessage"] = {};
RetrieveDeviceStatusRequest._meta_.fields["sendLastMessage"].type = Boolean;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveDeviceStatusRequest;
}



/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ExternalDeviceState = __webpack_require__(36);
var remotepay_BaseResponse = __webpack_require__(5);
var remotepay_ExternalDeviceStateData = __webpack_require__(158);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var RetrieveDeviceStatusResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = RetrieveDeviceStatusResponse;
  this.state = undefined;
  this.data = undefined;
};

RetrieveDeviceStatusResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
RetrieveDeviceStatusResponse.prototype.constructor = RetrieveDeviceStatusResponse;

/**
* Set the field value
* High level state of the connected device.
*
* @memberof remotepay.RetrieveDeviceStatusResponse
* @param {remotepay.ExternalDeviceState} state 
*/
RetrieveDeviceStatusResponse.prototype.setState = function(state) {
  this.state = state;
};

/**
* Get the field value
* High level state of the connected device.
* @memberof remotepay.RetrieveDeviceStatusResponse
* @return {remotepay.ExternalDeviceState} 
*/
RetrieveDeviceStatusResponse.prototype.getState = function() {
  return this.state;
};

/**
* Set the field value
* Additional data elements supplementing the state of the connected device.
*
* @memberof remotepay.RetrieveDeviceStatusResponse
* @param {remotepay.ExternalDeviceStateData} data 
*/
RetrieveDeviceStatusResponse.prototype.setData = function(data) {
  this.data = data;
};

/**
* Get the field value
* Additional data elements supplementing the state of the connected device.
* @memberof remotepay.RetrieveDeviceStatusResponse
* @return {remotepay.ExternalDeviceStateData} 
*/
RetrieveDeviceStatusResponse.prototype.getData = function() {
  return this.data;
};

RetrieveDeviceStatusResponse._meta_ =  {fields:  {}};
RetrieveDeviceStatusResponse._meta_._class_ =  RetrieveDeviceStatusResponse;
RetrieveDeviceStatusResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
RetrieveDeviceStatusResponse._meta_.fields["state"] = {};
RetrieveDeviceStatusResponse._meta_.fields["state"].type = remotepay_ExternalDeviceState;
RetrieveDeviceStatusResponse._meta_.fields["data"] = {};
RetrieveDeviceStatusResponse._meta_.fields["data"].type = remotepay_ExternalDeviceStateData;

//
// Expose the module.
//
if (true) {
module.exports = RetrieveDeviceStatusResponse;
}



/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/** Request to retrieve a payment made to a specific device. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var RetrievePaymentRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = RetrievePaymentRequest;
  this.externalPaymentId = undefined;
};

RetrievePaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
RetrievePaymentRequest.prototype.constructor = RetrievePaymentRequest;

/**
* Set the field value
* The externalPaymentId used when a payment was created
*
* @memberof remotepay.RetrievePaymentRequest
* @param {String} externalPaymentId 
*/
RetrievePaymentRequest.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* The externalPaymentId used when a payment was created
* @memberof remotepay.RetrievePaymentRequest
* @return {String} 
*/
RetrievePaymentRequest.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

RetrievePaymentRequest._meta_ =  {fields:  {}};
RetrievePaymentRequest._meta_._class_ =  RetrievePaymentRequest;
RetrievePaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
RetrievePaymentRequest._meta_.fields["externalPaymentId"] = {};
RetrievePaymentRequest._meta_.fields["externalPaymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePaymentRequest;
}



/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_Payment = __webpack_require__(4);
var remotepay_BaseResponse = __webpack_require__(5);
var remotepay_QueryStatus = __webpack_require__(73);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var RetrievePaymentResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = RetrievePaymentResponse;
  this.externalPaymentId = undefined;
  this.queryStatus = undefined;
  this.payment = undefined;
};

RetrievePaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
RetrievePaymentResponse.prototype.constructor = RetrievePaymentResponse;

/**
* Set the field value
* The externalPaymentId used when a payment was created
*
* @memberof remotepay.RetrievePaymentResponse
* @param {String} externalPaymentId 
*/
RetrievePaymentResponse.prototype.setExternalPaymentId = function(externalPaymentId) {
  this.externalPaymentId = externalPaymentId;
};

/**
* Get the field value
* The externalPaymentId used when a payment was created
* @memberof remotepay.RetrievePaymentResponse
* @return {String} 
*/
RetrievePaymentResponse.prototype.getExternalPaymentId = function() {
  return this.externalPaymentId;
};

/**
* Set the field value
* The status of the query
*
* @memberof remotepay.RetrievePaymentResponse
* @param {remotepay.QueryStatus} queryStatus 
*/
RetrievePaymentResponse.prototype.setQueryStatus = function(queryStatus) {
  this.queryStatus = queryStatus;
};

/**
* Get the field value
* The status of the query
* @memberof remotepay.RetrievePaymentResponse
* @return {remotepay.QueryStatus} 
*/
RetrievePaymentResponse.prototype.getQueryStatus = function() {
  return this.queryStatus;
};

/**
* Set the field value
* Payment information
*
* @memberof remotepay.RetrievePaymentResponse
* @param {payments.Payment} payment 
*/
RetrievePaymentResponse.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* Payment information
* @memberof remotepay.RetrievePaymentResponse
* @return {payments.Payment} 
*/
RetrievePaymentResponse.prototype.getPayment = function() {
  return this.payment;
};

RetrievePaymentResponse._meta_ =  {fields:  {}};
RetrievePaymentResponse._meta_._class_ =  RetrievePaymentResponse;
RetrievePaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
RetrievePaymentResponse._meta_.fields["externalPaymentId"] = {};
RetrievePaymentResponse._meta_.fields["externalPaymentId"].type = String;
RetrievePaymentResponse._meta_.fields["queryStatus"] = {};
RetrievePaymentResponse._meta_.fields["queryStatus"].type = remotepay_QueryStatus;
RetrievePaymentResponse._meta_.fields["payment"] = {};
RetrievePaymentResponse._meta_.fields["payment"].type = payments_Payment;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePaymentResponse;
}



/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var base_PendingPaymentEntry = __webpack_require__(42);
var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var RetrievePendingPaymentsResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = RetrievePendingPaymentsResponse;
  this.pendingPaymentEntries = undefined;
};

RetrievePendingPaymentsResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
RetrievePendingPaymentsResponse.prototype.constructor = RetrievePendingPaymentsResponse;

/**
* Set the field value
* The pending payments.
*
* @memberof remotepay.RetrievePendingPaymentsResponse
* @param {Array.<base.PendingPaymentEntry>} pendingPaymentEntries An array of 
*/
RetrievePendingPaymentsResponse.prototype.setPendingPaymentEntries = function(pendingPaymentEntries) {
  this.pendingPaymentEntries = pendingPaymentEntries;
};

/**
* Get the field value
* The pending payments.
* @memberof remotepay.RetrievePendingPaymentsResponse
* @return {Array.<base.PendingPaymentEntry>} An array of 
*/
RetrievePendingPaymentsResponse.prototype.getPendingPaymentEntries = function() {
  return this.pendingPaymentEntries;
};

RetrievePendingPaymentsResponse._meta_ =  {fields:  {}};
RetrievePendingPaymentsResponse._meta_._class_ =  RetrievePendingPaymentsResponse;
RetrievePendingPaymentsResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"] = {};
RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"].type = Array;
RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"].elementType = base_PendingPaymentEntry;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePendingPaymentsResponse;
}



/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);
var printer_PrintCategory = __webpack_require__(63);

/** Request to retrieve printers attached to a specific device. */
/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var RetrievePrintersRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = RetrievePrintersRequest;
  this.category = undefined;
};

RetrievePrintersRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
RetrievePrintersRequest.prototype.constructor = RetrievePrintersRequest;

/**
* Set the field value
* Category of printers to retrieve
*
* @memberof remotepay.RetrievePrintersRequest
* @param {printer.PrintCategory} category 
*/
RetrievePrintersRequest.prototype.setCategory = function(category) {
  this.category = category;
};

/**
* Get the field value
* Category of printers to retrieve
* @memberof remotepay.RetrievePrintersRequest
* @return {printer.PrintCategory} 
*/
RetrievePrintersRequest.prototype.getCategory = function() {
  return this.category;
};

RetrievePrintersRequest._meta_ =  {fields:  {}};
RetrievePrintersRequest._meta_._class_ =  RetrievePrintersRequest;
RetrievePrintersRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
RetrievePrintersRequest._meta_.fields["category"] = {};
RetrievePrintersRequest._meta_.fields["category"].type = printer_PrintCategory;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePrintersRequest;
}



/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var printer_Printer = __webpack_require__(9);
var remotepay_BaseResponse = __webpack_require__(5);

/** contains the list of printers */
/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var RetrievePrintersResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = RetrievePrintersResponse;
  this.printers = undefined;
};

RetrievePrintersResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
RetrievePrintersResponse.prototype.constructor = RetrievePrintersResponse;

/**
* Set the field value
* The list of printers (note, there is some v1-v3 confusion at the moment)
*
* @memberof remotepay.RetrievePrintersResponse
* @param {Array.<printer.Printer>} printers An array of 
*/
RetrievePrintersResponse.prototype.setPrinters = function(printers) {
  this.printers = printers;
};

/**
* Get the field value
* The list of printers (note, there is some v1-v3 confusion at the moment)
* @memberof remotepay.RetrievePrintersResponse
* @return {Array.<printer.Printer>} An array of 
*/
RetrievePrintersResponse.prototype.getPrinters = function() {
  return this.printers;
};

RetrievePrintersResponse._meta_ =  {fields:  {}};
RetrievePrintersResponse._meta_._class_ =  RetrievePrintersResponse;
RetrievePrintersResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
RetrievePrintersResponse._meta_.fields["printers"] = {};
RetrievePrintersResponse._meta_.fields["printers"].type = Array;
RetrievePrintersResponse._meta_.fields["printers"].elementType = printer_Printer;

//
// Expose the module.
//
if (true) {
module.exports = RetrievePrintersResponse;
}



/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_TransactionType = __webpack_require__(12);
var payments_TipMode = __webpack_require__(55);
var remotepay_TransactionRequest = __webpack_require__(22);

/**
* @constructor
* @augments remotepay.TransactionRequest
* @memberof remotepay
*/
var SaleRequest = function() {
  remotepay_TransactionRequest.call(this);
  this._superClass_ = remotepay_TransactionRequest;
  this._class_ = SaleRequest;
  this.setType(remotepay_TransactionType["PAYMENT"]);
  this.tippableAmount = undefined;
  this.tipAmount = undefined;
  this.disableCashback = undefined;
  this.disableTipOnScreen = undefined;
  this.taxAmount = undefined;
  this.allowOfflinePayment = undefined;
  this.forceOfflinePayment = undefined;
  this.approveOfflinePaymentWithoutPrompt = undefined;
  this.tipMode = undefined;
};

SaleRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
SaleRequest.prototype.constructor = SaleRequest;

/**
* Set the field value
* Total amount used when calculating tips
*
* @memberof remotepay.SaleRequest
* @param {Number|Null} tippableAmount must be a long integer, 
*/
SaleRequest.prototype.setTippableAmount = function(tippableAmount) {
  this.tippableAmount = tippableAmount;
};

/**
* Get the field value
* Total amount used when calculating tips
* @memberof remotepay.SaleRequest
* @return {Number|Null} must be a long integer, 
*/
SaleRequest.prototype.getTippableAmount = function() {
  return this.tippableAmount;
};

/**
* Set the field value
* Included tip
*
* @memberof remotepay.SaleRequest
* @param {Number|Null} tipAmount must be a long integer, 
*/
SaleRequest.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Included tip
* @memberof remotepay.SaleRequest
* @return {Number|Null} must be a long integer, 
*/
SaleRequest.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Do not allow cash back
*
* @memberof remotepay.SaleRequest
* @param {Boolean|Null} disableCashback 
*/
SaleRequest.prototype.setDisableCashback = function(disableCashback) {
  this.disableCashback = disableCashback;
};

/**
* Get the field value
* Do not allow cash back
* @memberof remotepay.SaleRequest
* @return {Boolean|Null} 
*/
SaleRequest.prototype.getDisableCashback = function() {
  return this.disableCashback;
};

/**
* Set the field value
* If true, the tip screen will not be displayed on the device, even if the merchant is configured for tips on screen
*
* @memberof remotepay.SaleRequest
* @param {Boolean|Null} disableTipOnScreen 
*/
SaleRequest.prototype.setDisableTipOnScreen = function(disableTipOnScreen) {
  this.disableTipOnScreen = disableTipOnScreen;
};

/**
* Get the field value
* If true, the tip screen will not be displayed on the device, even if the merchant is configured for tips on screen
* @memberof remotepay.SaleRequest
* @return {Boolean|Null} 
*/
SaleRequest.prototype.getDisableTipOnScreen = function() {
  return this.disableTipOnScreen;
};

/**
* Set the field value
* Amount paid in tax
*
* @memberof remotepay.SaleRequest
* @param {Number|Null} taxAmount must be a long integer, 
*/
SaleRequest.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Amount paid in tax
* @memberof remotepay.SaleRequest
* @return {Number|Null} must be a long integer, 
*/
SaleRequest.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* If true then offline payments can be accepted
*
* @memberof remotepay.SaleRequest
* @param {Boolean|Null} allowOfflinePayment 
*/
SaleRequest.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
  this.allowOfflinePayment = allowOfflinePayment;
};

/**
* Get the field value
* If true then offline payments can be accepted
* @memberof remotepay.SaleRequest
* @return {Boolean|Null} 
*/
SaleRequest.prototype.getAllowOfflinePayment = function() {
  return this.allowOfflinePayment;
};

/**
* Set the field value
* If true then payment will be taken offline, regardless of connection status
*
* @memberof remotepay.SaleRequest
* @param {Boolean|Null} forceOfflinePayment 
*/
SaleRequest.prototype.setForceOfflinePayment = function(forceOfflinePayment) {
  this.forceOfflinePayment = forceOfflinePayment;
};

/**
* Get the field value
* If true then payment will be taken offline, regardless of connection status
* @memberof remotepay.SaleRequest
* @return {Boolean|Null} 
*/
SaleRequest.prototype.getForceOfflinePayment = function() {
  return this.forceOfflinePayment;
};

/**
* Set the field value
* If true then offline payments will be approved without a prompt
*
* @memberof remotepay.SaleRequest
* @param {Boolean|Null} approveOfflinePaymentWithoutPrompt 
*/
SaleRequest.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
};

/**
* Get the field value
* If true then offline payments will be approved without a prompt
* @memberof remotepay.SaleRequest
* @return {Boolean|Null} 
*/
SaleRequest.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
  return this.approveOfflinePaymentWithoutPrompt;
};

/**
* Set the field value
* @memberof remotepay.SaleRequest
* @param {payments.TipMode} tipMode 
*/
SaleRequest.prototype.setTipMode = function(tipMode) {
  this.tipMode = tipMode;
};

/**
* Get the field value
* @memberof remotepay.SaleRequest
* @return {payments.TipMode} 
*/
SaleRequest.prototype.getTipMode = function() {
  return this.tipMode;
};

SaleRequest._meta_ =  {fields:  {}};
SaleRequest._meta_._class_ =  SaleRequest;
SaleRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;
SaleRequest._meta_.fields["tippableAmount"] = {};
SaleRequest._meta_.fields["tippableAmount"].type = Number;
SaleRequest._meta_.fields["tipAmount"] = {};
SaleRequest._meta_.fields["tipAmount"].type = Number;
SaleRequest._meta_.fields["disableCashback"] = {};
SaleRequest._meta_.fields["disableCashback"].type = Boolean;
SaleRequest._meta_.fields["disableTipOnScreen"] = {};
SaleRequest._meta_.fields["disableTipOnScreen"].type = Boolean;
SaleRequest._meta_.fields["taxAmount"] = {};
SaleRequest._meta_.fields["taxAmount"].type = Number;
SaleRequest._meta_.fields["allowOfflinePayment"] = {};
SaleRequest._meta_.fields["allowOfflinePayment"].type = Boolean;
SaleRequest._meta_.fields["forceOfflinePayment"] = {};
SaleRequest._meta_.fields["forceOfflinePayment"].type = Boolean;
SaleRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
SaleRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
SaleRequest._meta_.fields["tipMode"] = {};
SaleRequest._meta_.fields["tipMode"].type = payments_TipMode;

//
// Expose the module.
//
if (true) {
module.exports = SaleRequest;
}



/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_PaymentResponse = __webpack_require__(35);

/**
* @constructor
* @augments remotepay.PaymentResponse
* @memberof remotepay
*/
var SaleResponse = function() {
  remotepay_PaymentResponse.call(this);
  this._superClass_ = remotepay_PaymentResponse;
  this._class_ = SaleResponse;
};

SaleResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
SaleResponse.prototype.constructor = SaleResponse;

SaleResponse._meta_ =  {fields:  {}};
SaleResponse._meta_._class_ =  SaleResponse;
SaleResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

//
// Expose the module.
//
if (true) {
module.exports = SaleResponse;
}



/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var TipAdded = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = TipAdded;
  this.tipAmount = undefined;
};

TipAdded.prototype = Object.create(remotepay_BaseResponse.prototype);
TipAdded.prototype.constructor = TipAdded;

/**
* Set the field value
* Tip amount
*
* @memberof remotepay.TipAdded
* @param {Number} tipAmount must be a long integer
*/
TipAdded.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Tip amount
* @memberof remotepay.TipAdded
* @return {Number} must be a long integer
*/
TipAdded.prototype.getTipAmount = function() {
  return this.tipAmount;
};

TipAdded._meta_ =  {fields:  {}};
TipAdded._meta_._class_ =  TipAdded;
TipAdded._meta_._superMeta_ = remotepay_BaseResponse._meta_;
TipAdded._meta_.fields["tipAmount"] = {};
TipAdded._meta_.fields["tipAmount"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = TipAdded;
}



/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var TipAdjustAuthRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = TipAdjustAuthRequest;
  this.tipAmount = undefined;
  this.orderId = undefined;
  this.paymentId = undefined;
};

TipAdjustAuthRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
TipAdjustAuthRequest.prototype.constructor = TipAdjustAuthRequest;

/**
* Set the field value
* Amount paid in tips
*
* @memberof remotepay.TipAdjustAuthRequest
* @param {Number} tipAmount must be a long integer
*/
TipAdjustAuthRequest.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount paid in tips
* @memberof remotepay.TipAdjustAuthRequest
* @return {Number} must be a long integer
*/
TipAdjustAuthRequest.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.TipAdjustAuthRequest
* @param {String} orderId 
*/
TipAdjustAuthRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.TipAdjustAuthRequest
* @return {String} 
*/
TipAdjustAuthRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.TipAdjustAuthRequest
* @param {String} paymentId 
*/
TipAdjustAuthRequest.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.TipAdjustAuthRequest
* @return {String} 
*/
TipAdjustAuthRequest.prototype.getPaymentId = function() {
  return this.paymentId;
};

TipAdjustAuthRequest._meta_ =  {fields:  {}};
TipAdjustAuthRequest._meta_._class_ =  TipAdjustAuthRequest;
TipAdjustAuthRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
TipAdjustAuthRequest._meta_.fields["tipAmount"] = {};
TipAdjustAuthRequest._meta_.fields["tipAmount"].type = Number;
TipAdjustAuthRequest._meta_.fields["orderId"] = {};
TipAdjustAuthRequest._meta_.fields["orderId"].type = String;
TipAdjustAuthRequest._meta_.fields["paymentId"] = {};
TipAdjustAuthRequest._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TipAdjustAuthRequest;
}



/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var TipAdjustAuthResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = TipAdjustAuthResponse;
  this.tipAmount = undefined;
  this.paymentId = undefined;
};

TipAdjustAuthResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
TipAdjustAuthResponse.prototype.constructor = TipAdjustAuthResponse;

/**
* Set the field value
* Amount of tip
*
* @memberof remotepay.TipAdjustAuthResponse
* @param {Number} tipAmount must be a long integer
*/
TipAdjustAuthResponse.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Amount of tip
* @memberof remotepay.TipAdjustAuthResponse
* @return {Number} must be a long integer
*/
TipAdjustAuthResponse.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* Unique identifier for a payment
*
* @memberof remotepay.TipAdjustAuthResponse
* @param {String} paymentId 
*/
TipAdjustAuthResponse.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier for a payment
* @memberof remotepay.TipAdjustAuthResponse
* @return {String} 
*/
TipAdjustAuthResponse.prototype.getPaymentId = function() {
  return this.paymentId;
};

TipAdjustAuthResponse._meta_ =  {fields:  {}};
TipAdjustAuthResponse._meta_._class_ =  TipAdjustAuthResponse;
TipAdjustAuthResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
TipAdjustAuthResponse._meta_.fields["tipAmount"] = {};
TipAdjustAuthResponse._meta_.fields["tipAmount"].type = Number;
TipAdjustAuthResponse._meta_.fields["paymentId"] = {};
TipAdjustAuthResponse._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = TipAdjustAuthResponse;
}



/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_TransactionType = __webpack_require__(12);

/**
* @constructor
* @memberof remotepay
*/
var TransactionTypeEnum = function() {
  this._class_ = TransactionTypeEnum;
  this.status = undefined;
};


/**
* Set the field value
* @memberof remotepay.TransactionTypeEnum
* @param {remotepay.TransactionType} status 
*/
TransactionTypeEnum.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotepay.TransactionTypeEnum
* @return {remotepay.TransactionType} 
*/
TransactionTypeEnum.prototype.getStatus = function() {
  return this.status;
};

/**
* @memberof remotepay.TransactionTypeEnum
* @private
*/
TransactionTypeEnum.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TransactionTypeEnum.prototype.toString = function() {
  return JSON.stringify(this);
};

TransactionTypeEnum._meta_ =  {fields:  {}};
TransactionTypeEnum._meta_._class_ =  TransactionTypeEnum;
TransactionTypeEnum._meta_.fields["status"] = {};
TransactionTypeEnum._meta_.fields["status"].type = remotepay_TransactionType;

//
// Expose the module.
//
if (true) {
module.exports = TransactionTypeEnum;
}



/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var VaultCardRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = VaultCardRequest;
  this.cardEntryMethods = undefined;
};

VaultCardRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
VaultCardRequest.prototype.constructor = VaultCardRequest;

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotepay.VaultCardRequest
* @param {Number|Null} cardEntryMethods must be an integer, 
*/
VaultCardRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotepay.VaultCardRequest
* @return {Number|Null} must be an integer, 
*/
VaultCardRequest.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

VaultCardRequest._meta_ =  {fields:  {}};
VaultCardRequest._meta_._class_ =  VaultCardRequest;
VaultCardRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
VaultCardRequest._meta_.fields["cardEntryMethods"] = {};
VaultCardRequest._meta_.fields["cardEntryMethods"].type = Number;

//
// Expose the module.
//
if (true) {
module.exports = VaultCardRequest;
}



/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);
var payments_VaultedCard = __webpack_require__(11);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var VaultCardResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = VaultCardResponse;
  this.card = undefined;
};

VaultCardResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
VaultCardResponse.prototype.constructor = VaultCardResponse;

/**
* Set the field value
* The card that was vaulted.
*
* @memberof remotepay.VaultCardResponse
* @param {payments.VaultedCard} card 
*/
VaultCardResponse.prototype.setCard = function(card) {
  this.card = card;
};

/**
* Get the field value
* The card that was vaulted.
* @memberof remotepay.VaultCardResponse
* @return {payments.VaultedCard} 
*/
VaultCardResponse.prototype.getCard = function() {
  return this.card;
};

VaultCardResponse._meta_ =  {fields:  {}};
VaultCardResponse._meta_._class_ =  VaultCardResponse;
VaultCardResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
VaultCardResponse._meta_.fields["card"] = {};
VaultCardResponse._meta_.fields["card"].type = payments_VaultedCard;

//
// Expose the module.
//
if (true) {
module.exports = VaultCardResponse;
}



/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);
var payments_Payment = __webpack_require__(4);
var base_Signature = __webpack_require__(17);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var VerifySignatureRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = VerifySignatureRequest;
  this.payment = undefined;
  this.signature = undefined;
};

VerifySignatureRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
VerifySignatureRequest.prototype.constructor = VerifySignatureRequest;

/**
* Set the field value
* Payment that the signature is verifying for
*
* @memberof remotepay.VerifySignatureRequest
* @param {payments.Payment} payment 
*/
VerifySignatureRequest.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* Payment that the signature is verifying for
* @memberof remotepay.VerifySignatureRequest
* @return {payments.Payment} 
*/
VerifySignatureRequest.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof remotepay.VerifySignatureRequest
* @param {base.Signature} signature 
*/
VerifySignatureRequest.prototype.setSignature = function(signature) {
  this.signature = signature;
};

/**
* Get the field value
* @memberof remotepay.VerifySignatureRequest
* @return {base.Signature} 
*/
VerifySignatureRequest.prototype.getSignature = function() {
  return this.signature;
};

VerifySignatureRequest._meta_ =  {fields:  {}};
VerifySignatureRequest._meta_._class_ =  VerifySignatureRequest;
VerifySignatureRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
VerifySignatureRequest._meta_.fields["payment"] = {};
VerifySignatureRequest._meta_.fields["payment"].type = payments_Payment;
VerifySignatureRequest._meta_.fields["signature"] = {};
VerifySignatureRequest._meta_.fields["signature"].type = base_Signature;

//
// Expose the module.
//
if (true) {
module.exports = VerifySignatureRequest;
}



/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/**
* @constructor
* @memberof remotepay
*/
var VoidCreditRequest = function() {
  this._class_ = VoidCreditRequest;
  this.requestId = undefined;
  this.orderId = undefined;
  this.creditId = undefined;
};


/**
* Set the field value
* Identifier for the request
*
* @memberof remotepay.VoidCreditRequest
* @param {String} requestId 
*/
VoidCreditRequest.prototype.setRequestId = function(requestId) {
  this.requestId = requestId;
};

/**
* Get the field value
* Identifier for the request
* @memberof remotepay.VoidCreditRequest
* @return {String} 
*/
VoidCreditRequest.prototype.getRequestId = function() {
  return this.requestId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.VoidCreditRequest
* @param {String} orderId 
*/
VoidCreditRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.VoidCreditRequest
* @return {String} 
*/
VoidCreditRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.VoidCreditRequest
* @param {String} creditId 
*/
VoidCreditRequest.prototype.setCreditId = function(creditId) {
  this.creditId = creditId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.VoidCreditRequest
* @return {String} 
*/
VoidCreditRequest.prototype.getCreditId = function() {
  return this.creditId;
};

/**
* @memberof remotepay.VoidCreditRequest
* @private
*/
VoidCreditRequest.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

VoidCreditRequest.prototype.toString = function() {
  return JSON.stringify(this);
};

VoidCreditRequest._meta_ =  {fields:  {}};
VoidCreditRequest._meta_._class_ =  VoidCreditRequest;
VoidCreditRequest._meta_.fields["requestId"] = {};
VoidCreditRequest._meta_.fields["requestId"].type = String;
VoidCreditRequest._meta_.fields["orderId"] = {};
VoidCreditRequest._meta_.fields["orderId"].type = String;
VoidCreditRequest._meta_.fields["creditId"] = {};
VoidCreditRequest._meta_.fields["creditId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = VoidCreditRequest;
}



/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_ResultStatus = __webpack_require__(74);
var payments_Credit = __webpack_require__(16);

/**
* @constructor
* @memberof remotepay
*/
var VoidCreditResponse = function() {
  this._class_ = VoidCreditResponse;
  this.requestId = undefined;
  this.status = undefined;
  this.credit = undefined;
};


/**
* Set the field value
* Identifier for the request
*
* @memberof remotepay.VoidCreditResponse
* @param {String} requestId 
*/
VoidCreditResponse.prototype.setRequestId = function(requestId) {
  this.requestId = requestId;
};

/**
* Get the field value
* Identifier for the request
* @memberof remotepay.VoidCreditResponse
* @return {String} 
*/
VoidCreditResponse.prototype.getRequestId = function() {
  return this.requestId;
};

/**
* Set the field value
* @memberof remotepay.VoidCreditResponse
* @param {remotepay.ResultStatus} status 
*/
VoidCreditResponse.prototype.setStatus = function(status) {
  this.status = status;
};

/**
* Get the field value
* @memberof remotepay.VoidCreditResponse
* @return {remotepay.ResultStatus} 
*/
VoidCreditResponse.prototype.getStatus = function() {
  return this.status;
};

/**
* Set the field value
* The credit that was voided
*
* @memberof remotepay.VoidCreditResponse
* @param {payments.Credit} credit 
*/
VoidCreditResponse.prototype.setCredit = function(credit) {
  this.credit = credit;
};

/**
* Get the field value
* The credit that was voided
* @memberof remotepay.VoidCreditResponse
* @return {payments.Credit} 
*/
VoidCreditResponse.prototype.getCredit = function() {
  return this.credit;
};

/**
* @memberof remotepay.VoidCreditResponse
* @private
*/
VoidCreditResponse.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

VoidCreditResponse.prototype.toString = function() {
  return JSON.stringify(this);
};

VoidCreditResponse._meta_ =  {fields:  {}};
VoidCreditResponse._meta_._class_ =  VoidCreditResponse;
VoidCreditResponse._meta_.fields["requestId"] = {};
VoidCreditResponse._meta_.fields["requestId"].type = String;
VoidCreditResponse._meta_.fields["status"] = {};
VoidCreditResponse._meta_.fields["status"].type = remotepay_ResultStatus;
VoidCreditResponse._meta_.fields["credit"] = {};
VoidCreditResponse._meta_.fields["credit"].type = payments_Credit;

//
// Expose the module.
//
if (true) {
module.exports = VoidCreditResponse;
}



/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = __webpack_require__(3);

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var VoidPaymentRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = VoidPaymentRequest;
  this.orderId = undefined;
  this.paymentId = undefined;
  this.employeeId = undefined;
  this.voidReason = undefined;
};

VoidPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
VoidPaymentRequest.prototype.constructor = VoidPaymentRequest;

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.VoidPaymentRequest
* @param {String} orderId 
*/
VoidPaymentRequest.prototype.setOrderId = function(orderId) {
  this.orderId = orderId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.VoidPaymentRequest
* @return {String} 
*/
VoidPaymentRequest.prototype.getOrderId = function() {
  return this.orderId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.VoidPaymentRequest
* @param {String} paymentId 
*/
VoidPaymentRequest.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.VoidPaymentRequest
* @return {String} 
*/
VoidPaymentRequest.prototype.getPaymentId = function() {
  return this.paymentId;
};

/**
* Set the field value
* Unique identifier
*
* @memberof remotepay.VoidPaymentRequest
* @param {String} employeeId 
*/
VoidPaymentRequest.prototype.setEmployeeId = function(employeeId) {
  this.employeeId = employeeId;
};

/**
* Get the field value
* Unique identifier
* @memberof remotepay.VoidPaymentRequest
* @return {String} 
*/
VoidPaymentRequest.prototype.getEmployeeId = function() {
  return this.employeeId;
};

/**
* Set the field value
* Reason for void
*
* @memberof remotepay.VoidPaymentRequest
* @param {String} voidReason 
*/
VoidPaymentRequest.prototype.setVoidReason = function(voidReason) {
  this.voidReason = voidReason;
};

/**
* Get the field value
* Reason for void
* @memberof remotepay.VoidPaymentRequest
* @return {String} 
*/
VoidPaymentRequest.prototype.getVoidReason = function() {
  return this.voidReason;
};

VoidPaymentRequest._meta_ =  {fields:  {}};
VoidPaymentRequest._meta_._class_ =  VoidPaymentRequest;
VoidPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
VoidPaymentRequest._meta_.fields["orderId"] = {};
VoidPaymentRequest._meta_.fields["orderId"].type = String;
VoidPaymentRequest._meta_.fields["paymentId"] = {};
VoidPaymentRequest._meta_.fields["paymentId"].type = String;
VoidPaymentRequest._meta_.fields["employeeId"] = {};
VoidPaymentRequest._meta_.fields["employeeId"].type = String;
VoidPaymentRequest._meta_.fields["voidReason"] = {};
VoidPaymentRequest._meta_.fields["voidReason"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = VoidPaymentRequest;
}



/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseResponse = __webpack_require__(5);

/**
* @constructor
* @augments remotepay.BaseResponse
* @memberof remotepay
*/
var VoidPaymentResponse = function() {
  remotepay_BaseResponse.call(this);
  this._superClass_ = remotepay_BaseResponse;
  this._class_ = VoidPaymentResponse;
  this.paymentId = undefined;
};

VoidPaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
VoidPaymentResponse.prototype.constructor = VoidPaymentResponse;

/**
* Set the field value
* The id of the payment voided
*
* @memberof remotepay.VoidPaymentResponse
* @param {String} paymentId 
*/
VoidPaymentResponse.prototype.setPaymentId = function(paymentId) {
  this.paymentId = paymentId;
};

/**
* Get the field value
* The id of the payment voided
* @memberof remotepay.VoidPaymentResponse
* @return {String} 
*/
VoidPaymentResponse.prototype.getPaymentId = function() {
  return this.paymentId;
};

VoidPaymentResponse._meta_ =  {fields:  {}};
VoidPaymentResponse._meta_._class_ =  VoidPaymentResponse;
VoidPaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
VoidPaymentResponse._meta_.fields["paymentId"] = {};
VoidPaymentResponse._meta_.fields["paymentId"].type = String;

//
// Expose the module.
//
if (true) {
module.exports = VoidPaymentResponse;
}



/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * A utility class to create Clover compatible identifiers, and guids.
 *
 * @constructor
 */

function CloverID() {
}

CloverID.ID_LENGTH = 13;

// http://www.crockford.com/wrmg/base32.html

/**
 * The legal set of characters used to generate a clover id.
 * @type {string[]}
 */
CloverID.BASE_32_DIGITS = [
    '0', '1', '2', '3', '4', '5',
    '6', '7', '8', '9', 'A', 'B',
    'C', 'D', 'E', 'F', 'G', 'H',
    'J', 'K', 'M', 'N', 'P', 'Q',
    'R', 'S', 'T', 'V', 'W', 'X',
    'Y', 'Z'
];

/**
 * @returns {string} a clover compatible ID.
 */
CloverID.getNewId = function() {
    var id = "";
    for (var index = 0; index < CloverID.ID_LENGTH; index++) {
        id += CloverID.BASE_32_DIGITS[Math.floor(Math.random() * CloverID.BASE_32_DIGITS.length)];
    }
    return id;
};

/**
 *
 * @param {string} id - a string id to test
 * @returns {boolean} true if the id is a clover compatible ID.
 */
CloverID.isValidBase32Id = function(id){
    if (id == null || id.length != CloverID.ID_LENGTH) {
        return false;
    }
    for (var i = 0; i < id.length; i++) {
        if (-1 == CloverID.BASE_32_DIGITS.indexOf(id.charAt(i))) {
            return false;
        }
    }
    return true;
}

/**
 *
 * @returns {string} a guid - see https://en.wikipedia.org/wiki/Globally_unique_identifier
 */
CloverID.guid = function() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
};

//
// Expose the module.
//
if (true) {
    module.exports = CloverID;
}


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var Logger_1 = __webpack_require__(7);
/**
 * Broadcasts events to a set of ICloverConnectorListener's
 *
 */
var CloverConnectorBroadcaster = (function () {
    function CloverConnectorBroadcaster() {
        this.logger = Logger_1.Logger.create();
        this.listeners = new Array();
    }
    CloverConnectorBroadcaster.prototype.clear = function () {
        this.listeners.splice(0, this.listeners.length);
    };
    CloverConnectorBroadcaster.prototype.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        if (items.length == 1) {
            return this.listeners.push(items[0]);
        }
        else {
            return this.listeners.push(items);
        }
    };
    CloverConnectorBroadcaster.prototype.indexOf = function (searchElement, fromIndex) {
        return this.listeners.indexOf(searchElement, fromIndex);
    };
    CloverConnectorBroadcaster.prototype.splice = function (start, deleteCount) {
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            items[_i - 2] = arguments[_i];
        }
        return (items && items.length > 0) ? this.listeners.splice(start, deleteCount, items) : this.listeners.splice(start, deleteCount);
    };
    CloverConnectorBroadcaster.prototype.notifyOnTipAdded = function (tip) {
        var _this = this;
        this.logger.debug('Sending TipAdded notification to listeners');
        var tipAdded = new sdk.remotepay.TipAdded();
        tipAdded.setTipAmount(tip);
        this.listeners.forEach(function (listener) {
            try {
                listener.onTipAdded(tipAdded);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnRefundPaymentResponse = function (refundPaymentResponse) {
        var _this = this;
        this.logger.debug('Sending RefundPaymentResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onRefundPaymentResponse(refundPaymentResponse);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyCloseout = function (closeoutResponse) {
        var _this = this;
        this.logger.debug('Sending Closeout notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onCloseoutResponse(closeoutResponse);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnDeviceActivityStart = function (deviceEvent) {
        var _this = this;
        this.logger.debug('Sending DeviceActivityStart notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceActivityStart(deviceEvent);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnDeviceActivityEnd = function (deviceEvent) {
        var _this = this;
        this.logger.debug('Sending DeviceActivityEnd notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceActivityEnd(deviceEvent);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnSaleResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending SaleResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onSaleResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnAuthResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending AuthResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onAuthResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnManualRefundResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending ManualRefundResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onManualRefundResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnVerifySignatureRequest = function (request) {
        var _this = this;
        this.logger.debug('Sending VerifySignatureRequest notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onVerifySignatureRequest(request);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnVoidPaymentResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending VoidPaymentResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onVoidPaymentResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnConnect = function () {
        var _this = this;
        this.logger.debug('Sending Connect notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceConnected(); // changed the name in 1.3
                listener.onConnected(); // left here for backwards compatibility.  Deprecated in 1.3*
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnDisconnect = function (message) {
        var _this = this;
        this.logger.debug('Sending Disconnect notification to listeners', message);
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceDisconnected(); // changed the name in 1.3
                listener.onDisconnected(); // left here for backwards compatibility.  Deprecated in 1.3*
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnReady = function (merchantInfo) {
        var _this = this;
        this.logger.debug('Sending Ready notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceReady(merchantInfo); // changed the name in 1.3
                listener.onReady(merchantInfo); // left here for backwards compatibility.  Deprecated in 1.3*
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnTipAdjustAuthResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending TipAdjustAuthResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onTipAdjustAuthResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnVaultCardRespose = function (ccr) {
        var _this = this;
        this.logger.debug('Sending VaultCardResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onVaultCardResponse(ccr);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnPreAuthResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending PreAuthResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onPreAuthResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnCapturePreAuth = function (response) {
        var _this = this;
        this.logger.debug('Sending CapturePreAuth notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onCapturePreAuthResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnDeviceError = function (errorEvent) {
        var _this = this;
        this.logger.debug('Sending DeviceError notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onDeviceError(errorEvent);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnConfirmPaymentRequest = function (confirmPaymentRequest) {
        var _this = this;
        this.logger.debug('Sending ConfirmPaymentRequest notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onConfirmPaymentRequest(confirmPaymentRequest);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnRetrievePendingPaymentResponse = function (rppr) {
        var _this = this;
        this.logger.debug('Sending RetrievePendingPaymentResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onRetrievePendingPaymentsResponse(rppr);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnReadCardDataResponse = function (rcdr) {
        var _this = this;
        this.logger.debug('Sending ReadCardDataResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onReadCardDataResponse(rcdr);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnActivityMessage = function (response) {
        var _this = this;
        this.logger.debug('Sending MessageFromActivity notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onMessageFromActivity(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnActivityResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending ActivityResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onCustomActivityResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnRetrieveDeviceStatusResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending RetrieveDeviceStatusResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onRetrieveDeviceStatusResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnResetDeviceResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending ResetDeviceResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onResetDeviceResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnRetrievePaymentResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending RetrievePaymentResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onRetrievePaymentResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnRetrievePrintersResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending RetrievePrintersResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onRetrievePrintersResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    CloverConnectorBroadcaster.prototype.notifyOnPrintJobStatusResponse = function (response) {
        var _this = this;
        this.logger.debug('Sending PrintJobStatusResponse notification to listeners');
        this.listeners.forEach(function (listener) {
            try {
                listener.onPrintJobStatusResponse(response);
            }
            catch (e) {
                _this.logger.error(e);
            }
        });
    };
    return CloverConnectorBroadcaster;
}());
exports.CloverConnectorBroadcaster = CloverConnectorBroadcaster;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorBroadcaster.js.map


/***/ }),
/* 374 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
/**
 * Used to more closely match patterns used in other SDK's to allow for easier maintenance.
 *
 */
var PayIntent;
(function (PayIntent) {
    var Builder = (function () {
        function Builder() {
            /** @Deprecated // Please use TransactionSettings */
            this.isDisableCashBack = false;
            this.isTesting = false;
            this.isCardNotPresent = false;
            /** @Deprecated // Please use TransactionSettings */
            this.remotePrint = false;
            /** @Deprecated // Please use TransactionSettings */
            this.isForceSwipePinEntry = false;
            /** @Deprecated // Please use TransactionSettings */
            this.disableRestartTransactionWhenFailed = false;
            this.allowPartialAuth = true;
        }
        Builder.buildTransactionSettingsFromPayIntent = function (payIntent) {
            var transactionSettings = new sdk.payments.TransactionSettings();
            transactionSettings.setCloverShouldHandleReceipts(!payIntent.getRemotePrint());
            transactionSettings.setDisableRestartTransactionOnFailure(payIntent.getDisableRestartTransactionWhenFailed());
            transactionSettings.setForcePinEntryOnSwipe(payIntent.getIsForceSwipePinEntry());
            transactionSettings.setDisableCashBack(payIntent.getIsDisableCashBack());
            transactionSettings.setAllowOfflinePayment(payIntent.getAllowOfflinePayment());
            transactionSettings.setApproveOfflinePaymentWithoutPrompt(payIntent.getApproveOfflinePaymentWithoutPrompt());
            transactionSettings.setCardEntryMethods(payIntent.getCardEntryMethods());
            transactionSettings.setDisableDuplicateCheck(false); // default
            transactionSettings.setDisableReceiptSelection(false); // default
            transactionSettings.setSignatureEntryLocation(null); // will default to clover setting
            transactionSettings.setTipMode(null); // will default to clover setting
            transactionSettings.setTippableAmount(payIntent.getTippableAmount());
            return transactionSettings;
        };
        Builder.prototype.payment = function (payment) {
            this.amount = payment.getAmount();
            this.tipAmount = payment.getTipAmount();
            this.taxAmount = payment.getTaxAmount();
            this.employeeId = payment.getEmployee().getId();
            this.transactionNo = payment.getCardTransaction() ? payment.getCardTransaction().getTransactionNo() : null;
            this.transactionSettings = payment.getTransactionSettings();
            return this;
        };
        Builder.prototype.payIntent = function (payIntent) {
            this.action = payIntent.getAction();
            this.amount = payIntent.getAmount();
            this.tippableAmount = payIntent.getTippableAmount();
            this.tipAmount = payIntent.getTipAmount();
            this.taxAmount = payIntent.getTaxAmount();
            this.orderId = payIntent.getOrderId();
            this.paymentId = payIntent.getPaymentId();
            this.employeeId = payIntent.getEmployeeId();
            this.transactionType = payIntent.getTransactionType();
            this.taxableAmountRates = payIntent.getTaxableAmountRates();
            this.serviceChargeAmount = payIntent.getServiceChargeAmount();
            this.isDisableCashBack = payIntent.getIsDisableCashBack();
            this.isTesting = payIntent.getIsTesting();
            this.cardEntryMethods = payIntent.getCardEntryMethods();
            this.voiceAuthCode = payIntent.getVoiceAuthCode();
            this.postalCode = payIntent.getPostalCode();
            this.streetAddress = payIntent.getStreetAddress();
            this.isCardNotPresent = payIntent.getIsCardNotPresent();
            this.cardDataMessage = payIntent.getCardDataMessage();
            this.remotePrint = payIntent.getRemotePrint();
            this.transactionNo = payIntent.getTransactionNo();
            this.isForceSwipePinEntry = payIntent.getIsForceSwipePinEntry();
            this.disableRestartTransactionWhenFailed = payIntent.getDisableRestartTransactionWhenFailed();
            this.externalPaymentId = payIntent.getExternalPaymentId();
            this.vaultedCard = payIntent.getVaultedCard();
            this.allowOfflinePayment = payIntent.getAllowOfflinePayment();
            this.approveOfflinePaymentWithoutPrompt = payIntent.getApproveOfflinePaymentWithoutPrompt();
            this.requiresRemoteConfirmation = payIntent.getRequiresRemoteConfirmation();
            this.applicationTracking = payIntent.getApplicationTracking();
            this.allowPartialAuth = payIntent.getAllowPartialAuth();
            this.germanInfo = payIntent.getGermanInfo();
            if (payIntent.getTransactionSettings() != null) {
                this.transactionSettings = payIntent.getTransactionSettings();
            }
            else {
                this.transactionSettings = PayIntent.Builder.buildTransactionSettingsFromPayIntent(payIntent);
            }
            this.cashAdvanceCustomerIdentification = payIntent.getCashAdvanceCustomerIdentification();
            return this;
        };
        Builder.prototype.setAction = function (action) {
            this.action = action;
            return this;
        };
        Builder.prototype.setAmount = function (amount) {
            this.amount = amount;
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setTippableAmount = function (tippableAmount) {
            this.tippableAmount = tippableAmount;
            if (this.transactionSettings != null) {
                this.transactionSettings.setTippableAmount(tippableAmount);
            }
            return this;
        };
        Builder.prototype.setTaxAmount = function (taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        };
        Builder.prototype.setEmployeeId = function (employeeId) {
            this.employeeId = employeeId;
            return this;
        };
        Builder.prototype.setTipAmount = function (tipAmount) {
            this.tipAmount = tipAmount;
            return this;
        };
        Builder.prototype.setTransactionType = function (transactionType) {
            this.transactionType = transactionType;
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setCardEntryMethods = function (cardEntryMethods) {
            this.cardEntryMethods = cardEntryMethods;
            return this;
        };
        Builder.prototype.setCardDataMessage = function (cardDataMessage) {
            this.cardDataMessage = cardDataMessage;
            return this;
        };
        Builder.prototype.setTaxableAmountRates = function (taxableAmountRates) {
            this.taxableAmountRates = new Array(taxableAmountRates);
            return this;
        };
        Builder.prototype.setServiceChargeAmount = function (serviceChargeAmount) {
            this.serviceChargeAmount = serviceChargeAmount;
            return this;
        };
        Builder.prototype.setOrderId = function (orderId) {
            this.orderId = orderId;
            return this;
        };
        Builder.prototype.setPaymentId = function (paymentId) {
            this.paymentId = paymentId;
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setRemotePrint = function (remotePrint) {
            if (remotePrint === void 0) { remotePrint = false; }
            this.remotePrint = remotePrint;
            if (this.transactionSettings != null) {
                this.transactionSettings.setCloverShouldHandleReceipts(!remotePrint);
            }
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setDisableCashback = function (disableCashBack) {
            if (disableCashBack === void 0) { disableCashBack = false; }
            this.isDisableCashBack = disableCashBack;
            if (this.transactionSettings != null) {
                this.transactionSettings.setDisableCashBack(disableCashBack);
            }
            return this;
        };
        Builder.prototype.setTransactionNo = function (transactionNo) {
            this.transactionNo = transactionNo;
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setForceSwipePinEntry = function (isForceSwipePinEntry) {
            if (isForceSwipePinEntry === void 0) { isForceSwipePinEntry = false; }
            this.isForceSwipePinEntry = isForceSwipePinEntry;
            if (this.transactionSettings != null) {
                this.transactionSettings.setForcePinEntryOnSwipe(isForceSwipePinEntry);
            }
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setDisableRestartTransactionWhenFailed = function (disableRestartTransactionWhenFailed) {
            if (disableRestartTransactionWhenFailed === void 0) { disableRestartTransactionWhenFailed = false; }
            this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;
            if (this.transactionSettings != null) {
                this.transactionSettings.setDisableRestartTransactionOnFailure(disableRestartTransactionWhenFailed);
            }
            return this;
        };
        Builder.prototype.setExternalPaymentId = function (externalPaymentId) {
            this.externalPaymentId = externalPaymentId;
            return this;
        };
        Builder.prototype.setVaultedCard = function (vaultedCard) {
            this.vaultedCard = vaultedCard;
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setAllowOfflinePayment = function (allowOfflinePayment) {
            this.allowOfflinePayment = allowOfflinePayment;
            if (this.transactionSettings != null) {
                this.transactionSettings.setAllowOfflinePayment(allowOfflinePayment);
            }
            return this;
        };
        /** @Deprecated */
        Builder.prototype.setAapproveOfflinePaymentWithoutPrompt = function (approveOfflinePaymentWithoutPrompt) {
            this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
            if (this.transactionSettings != null) {
                this.transactionSettings.setApproveOfflinePaymentWithoutPrompt(approveOfflinePaymentWithoutPrompt);
            }
            return this;
        };
        Builder.prototype.setRequiresRemoteConfirmation = function (requiresRemoteConfirmation) {
            this.requiresRemoteConfirmation = requiresRemoteConfirmation;
            return this;
        };
        Builder.prototype.setApplicationTracking = function (applicationTracking) {
            this.applicationTracking = applicationTracking;
            return this;
        };
        Builder.prototype.setAllowPartialAuth = function (allowPartialAuth) {
            if (allowPartialAuth === void 0) { allowPartialAuth = false; }
            this.allowPartialAuth = allowPartialAuth;
            return this;
        };
        Builder.prototype.setGermanInfo = function (germanInfo) {
            this.germanInfo = germanInfo;
            return this;
        };
        Builder.prototype.setCustomerIdentification = function (customerIdentification) {
            this.cashAdvanceCustomerIdentification = customerIdentification;
            return this;
        };
        Builder.prototype.setTransactionSettings = function (transactionSettings) {
            this.transactionSettings = transactionSettings;
            return this;
        };
        Builder.prototype.setCardNotPresent = function (cardNotPresent) {
            if (cardNotPresent === void 0) { cardNotPresent = false; }
            this.isCardNotPresent = cardNotPresent;
            return this;
        };
        Builder.prototype.build = function () {
            var payIntent = new sdk.remotemessage.PayIntent();
            payIntent.setAction(this.action);
            payIntent.setAmount(this.amount);
            payIntent.setTippableAmount(this.tippableAmount);
            payIntent.setTipAmount(this.tipAmount);
            payIntent.setTaxAmount(this.taxAmount);
            payIntent.setOrderId(this.orderId);
            payIntent.setPaymentId(this.paymentId);
            payIntent.setEmployeeId(this.employeeId);
            payIntent.setTransactionType(this.transactionType);
            payIntent.setTaxableAmountRates(this.taxableAmountRates);
            payIntent.setServiceChargeAmount(this.serviceChargeAmount);
            payIntent.setIsDisableCashBack(this.isDisableCashBack);
            payIntent.setIsTesting(this.isTesting);
            payIntent.setCardEntryMethods(this.cardEntryMethods);
            payIntent.setVoiceAuthCode(this.voiceAuthCode);
            payIntent.setPostalCode(this.postalCode);
            payIntent.setStreetAddress(this.streetAddress);
            payIntent.setIsCardNotPresent(this.isCardNotPresent);
            payIntent.setCardDataMessage(this.cardDataMessage);
            payIntent.setRemotePrint(this.remotePrint);
            payIntent.setTransactionNo(this.transactionNo);
            payIntent.setIsForceSwipePinEntry(this.isForceSwipePinEntry);
            payIntent.setDisableRestartTransactionWhenFailed(this.disableRestartTransactionWhenFailed);
            payIntent.setExternalPaymentId(this.externalPaymentId);
            payIntent.setVaultedCard(this.vaultedCard);
            payIntent.setAllowOfflinePayment(this.allowOfflinePayment);
            payIntent.setApproveOfflinePaymentWithoutPrompt(this.approveOfflinePaymentWithoutPrompt);
            payIntent.setRequiresRemoteConfirmation(this.requiresRemoteConfirmation);
            payIntent.setApplicationTracking(this.applicationTracking);
            payIntent.setAllowPartialAuth(this.allowPartialAuth);
            payIntent.setGermanInfo(this.germanInfo);
            payIntent.setCashAdvanceCustomerIdentification(this.cashAdvanceCustomerIdentification);
            payIntent.setTransactionSettings(this.transactionSettings);
            return payIntent;
        };
        return Builder;
    }());
    PayIntent.Builder = Builder;
})(PayIntent = exports.PayIntent || (exports.PayIntent = {}));

//# sourceMappingURL=../../../../maps/com/clover/util/PayIntent/Builder.js.map


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var remote_pay_cloud_api_1 = __webpack_require__(6);
/**
 * Maps constant message types to specific message class types.
 *
 */
var MethodToMessage = (function () {
    function MethodToMessage() {
    }
    MethodToMessage.getType = function (method) {
        if (MethodToMessage.methodToType == null) {
            MethodToMessage.initialize();
        }
        return MethodToMessage.methodToType[method];
    };
    MethodToMessage.initialize = function () {
        MethodToMessage.methodToType = {};
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACK] = remote_pay_cloud_api_1.remotemessage.AcknowledgementMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CLOSEOUT_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CloseoutResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CLOSEOUT_REQUEST] = remote_pay_cloud_api_1.remotemessage.CloseoutRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CapturePreAuthResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CAPTURE_PREAUTH] = remote_pay_cloud_api_1.remotemessage.CapturePreAuthMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE] = remote_pay_cloud_api_1.remotemessage.ConfirmPaymentMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LAST_MSG_REQUEST] = remote_pay_cloud_api_1.remotemessage.LastMessageRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LAST_MSG_RESPONSE] = remote_pay_cloud_api_1.remotemessage.LastMessageResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADJUST] = remote_pay_cloud_api_1.remotemessage.TipAdjustMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADJUST_RESPONSE] = remote_pay_cloud_api_1.remotemessage.TipAdjustResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.OPEN_CASH_DRAWER] = remote_pay_cloud_api_1.remotemessage.OpenCashDrawerMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS] = remote_pay_cloud_api_1.remotemessage.ShowPaymentReceiptOptionsMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RefundResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_REQUEST] = remote_pay_cloud_api_1.remotemessage.RefundRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_START] = remote_pay_cloud_api_1.remotemessage.TxStartRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_START_RESPONSE] = remote_pay_cloud_api_1.remotemessage.TxStartResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.KEY_PRESS] = remote_pay_cloud_api_1.remotemessage.KeyPressMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.UI_STATE] = remote_pay_cloud_api_1.remotemessage.UiStateMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_STATE] = remote_pay_cloud_api_1.remotemessage.TxStateMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FINISH_OK] = remote_pay_cloud_api_1.remotemessage.FinishOkMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FINISH_CANCEL] = remote_pay_cloud_api_1.remotemessage.FinishCancelMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.DISCOVERY_REQUEST] = remote_pay_cloud_api_1.remotemessage.DiscoveryRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.DISCOVERY_RESPONSE] = remote_pay_cloud_api_1.remotemessage.DiscoveryResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADDED] = remote_pay_cloud_api_1.remotemessage.TipAddedMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VERIFY_SIGNATURE] = remote_pay_cloud_api_1.remotemessage.VerifySignatureMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SIGNATURE_VERIFIED] = remote_pay_cloud_api_1.remotemessage.SignatureVerifiedMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_CONFIRMED] = remote_pay_cloud_api_1.remotemessage.PaymentConfirmedMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_REJECTED] = remote_pay_cloud_api_1.remotemessage.PaymentRejectedMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_VOIDED] = remote_pay_cloud_api_1.remotemessage.PaymentVoidedMessage;
        //MethodToMessage.methodToType[remotemessage.Method.//PRINT_PAYMENT] = remotemessage.;
        //MethodToMessage.methodToType[remotemessage.Method.//REFUND_PRINT_PAYMENT] = remotemessage.;
        //MethodToMessage.methodToType[remotemessage.Method.//PRINT_PAYMENT_MERCHANT_COPY] = remotemessage.;
        //MethodToMessage.methodToType[remotemessage.Method.//PRINT_CREDIT] = remotemessage.;
        //MethodToMessage.methodToType[remotemessage.Method.//PRINT_PAYMENT_DECLINE] = remotemessage.;
        //MethodToMessage.methodToType[remotemessage.Method.//PRINT_CREDIT_DECLINE] = remotemessage.;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_TEXT] = remote_pay_cloud_api_1.remotemessage.TextPrintMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_IMAGE] = remote_pay_cloud_api_1.remotemessage.ImagePrintMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TERMINAL_MESSAGE] = remote_pay_cloud_api_1.remotemessage.TerminalMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_WELCOME_SCREEN] = remote_pay_cloud_api_1.remotemessage.WelcomeMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_THANK_YOU_SCREEN] = remote_pay_cloud_api_1.remotemessage.ThankYouMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_ORDER_SCREEN] = remote_pay_cloud_api_1.remotemessage.OrderUpdateMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.BREAK] = remote_pay_cloud_api_1.remotemessage.BreakMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CASHBACK_SELECTED] = remote_pay_cloud_api_1.remotemessage.CashbackSelectedMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PARTIAL_AUTH] = remote_pay_cloud_api_1.remotemessage.PartialAuthMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VOID_PAYMENT] = remote_pay_cloud_api_1.remotemessage.VoidPaymentMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT] = remote_pay_cloud_api_1.remotemessage.OrderActionAddDiscountMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT] = remote_pay_cloud_api_1.remotemessage.OrderActionRemoveDiscountMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM] = remote_pay_cloud_api_1.remotemessage.OrderActionAddLineItemMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM] = remote_pay_cloud_api_1.remotemessage.OrderActionRemoveLineItemMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_RESPONSE] = remote_pay_cloud_api_1.remotemessage.OrderActionResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VAULT_CARD] = remote_pay_cloud_api_1.remotemessage.VaultCardMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VAULT_CARD_RESPONSE] = remote_pay_cloud_api_1.remotemessage.VaultCardResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LOG_MESSAGE] = remote_pay_cloud_api_1.remotemessage.LogMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS] = remote_pay_cloud_api_1.remotemessage.RetrievePendingPaymentsMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrievePendingPaymentsResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CARD_DATA] = remote_pay_cloud_api_1.remotemessage.CardDataRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CARD_DATA_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CardDataResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_REQUEST] = remote_pay_cloud_api_1.remotemessage.PairingRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_RESPONSE] = remote_pay_cloud_api_1.remotemessage.PairingResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_CODE] = remote_pay_cloud_api_1.remotemessage.PairingCodeMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REMOTE_ERROR] = remote_pay_cloud_api_1.remotemessage.RemoteError;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_REQUEST] = remote_pay_cloud_api_1.remotemessage.ActivityRequest;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_RESPONSE] = remote_pay_cloud_api_1.remotemessage.ActivityResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHUTDOWN] = remote_pay_cloud_api_1.remotemessage.ShutDownMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RESET] = remote_pay_cloud_api_1.remotemessage.ResetMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FORCECONNECT] = remote_pay_cloud_api_1.remotemessage.ForceConnectMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_DEVICE_STATUS_REQUEST] = remote_pay_cloud_api_1.remotemessage.RetrieveDeviceStatusRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_DEVICE_STATUS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrieveDeviceStatusResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RESET_DEVICE_RESPONSE] = remote_pay_cloud_api_1.remotemessage.ResetDeviceResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_MESSAGE_TO_ACTIVITY] = remote_pay_cloud_api_1.remotemessage.ActivityMessageToActivity;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_MESSAGE_FROM_ACTIVITY] = remote_pay_cloud_api_1.remotemessage.ActivityMessageFromActivity;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PAYMENT_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrievePaymentResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PAYMENT_REQUEST] = remote_pay_cloud_api_1.remotemessage.RetrievePaymentRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.GET_PRINTERS_REQUEST] = remote_pay_cloud_api_1.remotemessage.GetPrintersRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.GET_PRINTERS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.GetPrintersResponseMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_JOB_STATUS_REQUEST] = remote_pay_cloud_api_1.remotemessage.PrintJobStatusRequestMessage;
        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_JOB_STATUS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.PrintJobStatusResponseMessage;
    };
    MethodToMessage.methodToType = null;
    return MethodToMessage;
}());
exports.MethodToMessage = MethodToMessage;

//# sourceMappingURL=../../../maps/com/clover/json/MethodToMessage.js.map


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = __webpack_require__(7);
/**
 * A generic parser to take annotated javascript objects and populate them with
 * raw json data.
 *
 */
var JSONToCustomObject = (function () {
    function JSONToCustomObject() {
        // Create a logger
        this.log = Logger_1.Logger.create();
        this.isPrimitive = function (metaInfo) {
            var variableType = metaInfo.type;
            return (variableType === String ||
                variableType === Number ||
                variableType === Boolean);
        };
        this.isArray = function (metaInfo) {
            var variableType = metaInfo.type;
            return (variableType === Array);
        };
        this.isObject = function (metaInfo) {
            var variableType = metaInfo.type;
            return (variableType === Object);
        };
        this.getArrayType = function (metaInfo) {
            if (this.isArray(metaInfo)) {
                return metaInfo.elementType;
            }
        };
        /**
         * Not used much.  Could be here for a map, but really do not want to see a map...
         * @param metaInfo
         * @returns {string}
         */
        this.getValueType = function (metaInfo) {
            return metaInfo.valueType;
        };
    }
    /**
     *
     * @param {Object} jsonobject - an object
     * @param {Object} customobject - an object that is expected to have meta information
     *  attached to it.  This meta information is obtained via getMetaInfo on the passed customobject.
     * @param attachUnknownProperties - if true, then properties that are not recognized will still be
     *  attached to the returned object, or; if the top level customobject has no meta information,
     *  then a copy of the passed jsonobject will be returned.
     * @returns {Object | null}
     */
    JSONToCustomObject.prototype.transfertoObject = function (jsonobject, customobject, attachUnknownProperties) {
        if (typeof jsonobject === "string") {
            // This should not happen, primitives are set outside this.
            // Try to parse it as a json string
            try {
                jsonobject = JSON.parse(jsonobject);
            }
            catch (e) {
                this.log.warn(e);
            }
        }
        // First see if we can do this
        if (customobject["getMetaInfo"] && typeof (customobject.getMetaInfo) === 'function') {
            for (var key in jsonobject) {
                // If the object is null or undefined (I don't think it can be undefined here...)
                // Just set the field on the customobject to null or undefined.
                if (jsonobject[key] === null || jsonobject[key] === undefined) {
                    customobject[key] = jsonobject[key];
                }
                else {
                    var metaInfo = customobject.getMetaInfo(key);
                    if (metaInfo) {
                        // The field exists on the customObject.  Do some checks on type to
                        // make sure we set the field to the proper value.
                        if (this.isPrimitive(metaInfo)) {
                            // Hope for the same type?  There is the possibility
                            // of having different types that are compatible...
                            customobject[key] = jsonobject[key];
                        }
                        else if (this.isArray(metaInfo)) {
                            var elementType = this.getArrayType(metaInfo);
                            var jsonArray = jsonobject[key];
                            // This must be an array.
                            // The json from remote-pay has this structure for arrays:
                            // foo: { elements : [ element ] }
                            // handle this here
                            if (jsonArray.hasOwnProperty("elements")) {
                                jsonArray = jsonArray.elements;
                            }
                            if (Array.isArray(jsonArray)) {
                                customobject[key] = [];
                                for (var count = 0; count < jsonArray.length; count++) {
                                    customobject[key][count] = new elementType;
                                    var copied = this.transfertoObject(jsonArray[count], customobject[key][count], attachUnknownProperties);
                                    if (copied) {
                                        customobject[key][count] = copied;
                                    }
                                }
                            }
                            else {
                                // Warn.  We will be tolerant...
                                this.log.warn("Passed json contains field " + key + " of type " + typeof jsonArray +
                                    ".  The field on the object is of type array.  No assignment will be made", jsonArray, jsonobject);
                                if (attachUnknownProperties) {
                                    customobject["x_" + key] = jsonArray;
                                }
                            }
                        }
                        else if (this.isObject(metaInfo)) {
                            // This is a base object.
                            customobject[key] = {};
                            var copied = this.transfertoObject(jsonobject[key], customobject[key], true);
                            if (copied) {
                                customobject[key] = copied;
                            }
                        }
                        else {
                            var fieldType = metaInfo.type;
                            // Might be an enum.  Check here.
                            if (fieldType[jsonobject[key]]) {
                                // It is an 'enum', grab the enum value.
                                customobject[key] = fieldType[jsonobject[key]];
                            }
                            else {
                                try {
                                    // The field is not primitive, or an array, or an 'enum'
                                    // Try to create an instance of the type
                                    customobject[key] = new fieldType;
                                }
                                catch (e) {
                                    this.log.error("fieldType is ", fieldType, ", key is ", key, " for jsonobject ", jsonobject);
                                    throw e;
                                }
                                var copied = this.transfertoObject(jsonobject[key], customobject[key], attachUnknownProperties);
                                if (copied) {
                                    customobject[key] = copied;
                                }
                            }
                        }
                    }
                    else if (attachUnknownProperties) {
                        // Add the unknown information as properties.
                        customobject[key] = JSON.parse(JSON.stringify(jsonobject));
                    }
                }
            }
        }
        else if (attachUnknownProperties) {
            return JSON.parse(JSON.stringify(jsonobject));
        }
        return null;
    };
    ;
    return JSONToCustomObject;
}());
exports.JSONToCustomObject = JSONToCustomObject;

//# sourceMappingURL=../../../maps/com/clover/json/JSONToCustomObject.js.map


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Clover Device
 *
 * Abstract clover device.
 */
var CloverDevice = (function () {
    /**
     * Constructor
     *
     * @param {string} packageName
     * @param {CloverTransport} transport
     * @param {string} applicationId
     */
    function CloverDevice(packageName, transport, applicationId) {
        this.supportsAck = false;
        this.packageName = packageName;
        this.transport = transport;
        this.applicationId = applicationId;
        this.deviceObservers = [];
        this.supportsAck = false;
    }
    /**
     * Add a new observer to the list of observers
     *
     * @param {CloverDeviceObserver} observer - observer to add
     */
    CloverDevice.prototype.subscribe = function (observer) {
        this.deviceObservers.push(observer);
    };
    /**
     * Remove an observer from the list of observers
     *
     * @param {CloverDeviceObserver} observer - observer to remove
     */
    CloverDevice.prototype.unsubscribe = function (observer) {
        var indexOfObserver = this.deviceObservers.indexOf(observer);
        if (indexOfObserver !== -1) {
            this.deviceObservers.splice(indexOfObserver, 1);
        }
    };
    /**
     * Supports Acknowledgements
     *
     * @param {boolean} supportsAck
     */
    CloverDevice.prototype.setSupportsAcks = function (supportsAck) {
        this.supportsAck = supportsAck;
    };
    /**
     * Get Supports Acknowledgements flag
     *
     * @returns boolean - Flag indicating if this device supports acks
     */
    CloverDevice.prototype.supportsAcks = function () {
        return this.supportsAck;
    };
    return CloverDevice;
}());
exports.CloverDevice = CloverDevice;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/CloverDevice.js.map


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Constants class that defines the current version of the library.
 */
var Version = (function () {
    function Version() {
    }
    /**
     * @type {string} - The current verion of this library
     */
    Version.CLOVER_CLOUD_SDK_VERSION = "1.4.2";
    /**
     * @type {string} - The current SDK name.
     */
    Version.CLOVER_CLOUD_SDK = "com.clover.cloverconnector.cloud";
    return Version;
}());
exports.Version = Version;

//# sourceMappingURL=../../maps/com/clover/Version.js.map


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketPairedCloverTransport_1 = __webpack_require__(381);
var WebSocketCloverDeviceConfiguration_1 = __webpack_require__(75);
/**
 * This is the base class that is used when connecting directly to a device via the "Network Pay Display".
 *
 * A pairing scheme is used when connecting, so the function callbacks for when a pairing code is received,
 * and when the pairing completes must be implemented here.
 */
var WebSocketPairedCloverDeviceConfiguration = (function (_super) {
    __extends(WebSocketPairedCloverDeviceConfiguration, _super);
    /**
     *
     * @param {string} endpoint - the endpoint of the Clover device. e.g. wss://192.168.1.15:12345/remote_pay
     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1
     * @param {string} posName - Displayed during pairing to display the POS name on the Mini. e.g. MyPOS
     * @param {string} serialNumber - Displayed during pairing to display the device identifier. e.g. 'Aisle 3' or 'POS-35153234'
     * @param {string} authToken - The authToken retrieved from a previous pairing activity, passed as an argument to onPairingSuccess. This will be null for the first connection
     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface
     *    that will be used when connecting.
     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
     * @param {number} [heartbeatInterval] - duration to wait for a PING before disconnecting
     * @param {number} [reconnectDelay] - duration to wait until a reconnect is attempted
     */
    function WebSocketPairedCloverDeviceConfiguration(endpoint, applicationId, posName, serialNumber, authToken, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay) {
        var _this = _super.call(this, applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay) || this;
        _this.uri = null;
        _this.uri = endpoint;
        _this.posName = posName;
        _this.serialNumber = serialNumber;
        _this.authToken = authToken;
        _this.webSocketImplClass = webSocketFactoryFunction;
        return _this;
    }
    WebSocketPairedCloverDeviceConfiguration.prototype.getMessagePackageName = function () {
        return 'com.clover.remote_protocol_broadcast.app';
    };
    WebSocketPairedCloverDeviceConfiguration.prototype.getName = function () {
        return 'Clover Secure WebSocket Connector';
    };
    WebSocketPairedCloverDeviceConfiguration.prototype.getCloverTransport = function () {
        // this is where we determine more about the transport...
        // The connection is paired:
        var transport = new WebSocketPairedCloverTransport_1.WebSocketPairedCloverTransport(this.uri, this.heartbeatInterval, this.reconnectDelay, this.pingRetryCountBeforeReconnect, this.posName, this.serialNumber, this.authToken, this.webSocketImplClass);
        transport.setPairingDeviceConfiguration(this);
        return transport;
    };
    WebSocketPairedCloverDeviceConfiguration.prototype.setAuthToken = function (authToken) {
        this.authToken = authToken;
    };
    return WebSocketPairedCloverDeviceConfiguration;
}(WebSocketCloverDeviceConfiguration_1.WebSocketCloverDeviceConfiguration));
exports.WebSocketPairedCloverDeviceConfiguration = WebSocketPairedCloverDeviceConfiguration;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketPairedCloverDeviceConfiguration.js.map


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var WebSocketCloverTransport_1 = __webpack_require__(76);
/**
 * WebSocket Paired Clover Transport
 *
 * Implements code that is used to pair with a device.  Depending on the application running on a device,
 * a pairing protocol may be needed to successfully connect.  This implementation sends the pairing request
 * when the websocket is opened.
 */
var WebSocketPairedCloverTransport = (function (_super) {
    __extends(WebSocketPairedCloverTransport, _super);
    function WebSocketPairedCloverTransport(endpoint, heartbeatInterval, reconnectDelay, retriesUntilDisconnect, posName, serialNumber, authToken, webSocketImplClass) {
        var _this = _super.call(this, heartbeatInterval, reconnectDelay, retriesUntilDisconnect, webSocketImplClass) || this;
        _this.isPairing = true;
        _this.endpoint = endpoint;
        _this.posName = posName;
        _this.serialNumber = serialNumber;
        _this.authToken = authToken;
        _this.initialize();
        return _this;
    }
    WebSocketPairedCloverTransport.prototype.initialize = function () {
        this.initializeWithUri(this.endpoint);
    };
    /**
     *
     * @override
     * @param ws
     */
    WebSocketPairedCloverTransport.prototype.onOpen = function (ws) {
        if (this.cloverWebSocketClient == ws) {
            _super.prototype.onOpen.call(this, ws);
            this.sendPairRequest();
        }
    };
    WebSocketPairedCloverTransport.prototype.sendPairRequest = function () {
        this.isPairing = true;
        var prm = new sdk.remotemessage.PairingRequestMessage();
        prm.setName(this.posName);
        prm.setSerialNumber(this.serialNumber);
        prm.setApplicationName(this.posName);
        prm.setAuthenticationToken(this.authToken);
        this.objectMessageSender.sendObjectMessage(prm);
    };
    /**
     * Handles routing pairing messages.  Routes PAIRING_CODE and PairingResponse PAIRED/INITIAL messages to the
     * configured PairingDeviceConfiguration
     *
     * @param ws
     * @param message
     */
    WebSocketPairedCloverTransport.prototype.onMessage_cwscl = function (ws, message) {
        if (this.cloverWebSocketClient == ws) {
            if (this.isPairing) {
                var remoteMessage = this.messageParser.parseToRemoteMessage(message);
                var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(remoteMessage);
                if (sdkMessage) {
                    if (sdk.remotemessage.Method.PAIRING_CODE == sdkMessage.getMethod()) {
                        this.logger.debug("Got PAIRING_CODE");
                        var pcm = sdkMessage;
                        var pairingCode = pcm.getPairingCode();
                        this.pairingDeviceConfiguration.onPairingCode(pairingCode);
                    }
                    else if (sdk.remotemessage.Method.PAIRING_RESPONSE == sdkMessage.getMethod()) {
                        this.logger.debug("Got PAIRING_RESPONSE");
                        var response = sdkMessage;
                        if (sdk.remotemessage.PairingState.PAIRED == response.getPairingState() ||
                            sdk.remotemessage.PairingState.INITIAL == response.getPairingState()) {
                            this.logger.debug("Got PAIRED pair response");
                            this.isPairing = false;
                            this.authToken = response.getAuthenticationToken();
                            try {
                                this.pairingDeviceConfiguration.onPairingSuccess(this.authToken);
                            }
                            catch (e) {
                                this.logger.debug("Error:" + e);
                            }
                            this.notifyDeviceReady();
                        }
                        else if (sdk.remotemessage.PairingState.FAILED == response.getPairingState()) {
                            this.logger.debug("Got FAILED pair response");
                            this.isPairing = true;
                            this.sendPairRequest();
                        }
                    }
                    else if (sdk.remotemessage.Method.ACK != sdkMessage.getMethod() || sdk.remotemessage.Method.UI_STATE != sdkMessage.getMethod()) {
                        this.logger.debug("Unexpected method: '" + sdkMessage.getMethod() + "' while in pairing mode.");
                    }
                }
                else {
                    this.logger.warn("Unrecognized message", message);
                }
            }
            else {
                _super.prototype.onMessage_cwscl.call(this, ws, message);
            }
        }
    };
    WebSocketPairedCloverTransport.prototype.setPairingDeviceConfiguration = function (pairingDeviceConfiguration) {
        this.pairingDeviceConfiguration = pairingDeviceConfiguration;
    };
    return WebSocketPairedCloverTransport;
}(WebSocketCloverTransport_1.WebSocketCloverTransport));
exports.WebSocketPairedCloverTransport = WebSocketPairedCloverTransport;

//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketPairedCloverTransport.js.map


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketState_1 = __webpack_require__(38);
var Logger_1 = __webpack_require__(7);
/**
 * The implementation of the websocket listener.  The websocket connection is
 * initiated from this class, and many of the low level functionality is housed here.
 */
var CloverWebSocketClient = (function () {
    function CloverWebSocketClient(endpoint, listener, heartbeatInterval, webSocketImplClass) {
        this.logger = Logger_1.Logger.create();
        this.listener = listener;
        this.heartbeatInterval = heartbeatInterval >= 0 ? Math.min(100, heartbeatInterval) : heartbeatInterval; // can be negative, but > than 100 ms
        this.endpoint = endpoint;
        this.webSocketImplClass = webSocketImplClass;
    }
    CloverWebSocketClient.prototype.getWebSocketState = function () {
        return (this.socket) ? this.socket.getReadyState() : null;
    };
    CloverWebSocketClient.prototype.getBufferedAmount = function () {
        return (this.socket ? this.socket.getBufferedAmount() : 0);
    };
    CloverWebSocketClient.prototype.connect = function () {
        if (this.socket != null) {
            throw new Error("Socket already created. Must create a new CloverWebSocketClient");
        }
        try {
            // Kind of odd.  webSocketImplClass is the class definition, we are creating a new one here.
            this.socket = this.webSocketImplClass(this.endpoint);
            // socket.setAutoFlush(true);
            this.socket.addListener(this);
            this.socket.connect();
        }
        catch (e) {
            this.logger.error('connect, connectionError', e);
            this.listener.connectionError(this, e.message);
        }
    };
    CloverWebSocketClient.prototype.close = function (code, reason) {
        this.socket.sendClose(code, reason);
    };
    CloverWebSocketClient.prototype.isConnecting = function () {
        return this.socket.getState() == WebSocketState_1.WebSocketState.CONNECTING;
    };
    CloverWebSocketClient.prototype.isOpen = function () {
        return this.socket.isOpen();
    };
    CloverWebSocketClient.prototype.isClosing = function () {
        return this.socket.getState() == WebSocketState_1.WebSocketState.CLOSING;
    };
    CloverWebSocketClient.prototype.isClosed = function () {
        return this.socket.getState() == WebSocketState_1.WebSocketState.CLOSED;
    };
    CloverWebSocketClient.prototype.onTextMessage = function (websocket, text) {
        this.listener.onMessage(this, text);
    };
    CloverWebSocketClient.prototype.onConnected = function (websocket) {
        this.listener.onOpen(this);
    };
    /**
     *
     * @param {CloverWebSocketInterface} websocket
     * @param event - A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail
     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.
     */
    CloverWebSocketClient.prototype.onConnectError = function (websocket, event) {
        var eventMessage = event.message || "Not available";
        var message = "A websocket connection error has occurred.  Details: " + eventMessage;
        this.logger.error(message);
        this.listener.connectionError(this, message);
    };
    CloverWebSocketClient.prototype.onDisconnected = function (websocket) {
        this.listener.onClose(this, 1000, "", false);
    };
    CloverWebSocketClient.prototype.onCloseFrame = function (websocket, closeCode, reason) {
        this.listener.onClose(this, closeCode, reason, true);
    };
    CloverWebSocketClient.prototype.onError = function (websocket) {
        this.logger.error('A websocket error has occurred.');
    };
    CloverWebSocketClient.prototype.onPingFrame = function (websocket) {
        this.socket.sendPong();
    };
    CloverWebSocketClient.prototype.onSendError = function (websocket) {
        this.listener.onSendError(""); // frame.getPayloadText());
    };
    CloverWebSocketClient.prototype.onUnexpectedError = function (websocket) {
        this.logger.error('An unexpected websocket error has occurred.');
    };
    CloverWebSocketClient.prototype.send = function (message) {
        this.socket.sendText(message);
    };
    CloverWebSocketClient.prototype.clearListener = function () {
        this.socket.removeListener(this);
    };
    CloverWebSocketClient.prototype.setNotifyClose = function (b) {
        this.notifyClose = b;
    };
    CloverWebSocketClient.prototype.shouldNotifyClose = function () {
        return this.notifyClose;
    };
    return CloverWebSocketClient;
}());
exports.CloverWebSocketClient = CloverWebSocketClient;

//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/CloverWebSocketClient.js.map


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Endpoints_1 = __webpack_require__(169);
var DeviceContactInfo_1 = __webpack_require__(384);
var WebSocketState_1 = __webpack_require__(38);
var WebSocketCloverTransport_1 = __webpack_require__(76);
/**
 * WebSocket Cloud Clover Transport.  This handles the need to notify the device before a connection attempt is made.
 *
 */
var WebSocketCloudCloverTransport = (function (_super) {
    __extends(WebSocketCloudCloverTransport, _super);
    /**
     * @param {number} heartbeatInterval - duration to wait for a PING before disconnecting
     * @param {number} reconnectDelay - duration to wait until a reconnect is attempted
     * @param retriesUntilDisconnect - unused
     * @param {Object} webSocketImplClass - the function that will return an instance of the
     *  CloverWebSocketInterface that will be used when connecting.  For Browser implementations, this can be
     * @param {string} cloverServer the base url for the clover server used in the cloud connection.
     *    EX:  https://www.clover.com, http://localhost:9000
     * @param {string} merchantId - the merchant the device belongs to.
     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server
     * @param {string} deviceId - the id (not uuid) of the device to connect to
     * @param {string} friendlyId - an identifier for the specific terminal connected to this device.  This id is used
     *  in debugging and may be sent to other clients if they attempt to connect to the same device.  It will also be
     *  sent to other clients that are currently connected if this device does a forceConnect.
     * @param {boolean} forceConnect - if true, overtake any existing connection.
     * @param {HttpSupport} httpSupport - the helper object used when making http requests.
     */
    function WebSocketCloudCloverTransport(heartbeatInterval, reconnectDelay, retriesUntilDisconnect, webSocketImplClass, cloverServer, merchantId, accessToken, deviceId, friendlyId, forceConnect, httpSupport) {
        var _this = _super.call(this, heartbeatInterval, reconnectDelay, retriesUntilDisconnect, webSocketImplClass) || this;
        _this.cloverServer = cloverServer;
        _this.merchantId = merchantId;
        _this.accessToken = accessToken;
        _this.deviceId = deviceId;
        _this.httpSupport = httpSupport;
        _this.friendlyId = friendlyId;
        _this.forceConnect = forceConnect;
        _this.initialize();
        return _this;
    }
    /**
     * The cloud needs to call an endpoint on the server to notify the device that it wants
     * to talk.  This requires a valid OAuth access token, and we also need to know which Clover
     * server to contact.
     *
     * To make the call, we also need to have an object that we can use that does not tie us to
     * a particular environment.  This is the httpSupport.
     *
     * If an attempt is being made to reconnect, when this fails, it will set the 'reconnecting' flag to
     * false to allow another reconnect attempt to be started by a separate 'thread'.
     */
    WebSocketCloudCloverTransport.prototype.initialize = function () {
        var _this = this;
        // Do the notification call.  This needs to happen every time we attempt to connect.
        // It COULD mean that the device gets a notification when the Cloud Pay Display is
        // already running, but this is not harmful.
        var alertEndpoint = Endpoints_1.Endpoints.getAlertDeviceEndpoint(this.cloverServer, this.merchantId, this.accessToken);
        var deviceContactInfo = new DeviceContactInfo_1.DeviceContactInfo(this.deviceId.replace(/-/g, ""), true);
        this.httpSupport.postData(alertEndpoint, function (data) { return _this.deviceNotificationSent(data); }, function (error) {
            _this.connectionError(_this.cloverWebSocketClient, "Error sending alert to device. Details: " + error.message);
            // This may end a reconnect attempt
            _this.setReconnecting(false);
        }, deviceContactInfo);
    };
    /**
     * This handles the response from the server of the request to send a notification to the device. If the
     * notification was successful, then an OPTIONS call is made using the information provided.
     *
     * @param notificationResponse - has a boolean property for 'sent', that indicates if the notification
     *  was sent to the device.  If it was, then the properties 'host' and 'token' are used to derive the
     *  websocket endpoint uri.
     */
    WebSocketCloudCloverTransport.prototype.deviceNotificationSent = function (notificationResponse) {
        // Note "!data.hasOwnProperty('sent')" is included to allow for
        // backwards compatibility.  If the property is NOT included, then
        // we will assume an earlier version of the protocol on the server,
        // and assume that the notification WAS SENT.
        if (!notificationResponse.hasOwnProperty('sent') || notificationResponse.sent) {
            var deviceWebSocketEndpoint = Endpoints_1.Endpoints.getDeviceWebSocketEndpoint(notificationResponse.host, notificationResponse.token, this.friendlyId, this.forceConnect);
            this.doOptionsCallToAvoid401Error(deviceWebSocketEndpoint);
        }
        else {
            this.connectionError(this.cloverWebSocketClient, "Could not send alert to device.");
            // This may end a reconnect attempt
            this.setReconnecting(false);
        }
    };
    /**
     * Do an OPTIONS call to the web socket endpoint (using http).  This helps with a problem where a 401
     * response came back from the websocket endpoint.
     *
     * @param deviceWebSocketEndpoint
     */
    WebSocketCloudCloverTransport.prototype.doOptionsCallToAvoid401Error = function (deviceWebSocketEndpoint) {
        var _this = this;
        // A way to deal with the 401 error that
        // occurs when a websocket connection is made to the
        // server (sometimes).  Do a preliminary OPTIONS
        // request.  Although this happens regardless of if the error
        // happens, it is tremendously faster.
        var deviceWebSocketEndpointCopy = deviceWebSocketEndpoint;
        var httpUrl = null;
        if (deviceWebSocketEndpointCopy.indexOf("wss") > -1) {
            httpUrl = deviceWebSocketEndpointCopy.replace("wss", "https");
        }
        else {
            httpUrl = deviceWebSocketEndpointCopy.replace("ws", "http");
        }
        this.httpSupport.options(httpUrl, function (data, xmlHttpReqImpl) { return _this.afterOptionsCall(deviceWebSocketEndpoint, xmlHttpReqImpl); }, function (data, xmlHttpReqImpl) { return _this.afterOptionsCall(deviceWebSocketEndpoint, xmlHttpReqImpl); });
    };
    /**
     * Handles the response to the OPTIONS call.  This helps with a 401 response, and is used to help identify
     * any existing connection to the device.
     *
     * If the endpoint is available, then the transport is connected to the websocket.
     *
     * @param deviceWebSocketEndpoint
     */
    WebSocketCloudCloverTransport.prototype.afterOptionsCall = function (deviceWebSocketEndpoint, xmlHttpReqImpl) {
        // See com.clover.support.handler.remote_pay.RemotePayConnectionControlHandler#X_CLOVER_CONNECTED_ID
        // This checks for an existing connection, which includes the id of the terminal that is connected.
        var connectedId = "";
        if (xmlHttpReqImpl && typeof xmlHttpReqImpl["getResponseHeader"] === "function") {
            connectedId = xmlHttpReqImpl.getResponseHeader(WebSocketCloudCloverTransport.X_CLOVER_CONNECTED_ID);
        }
        if (connectedId && !this.forceConnect) {
            if (this.friendlyId == connectedId) {
                // Do anything here?  This is already connected.
                this.logger.debug("Trying to connect, but already connected to friendlyId '" + this.friendlyId + "'");
                if (this.cloverWebSocketClient) {
                    this.cloverWebSocketClient.close();
                }
            }
            else {
                this.connectionError(this.cloverWebSocketClient, "Device is already connected to '" + this.friendlyId + "'");
                // This may end a reconnect attempt
                this.setReconnecting(false);
                return; // done connecting
            }
            // If the device socket is already connected and good, just return.
            if (this.cloverWebSocketClient && this.cloverWebSocketClient.getWebSocketState() == WebSocketState_1.WebSocketState.OPEN) {
                // This may end a reconnect attempt
                this.setReconnecting(false);
                return; // done connecting
            }
        }
        _super.prototype.initializeWithUri.call(this, deviceWebSocketEndpoint);
    };
    /**
     *
     * @override
     * @param ws
     */
    WebSocketCloudCloverTransport.prototype.onOpen = function (ws) {
        if (this.cloverWebSocketClient == ws) {
            _super.prototype.onOpen.call(this, ws);
            this.notifyDeviceReady();
        }
    };
    /**
     * HTTP Header key that helps identify the connected client.  Typically set to the
     * 'friendlyId'.
     *
     * @type {string}
     */
    WebSocketCloudCloverTransport.X_CLOVER_CONNECTED_ID = "X-CLOVER-CONNECTED-ID";
    return WebSocketCloudCloverTransport;
}(WebSocketCloverTransport_1.WebSocketCloverTransport));
exports.WebSocketCloudCloverTransport = WebSocketCloudCloverTransport;

//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketCloudCloverTransport.js.map


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper class.  Used when sending notifications to a device.
 */
var DeviceContactInfo = (function () {
    function DeviceContactInfo(deviceId, isSilent) {
        this.deviceId = deviceId;
        this.isSilent = isSilent;
    }
    return DeviceContactInfo;
}());
exports.DeviceContactInfo = DeviceContactInfo;

//# sourceMappingURL=../../../maps/com/clover/util/DeviceContactInfo.js.map


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk = __webpack_require__(6);
var DefaultCloverDevice_1 = __webpack_require__(165);
/**
 * Device definition that has Cloud specific implementation details.
 */
var WebsocketCloudCloverDevice = (function (_super) {
    __extends(WebsocketCloudCloverDevice, _super);
    function WebsocketCloudCloverDevice(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * The cloud sends a message to the device to let it know that the client is disconnecting
     *
     * @override
     */
    WebsocketCloudCloverDevice.prototype.dispose = function () {
        var remoteMessage = this.buildRemoteMessageToSend(new sdk.remotemessage.ShutDownMessage());
        this.sendRemoteMessage(remoteMessage);
        _super.prototype.dispose.call(this);
    };
    WebsocketCloudCloverDevice.prototype.disposeWithoutMessage = function () {
        _super.prototype.dispose.call(this);
    };
    /**
     * Cloud connections can be interrupted by another terminal.  This handles this unique case by
     * disconnecting without sending the shutdown command to the device.
     *
     * @param rMessage
     */
    WebsocketCloudCloverDevice.prototype.handleRemoteMessageEVENT = function (rMessage) {
        var method = sdk.remotemessage.Method[rMessage.getMethod()];
        if (method == null) {
            this.logger.error('Unsupported method type: ' + rMessage.getMethod());
        }
        else {
            var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);
            if (method == sdk.remotemessage.Method.FORCECONNECT) {
                this.logger.info("Connection was stolen!  Will not attempt reconnect.", rMessage);
                // Do we need to notify anyone?
                this.notifyObserversForceConnect(sdkMessage);
                this.disposeWithoutMessage();
            }
        }
    };
    /**
     * Reports that this connection has been severed via a onDeviceError() notification
     * @param message
     */
    WebsocketCloudCloverDevice.prototype.notifyObserversForceConnect = function (message) {
        this.deviceObservers.forEach(function (obs) {
            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.Interrupted);
            deviceErrorEvent.setMessage(JSON.stringify(message));
            deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);
            obs.onDeviceError(deviceErrorEvent);
        });
    };
    /**
     * Handles the "RESET" message that originates from the server.  This message is a request that the connection be
     * severed and re-established.  This is done because open long-lived connections can cause load balancers or
     * other proxy type servers to hang when an attempt to restart them is made.
     *
     * @param rMessage
     */
    WebsocketCloudCloverDevice.prototype.handleRemoteMessage = function (rMessage) {
        try {
            if (rMessage.getMethod() == sdk.remotemessage.Method.RESET) {
                this.logger.info("Reset requested!  Will reconnect.");
                this.transport.reset();
            }
            else {
                _super.prototype.handleRemoteMessage.call(this, rMessage);
            }
        }
        catch (eM) {
            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);
        }
    };
    return WebsocketCloudCloverDevice;
}(DefaultCloverDevice_1.DefaultCloverDevice));
exports.WebsocketCloudCloverDevice = WebsocketCloudCloverDevice;

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebsocketCloudCloverDevice.js.map


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });

//# sourceMappingURL=../../../../../maps/com/clover/remote/client/transport/CloverTransportObserver.js.map


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CloverConnectorFactoryV2_1 = __webpack_require__(388);
var CloverConnectorFactory_1 = __webpack_require__(172);
/**
 * This allows the construction of factories that may produce connectors that behave differently based on the
 * version.
 *
 * Currently the default version will return a factory that is compatible with the 1.1.0 release.  If
 * VERSION_12 is specified in the configuration, then the factory returned is not browser dependant, and
 * can be used to produce a connector that is capable of a direct connection to the device via the
 * "Network Pay Display" app.
 */
var CloverConnectorFactoryBuilder = (function () {
    function CloverConnectorFactoryBuilder() {
    }
    /**
     * Produces factories that are version specific.  The passed configuration object is used to determine the
     * factory returned.  If the configuration is null or the value of the property
     * CloverConnectorFactoryBuilder.FACTORY_VERSION is not recognized, then the factory returned is
     * compatible with the 1.1.0 version of remote-pay-cloud.
     *
     * @param configuration contains a property for CloverConnectorFactoryBuilder.FACTORY_VERSION, or null.
     * @returns {any}
     */
    CloverConnectorFactoryBuilder.createICloverConnectorFactory = function (configuration) {
        if (configuration && configuration[CloverConnectorFactoryBuilder.FACTORY_VERSION]) {
            if (configuration[CloverConnectorFactoryBuilder.FACTORY_VERSION] == CloverConnectorFactoryBuilder.VERSION_12) {
                return new CloverConnectorFactoryV2_1.CloverConnectorFactoryV2();
            }
            console.error("Factory version specified, but not found!", configuration);
        }
        else {
            // Technically the oldest version, only supports browser compatible connectors.
            return new CloverConnectorFactory_1.CloverConnectorFactory();
        }
    };
    CloverConnectorFactoryBuilder.DEFAULT_VERSION = "DEFAULT";
    CloverConnectorFactoryBuilder.VERSION_12 = "VERSION_12";
    CloverConnectorFactoryBuilder.FACTORY_VERSION = "FACTORY_VERSION";
    return CloverConnectorFactoryBuilder;
}());
exports.CloverConnectorFactoryBuilder = CloverConnectorFactoryBuilder;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactoryBuilder.js.map


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CloverConnector_1 = __webpack_require__(37);
/**
 * Produces ICloverConnector objects that can be configured using CloverDeviceConfiguration objects.
 *
 * The connectors produced are dependant on the configuration and can be used to connect directly to
 * the device from a Web Browser, or via the Cloud.  They can also be used to connect directly to the
 * device or through the cloud using a NodeJS application.
 *
 */
var CloverConnectorFactoryV2 = (function () {
    function CloverConnectorFactoryV2() {
    }
    /**
     * Produces a ICloverConnector given a configuration.
     *
     * @param configuration - a configuration that determines how the connector connects to the device
     * @returns {CloverConnector}
     */
    CloverConnectorFactoryV2.prototype.createICloverConnector = function (configuration) {
        return new CloverConnector_1.CloverConnector(configuration);
    };
    return CloverConnectorFactoryV2;
}());
exports.CloverConnectorFactoryV2 = CloverConnectorFactoryV2;

//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactoryV2.js.map


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });

//# sourceMappingURL=../../../../maps/com/clover/remote/client/ICloverConnectorFactory.js.map


/***/ })
/******/ ]);